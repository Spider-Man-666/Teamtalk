// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Server.proto

#include "IM.Server.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace IM {
namespace Server {
class IMStopReceivePacketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IMStopReceivePacket>
      _instance;
} _IMStopReceivePacket_default_instance_;
class IMValidateReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IMValidateReq>
      _instance;
} _IMValidateReq_default_instance_;
class IMValidateRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IMValidateRsp>
      _instance;
} _IMValidateRsp_default_instance_;
class IMGetDeviceTokenReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IMGetDeviceTokenReq>
      _instance;
} _IMGetDeviceTokenReq_default_instance_;
class IMGetDeviceTokenRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IMGetDeviceTokenRsp>
      _instance;
} _IMGetDeviceTokenRsp_default_instance_;
class IMRoleSetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IMRoleSet>
      _instance;
} _IMRoleSet_default_instance_;
class IMOnlineUserInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IMOnlineUserInfo>
      _instance;
} _IMOnlineUserInfo_default_instance_;
class IMMsgServInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IMMsgServInfo>
      _instance;
} _IMMsgServInfo_default_instance_;
class IMUserStatusUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IMUserStatusUpdate>
      _instance;
} _IMUserStatusUpdate_default_instance_;
class IMUserCntUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IMUserCntUpdate>
      _instance;
} _IMUserCntUpdate_default_instance_;
class IMServerKickUserDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IMServerKickUser>
      _instance;
} _IMServerKickUser_default_instance_;
class IMServerPCLoginStatusNotifyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IMServerPCLoginStatusNotify>
      _instance;
} _IMServerPCLoginStatusNotify_default_instance_;
class IMPushToUserReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IMPushToUserReq>
      _instance;
} _IMPushToUserReq_default_instance_;
class IMPushToUserRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IMPushToUserRsp>
      _instance;
} _IMPushToUserRsp_default_instance_;
class IMGroupGetShieldReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IMGroupGetShieldReq>
      _instance;
} _IMGroupGetShieldReq_default_instance_;
class IMGroupGetShieldRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IMGroupGetShieldRsp>
      _instance;
} _IMGroupGetShieldRsp_default_instance_;
class IMFileTransferReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IMFileTransferReq>
      _instance;
} _IMFileTransferReq_default_instance_;
class IMFileTransferRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IMFileTransferRsp>
      _instance;
} _IMFileTransferRsp_default_instance_;
class IMFileServerIPReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IMFileServerIPReq>
      _instance;
} _IMFileServerIPReq_default_instance_;
class IMFileServerIPRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IMFileServerIPRsp>
      _instance;
} _IMFileServerIPRsp_default_instance_;
}  // namespace Server
}  // namespace IM
namespace protobuf_IM_2eServer_2eproto {
void InitDefaultsIMStopReceivePacketImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::IM::Server::_IMStopReceivePacket_default_instance_;
    new (ptr) ::IM::Server::IMStopReceivePacket();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::Server::IMStopReceivePacket::InitAsDefaultInstance();
}

void InitDefaultsIMStopReceivePacket() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIMStopReceivePacketImpl);
}

void InitDefaultsIMValidateReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::IM::Server::_IMValidateReq_default_instance_;
    new (ptr) ::IM::Server::IMValidateReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::Server::IMValidateReq::InitAsDefaultInstance();
}

void InitDefaultsIMValidateReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIMValidateReqImpl);
}

void InitDefaultsIMValidateRspImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_IM_2eBaseDefine_2eproto::InitDefaultsUserInfo();
  {
    void* ptr = &::IM::Server::_IMValidateRsp_default_instance_;
    new (ptr) ::IM::Server::IMValidateRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::Server::IMValidateRsp::InitAsDefaultInstance();
}

void InitDefaultsIMValidateRsp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIMValidateRspImpl);
}

void InitDefaultsIMGetDeviceTokenReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::IM::Server::_IMGetDeviceTokenReq_default_instance_;
    new (ptr) ::IM::Server::IMGetDeviceTokenReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::Server::IMGetDeviceTokenReq::InitAsDefaultInstance();
}

void InitDefaultsIMGetDeviceTokenReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIMGetDeviceTokenReqImpl);
}

void InitDefaultsIMGetDeviceTokenRspImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_IM_2eBaseDefine_2eproto::InitDefaultsUserTokenInfo();
  {
    void* ptr = &::IM::Server::_IMGetDeviceTokenRsp_default_instance_;
    new (ptr) ::IM::Server::IMGetDeviceTokenRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::Server::IMGetDeviceTokenRsp::InitAsDefaultInstance();
}

void InitDefaultsIMGetDeviceTokenRsp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIMGetDeviceTokenRspImpl);
}

void InitDefaultsIMRoleSetImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::IM::Server::_IMRoleSet_default_instance_;
    new (ptr) ::IM::Server::IMRoleSet();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::Server::IMRoleSet::InitAsDefaultInstance();
}

void InitDefaultsIMRoleSet() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIMRoleSetImpl);
}

void InitDefaultsIMOnlineUserInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_IM_2eBaseDefine_2eproto::InitDefaultsServerUserStat();
  {
    void* ptr = &::IM::Server::_IMOnlineUserInfo_default_instance_;
    new (ptr) ::IM::Server::IMOnlineUserInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::Server::IMOnlineUserInfo::InitAsDefaultInstance();
}

void InitDefaultsIMOnlineUserInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIMOnlineUserInfoImpl);
}

void InitDefaultsIMMsgServInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::IM::Server::_IMMsgServInfo_default_instance_;
    new (ptr) ::IM::Server::IMMsgServInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::Server::IMMsgServInfo::InitAsDefaultInstance();
}

void InitDefaultsIMMsgServInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIMMsgServInfoImpl);
}

void InitDefaultsIMUserStatusUpdateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::IM::Server::_IMUserStatusUpdate_default_instance_;
    new (ptr) ::IM::Server::IMUserStatusUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::Server::IMUserStatusUpdate::InitAsDefaultInstance();
}

void InitDefaultsIMUserStatusUpdate() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIMUserStatusUpdateImpl);
}

void InitDefaultsIMUserCntUpdateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::IM::Server::_IMUserCntUpdate_default_instance_;
    new (ptr) ::IM::Server::IMUserCntUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::Server::IMUserCntUpdate::InitAsDefaultInstance();
}

void InitDefaultsIMUserCntUpdate() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIMUserCntUpdateImpl);
}

void InitDefaultsIMServerKickUserImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::IM::Server::_IMServerKickUser_default_instance_;
    new (ptr) ::IM::Server::IMServerKickUser();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::Server::IMServerKickUser::InitAsDefaultInstance();
}

void InitDefaultsIMServerKickUser() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIMServerKickUserImpl);
}

void InitDefaultsIMServerPCLoginStatusNotifyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::IM::Server::_IMServerPCLoginStatusNotify_default_instance_;
    new (ptr) ::IM::Server::IMServerPCLoginStatusNotify();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::Server::IMServerPCLoginStatusNotify::InitAsDefaultInstance();
}

void InitDefaultsIMServerPCLoginStatusNotify() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIMServerPCLoginStatusNotifyImpl);
}

void InitDefaultsIMPushToUserReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_IM_2eBaseDefine_2eproto::InitDefaultsUserTokenInfo();
  {
    void* ptr = &::IM::Server::_IMPushToUserReq_default_instance_;
    new (ptr) ::IM::Server::IMPushToUserReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::Server::IMPushToUserReq::InitAsDefaultInstance();
}

void InitDefaultsIMPushToUserReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIMPushToUserReqImpl);
}

void InitDefaultsIMPushToUserRspImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_IM_2eBaseDefine_2eproto::InitDefaultsPushResult();
  {
    void* ptr = &::IM::Server::_IMPushToUserRsp_default_instance_;
    new (ptr) ::IM::Server::IMPushToUserRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::Server::IMPushToUserRsp::InitAsDefaultInstance();
}

void InitDefaultsIMPushToUserRsp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIMPushToUserRspImpl);
}

void InitDefaultsIMGroupGetShieldReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::IM::Server::_IMGroupGetShieldReq_default_instance_;
    new (ptr) ::IM::Server::IMGroupGetShieldReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::Server::IMGroupGetShieldReq::InitAsDefaultInstance();
}

void InitDefaultsIMGroupGetShieldReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIMGroupGetShieldReqImpl);
}

void InitDefaultsIMGroupGetShieldRspImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_IM_2eBaseDefine_2eproto::InitDefaultsShieldStatus();
  {
    void* ptr = &::IM::Server::_IMGroupGetShieldRsp_default_instance_;
    new (ptr) ::IM::Server::IMGroupGetShieldRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::Server::IMGroupGetShieldRsp::InitAsDefaultInstance();
}

void InitDefaultsIMGroupGetShieldRsp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIMGroupGetShieldRspImpl);
}

void InitDefaultsIMFileTransferReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::IM::Server::_IMFileTransferReq_default_instance_;
    new (ptr) ::IM::Server::IMFileTransferReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::Server::IMFileTransferReq::InitAsDefaultInstance();
}

void InitDefaultsIMFileTransferReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIMFileTransferReqImpl);
}

void InitDefaultsIMFileTransferRspImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::IM::Server::_IMFileTransferRsp_default_instance_;
    new (ptr) ::IM::Server::IMFileTransferRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::Server::IMFileTransferRsp::InitAsDefaultInstance();
}

void InitDefaultsIMFileTransferRsp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIMFileTransferRspImpl);
}

void InitDefaultsIMFileServerIPReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::IM::Server::_IMFileServerIPReq_default_instance_;
    new (ptr) ::IM::Server::IMFileServerIPReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::Server::IMFileServerIPReq::InitAsDefaultInstance();
}

void InitDefaultsIMFileServerIPReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIMFileServerIPReqImpl);
}

void InitDefaultsIMFileServerIPRspImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_IM_2eBaseDefine_2eproto::InitDefaultsIpAddr();
  {
    void* ptr = &::IM::Server::_IMFileServerIPRsp_default_instance_;
    new (ptr) ::IM::Server::IMFileServerIPRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::Server::IMFileServerIPRsp::InitAsDefaultInstance();
}

void InitDefaultsIMFileServerIPRsp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIMFileServerIPRspImpl);
}

::google::protobuf::Metadata file_level_metadata[20];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMStopReceivePacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMStopReceivePacket, result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMValidateReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMValidateReq, user_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMValidateReq, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMValidateReq, attach_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMValidateRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMValidateRsp, user_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMValidateRsp, result_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMValidateRsp, result_string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMValidateRsp, user_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMValidateRsp, attach_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMGetDeviceTokenReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMGetDeviceTokenReq, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMGetDeviceTokenReq, attach_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMGetDeviceTokenRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMGetDeviceTokenRsp, user_token_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMGetDeviceTokenRsp, attach_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMRoleSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMRoleSet, master_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMOnlineUserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMOnlineUserInfo, user_stat_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMMsgServInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMMsgServInfo, ip1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMMsgServInfo, ip2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMMsgServInfo, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMMsgServInfo, max_conn_cnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMMsgServInfo, cur_conn_cnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMMsgServInfo, host_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMUserStatusUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMUserStatusUpdate, user_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMUserStatusUpdate, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMUserStatusUpdate, client_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMUserCntUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMUserCntUpdate, user_action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMUserCntUpdate, user_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMServerKickUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMServerKickUser, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMServerKickUser, client_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMServerKickUser, reason_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMServerPCLoginStatusNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMServerPCLoginStatusNotify, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMServerPCLoginStatusNotify, login_status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMPushToUserReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMPushToUserReq, flash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMPushToUserReq, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMPushToUserReq, user_token_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMPushToUserRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMPushToUserRsp, push_result_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMGroupGetShieldReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMGroupGetShieldReq, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMGroupGetShieldReq, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMGroupGetShieldReq, attach_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMGroupGetShieldRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMGroupGetShieldRsp, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMGroupGetShieldRsp, shield_status_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMGroupGetShieldRsp, attach_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMFileTransferReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMFileTransferReq, from_user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMFileTransferReq, to_user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMFileTransferReq, file_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMFileTransferReq, file_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMFileTransferReq, trans_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMFileTransferReq, attach_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMFileTransferRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMFileTransferRsp, result_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMFileTransferRsp, from_user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMFileTransferRsp, to_user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMFileTransferRsp, file_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMFileTransferRsp, file_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMFileTransferRsp, task_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMFileTransferRsp, trans_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMFileTransferRsp, attach_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMFileServerIPReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMFileServerIPRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Server::IMFileServerIPRsp, ip_addr_list_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::IM::Server::IMStopReceivePacket)},
  { 6, -1, sizeof(::IM::Server::IMValidateReq)},
  { 14, -1, sizeof(::IM::Server::IMValidateRsp)},
  { 24, -1, sizeof(::IM::Server::IMGetDeviceTokenReq)},
  { 31, -1, sizeof(::IM::Server::IMGetDeviceTokenRsp)},
  { 38, -1, sizeof(::IM::Server::IMRoleSet)},
  { 44, -1, sizeof(::IM::Server::IMOnlineUserInfo)},
  { 50, -1, sizeof(::IM::Server::IMMsgServInfo)},
  { 61, -1, sizeof(::IM::Server::IMUserStatusUpdate)},
  { 69, -1, sizeof(::IM::Server::IMUserCntUpdate)},
  { 76, -1, sizeof(::IM::Server::IMServerKickUser)},
  { 84, -1, sizeof(::IM::Server::IMServerPCLoginStatusNotify)},
  { 91, -1, sizeof(::IM::Server::IMPushToUserReq)},
  { 99, -1, sizeof(::IM::Server::IMPushToUserRsp)},
  { 105, -1, sizeof(::IM::Server::IMGroupGetShieldReq)},
  { 113, -1, sizeof(::IM::Server::IMGroupGetShieldRsp)},
  { 121, -1, sizeof(::IM::Server::IMFileTransferReq)},
  { 132, -1, sizeof(::IM::Server::IMFileTransferRsp)},
  { 145, -1, sizeof(::IM::Server::IMFileServerIPReq)},
  { 150, -1, sizeof(::IM::Server::IMFileServerIPRsp)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::IM::Server::_IMStopReceivePacket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::IM::Server::_IMValidateReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::IM::Server::_IMValidateRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::IM::Server::_IMGetDeviceTokenReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::IM::Server::_IMGetDeviceTokenRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::IM::Server::_IMRoleSet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::IM::Server::_IMOnlineUserInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::IM::Server::_IMMsgServInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::IM::Server::_IMUserStatusUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::IM::Server::_IMUserCntUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::IM::Server::_IMServerKickUser_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::IM::Server::_IMServerPCLoginStatusNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::IM::Server::_IMPushToUserReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::IM::Server::_IMPushToUserRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::IM::Server::_IMGroupGetShieldReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::IM::Server::_IMGroupGetShieldRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::IM::Server::_IMFileTransferReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::IM::Server::_IMFileTransferRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::IM::Server::_IMFileServerIPReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::IM::Server::_IMFileServerIPRsp_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "IM.Server.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 20);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017IM.Server.proto\022\tIM.Server\032\023IM.BaseDef"
      "ine.proto\"%\n\023IMStopReceivePacket\022\016\n\006resu"
      "lt\030\001 \001(\r\"I\n\rIMValidateReq\022\021\n\tuser_name\030\001"
      " \001(\t\022\020\n\010password\030\002 \001(\t\022\023\n\013attach_data\030\024 "
      "\001(\014\"\217\001\n\rIMValidateRsp\022\021\n\tuser_name\030\001 \001(\t"
      "\022\023\n\013result_code\030\002 \001(\r\022\025\n\rresult_string\030\003"
      " \001(\t\022*\n\tuser_info\030\004 \001(\0132\027.IM.BaseDefine."
      "UserInfo\022\023\n\013attach_data\030\024 \001(\014\";\n\023IMGetDe"
      "viceTokenReq\022\017\n\007user_id\030\001 \003(\r\022\023\n\013attach_"
      "data\030\024 \001(\014\"a\n\023IMGetDeviceTokenRsp\0225\n\017use"
      "r_token_info\030\001 \003(\0132\034.IM.BaseDefine.UserT"
      "okenInfo\022\023\n\013attach_data\030\024 \001(\014\"\033\n\tIMRoleS"
      "et\022\016\n\006master\030\001 \001(\r\"I\n\020IMOnlineUserInfo\0225"
      "\n\016user_stat_list\030\001 \003(\0132\035.IM.BaseDefine.S"
      "erverUserStat\"v\n\rIMMsgServInfo\022\013\n\003ip1\030\001 "
      "\001(\t\022\013\n\003ip2\030\002 \001(\t\022\014\n\004port\030\003 \001(\r\022\024\n\014max_co"
      "nn_cnt\030\004 \001(\r\022\024\n\014cur_conn_cnt\030\005 \001(\r\022\021\n\tho"
      "st_name\030\006 \001(\t\"j\n\022IMUserStatusUpdate\022\023\n\013u"
      "ser_status\030\001 \001(\r\022\017\n\007user_id\030\002 \001(\r\022.\n\013cli"
      "ent_type\030\003 \001(\0162\031.IM.BaseDefine.ClientTyp"
      "e\"7\n\017IMUserCntUpdate\022\023\n\013user_action\030\001 \001("
      "\r\022\017\n\007user_id\030\002 \001(\r\"c\n\020IMServerKickUser\022\017"
      "\n\007user_id\030\001 \001(\r\022.\n\013client_type\030\002 \001(\0162\031.I"
      "M.BaseDefine.ClientType\022\016\n\006reason\030\003 \001(\r\""
      "D\n\033IMServerPCLoginStatusNotify\022\017\n\007user_i"
      "d\030\001 \001(\r\022\024\n\014login_status\030\002 \001(\r\"e\n\017IMPushT"
      "oUserReq\022\r\n\005flash\030\001 \001(\t\022\014\n\004data\030\002 \001(\t\0225\n"
      "\017user_token_list\030\003 \003(\0132\034.IM.BaseDefine.U"
      "serTokenInfo\"F\n\017IMPushToUserRsp\0223\n\020push_"
      "result_list\030\001 \003(\0132\031.IM.BaseDefine.PushRe"
      "sult\"M\n\023IMGroupGetShieldReq\022\020\n\010group_id\030"
      "\001 \001(\r\022\017\n\007user_id\030\002 \003(\r\022\023\n\013attach_data\030\024 "
      "\001(\014\"u\n\023IMGroupGetShieldRsp\022\020\n\010group_id\030\001"
      " \001(\r\0227\n\022shield_status_list\030\002 \003(\0132\033.IM.Ba"
      "seDefine.ShieldStatus\022\023\n\013attach_data\030\024 \001"
      "(\014\"\255\001\n\021IMFileTransferReq\022\024\n\014from_user_id"
      "\030\001 \001(\r\022\022\n\nto_user_id\030\002 \001(\r\022\021\n\tfile_name\030"
      "\003 \001(\t\022\021\n\tfile_size\030\004 \001(\r\0223\n\ntrans_mode\030\005"
      " \001(\0162\037.IM.BaseDefine.TransferFileType\022\023\n"
      "\013attach_data\030\024 \001(\014\"\323\001\n\021IMFileTransferRsp"
      "\022\023\n\013result_code\030\001 \001(\r\022\024\n\014from_user_id\030\002 "
      "\001(\r\022\022\n\nto_user_id\030\003 \001(\r\022\021\n\tfile_name\030\004 \001"
      "(\t\022\021\n\tfile_size\030\005 \001(\r\022\017\n\007task_id\030\006 \001(\t\0223"
      "\n\ntrans_mode\030\007 \001(\0162\037.IM.BaseDefine.Trans"
      "ferFileType\022\023\n\013attach_data\030\024 \001(\014\"\023\n\021IMFi"
      "leServerIPReq\"@\n\021IMFileServerIPRsp\022+\n\014ip"
      "_addr_list\030\001 \003(\0132\025.IM.BaseDefine.IpAddrb"
      "\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1887);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "IM.Server.proto", &protobuf_RegisterTypes);
  ::protobuf_IM_2eBaseDefine_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_IM_2eServer_2eproto
namespace IM {
namespace Server {

// ===================================================================

void IMStopReceivePacket::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMStopReceivePacket::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMStopReceivePacket::IMStopReceivePacket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IM_2eServer_2eproto::InitDefaultsIMStopReceivePacket();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Server.IMStopReceivePacket)
}
IMStopReceivePacket::IMStopReceivePacket(const IMStopReceivePacket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:IM.Server.IMStopReceivePacket)
}

void IMStopReceivePacket::SharedCtor() {
  result_ = 0u;
  _cached_size_ = 0;
}

IMStopReceivePacket::~IMStopReceivePacket() {
  // @@protoc_insertion_point(destructor:IM.Server.IMStopReceivePacket)
  SharedDtor();
}

void IMStopReceivePacket::SharedDtor() {
}

void IMStopReceivePacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMStopReceivePacket::descriptor() {
  ::protobuf_IM_2eServer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eServer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IMStopReceivePacket& IMStopReceivePacket::default_instance() {
  ::protobuf_IM_2eServer_2eproto::InitDefaultsIMStopReceivePacket();
  return *internal_default_instance();
}

IMStopReceivePacket* IMStopReceivePacket::New(::google::protobuf::Arena* arena) const {
  IMStopReceivePacket* n = new IMStopReceivePacket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMStopReceivePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Server.IMStopReceivePacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0u;
  _internal_metadata_.Clear();
}

bool IMStopReceivePacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Server.IMStopReceivePacket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Server.IMStopReceivePacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Server.IMStopReceivePacket)
  return false;
#undef DO_
}

void IMStopReceivePacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Server.IMStopReceivePacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:IM.Server.IMStopReceivePacket)
}

::google::protobuf::uint8* IMStopReceivePacket::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:IM.Server.IMStopReceivePacket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result = 1;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Server.IMStopReceivePacket)
  return target;
}

size_t IMStopReceivePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Server.IMStopReceivePacket)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMStopReceivePacket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IM.Server.IMStopReceivePacket)
  GOOGLE_DCHECK_NE(&from, this);
  const IMStopReceivePacket* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IMStopReceivePacket>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IM.Server.IMStopReceivePacket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IM.Server.IMStopReceivePacket)
    MergeFrom(*source);
  }
}

void IMStopReceivePacket::MergeFrom(const IMStopReceivePacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Server.IMStopReceivePacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    set_result(from.result());
  }
}

void IMStopReceivePacket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IM.Server.IMStopReceivePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMStopReceivePacket::CopyFrom(const IMStopReceivePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Server.IMStopReceivePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMStopReceivePacket::IsInitialized() const {
  return true;
}

void IMStopReceivePacket::Swap(IMStopReceivePacket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMStopReceivePacket::InternalSwap(IMStopReceivePacket* other) {
  using std::swap;
  swap(result_, other->result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IMStopReceivePacket::GetMetadata() const {
  protobuf_IM_2eServer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eServer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IMValidateReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMValidateReq::kUserNameFieldNumber;
const int IMValidateReq::kPasswordFieldNumber;
const int IMValidateReq::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMValidateReq::IMValidateReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IM_2eServer_2eproto::InitDefaultsIMValidateReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Server.IMValidateReq)
}
IMValidateReq::IMValidateReq(const IMValidateReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_name().size() > 0) {
    user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.attach_data().size() > 0) {
    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  // @@protoc_insertion_point(copy_constructor:IM.Server.IMValidateReq)
}

void IMValidateReq::SharedCtor() {
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

IMValidateReq::~IMValidateReq() {
  // @@protoc_insertion_point(destructor:IM.Server.IMValidateReq)
  SharedDtor();
}

void IMValidateReq::SharedDtor() {
  user_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IMValidateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMValidateReq::descriptor() {
  ::protobuf_IM_2eServer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eServer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IMValidateReq& IMValidateReq::default_instance() {
  ::protobuf_IM_2eServer_2eproto::InitDefaultsIMValidateReq();
  return *internal_default_instance();
}

IMValidateReq* IMValidateReq::New(::google::protobuf::Arena* arena) const {
  IMValidateReq* n = new IMValidateReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMValidateReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Server.IMValidateReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool IMValidateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Server.IMValidateReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string user_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_name().data(), static_cast<int>(this->user_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.Server.IMValidateReq.user_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string password = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.Server.IMValidateReq.password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes attach_data = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Server.IMValidateReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Server.IMValidateReq)
  return false;
#undef DO_
}

void IMValidateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Server.IMValidateReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_name = 1;
  if (this->user_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_name().data(), static_cast<int>(this->user_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Server.IMValidateReq.user_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_name(), output);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Server.IMValidateReq.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:IM.Server.IMValidateReq)
}

::google::protobuf::uint8* IMValidateReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:IM.Server.IMValidateReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_name = 1;
  if (this->user_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_name().data(), static_cast<int>(this->user_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Server.IMValidateReq.user_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_name(), target);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Server.IMValidateReq.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->attach_data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Server.IMValidateReq)
  return target;
}

size_t IMValidateReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Server.IMValidateReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string user_name = 1;
  if (this->user_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_name());
  }

  // string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMValidateReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IM.Server.IMValidateReq)
  GOOGLE_DCHECK_NE(&from, this);
  const IMValidateReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IMValidateReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IM.Server.IMValidateReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IM.Server.IMValidateReq)
    MergeFrom(*source);
  }
}

void IMValidateReq::MergeFrom(const IMValidateReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Server.IMValidateReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_name().size() > 0) {

    user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.attach_data().size() > 0) {

    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
}

void IMValidateReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IM.Server.IMValidateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMValidateReq::CopyFrom(const IMValidateReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Server.IMValidateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMValidateReq::IsInitialized() const {
  return true;
}

void IMValidateReq::Swap(IMValidateReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMValidateReq::InternalSwap(IMValidateReq* other) {
  using std::swap;
  user_name_.Swap(&other->user_name_);
  password_.Swap(&other->password_);
  attach_data_.Swap(&other->attach_data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IMValidateReq::GetMetadata() const {
  protobuf_IM_2eServer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eServer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IMValidateRsp::InitAsDefaultInstance() {
  ::IM::Server::_IMValidateRsp_default_instance_._instance.get_mutable()->user_info_ = const_cast< ::IM::BaseDefine::UserInfo*>(
      ::IM::BaseDefine::UserInfo::internal_default_instance());
}
void IMValidateRsp::clear_user_info() {
  if (GetArenaNoVirtual() == NULL && user_info_ != NULL) {
    delete user_info_;
  }
  user_info_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMValidateRsp::kUserNameFieldNumber;
const int IMValidateRsp::kResultCodeFieldNumber;
const int IMValidateRsp::kResultStringFieldNumber;
const int IMValidateRsp::kUserInfoFieldNumber;
const int IMValidateRsp::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMValidateRsp::IMValidateRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IM_2eServer_2eproto::InitDefaultsIMValidateRsp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Server.IMValidateRsp)
}
IMValidateRsp::IMValidateRsp(const IMValidateRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_name().size() > 0) {
    user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  result_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.result_string().size() > 0) {
    result_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.result_string_);
  }
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.attach_data().size() > 0) {
    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  if (from.has_user_info()) {
    user_info_ = new ::IM::BaseDefine::UserInfo(*from.user_info_);
  } else {
    user_info_ = NULL;
  }
  result_code_ = from.result_code_;
  // @@protoc_insertion_point(copy_constructor:IM.Server.IMValidateRsp)
}

void IMValidateRsp::SharedCtor() {
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_code_) -
      reinterpret_cast<char*>(&user_info_)) + sizeof(result_code_));
  _cached_size_ = 0;
}

IMValidateRsp::~IMValidateRsp() {
  // @@protoc_insertion_point(destructor:IM.Server.IMValidateRsp)
  SharedDtor();
}

void IMValidateRsp::SharedDtor() {
  user_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_info_;
}

void IMValidateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMValidateRsp::descriptor() {
  ::protobuf_IM_2eServer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eServer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IMValidateRsp& IMValidateRsp::default_instance() {
  ::protobuf_IM_2eServer_2eproto::InitDefaultsIMValidateRsp();
  return *internal_default_instance();
}

IMValidateRsp* IMValidateRsp::New(::google::protobuf::Arena* arena) const {
  IMValidateRsp* n = new IMValidateRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMValidateRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Server.IMValidateRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && user_info_ != NULL) {
    delete user_info_;
  }
  user_info_ = NULL;
  result_code_ = 0u;
  _internal_metadata_.Clear();
}

bool IMValidateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Server.IMValidateRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string user_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_name().data(), static_cast<int>(this->user_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.Server.IMValidateRsp.user_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 result_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string result_string = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result_string()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->result_string().data(), static_cast<int>(this->result_string().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.Server.IMValidateRsp.result_string"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IM.BaseDefine.UserInfo user_info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes attach_data = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Server.IMValidateRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Server.IMValidateRsp)
  return false;
#undef DO_
}

void IMValidateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Server.IMValidateRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_name = 1;
  if (this->user_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_name().data(), static_cast<int>(this->user_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Server.IMValidateRsp.user_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_name(), output);
  }

  // uint32 result_code = 2;
  if (this->result_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result_code(), output);
  }

  // string result_string = 3;
  if (this->result_string().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->result_string().data(), static_cast<int>(this->result_string().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Server.IMValidateRsp.result_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->result_string(), output);
  }

  // .IM.BaseDefine.UserInfo user_info = 4;
  if (this->has_user_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->user_info_, output);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:IM.Server.IMValidateRsp)
}

::google::protobuf::uint8* IMValidateRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:IM.Server.IMValidateRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_name = 1;
  if (this->user_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_name().data(), static_cast<int>(this->user_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Server.IMValidateRsp.user_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_name(), target);
  }

  // uint32 result_code = 2;
  if (this->result_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->result_code(), target);
  }

  // string result_string = 3;
  if (this->result_string().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->result_string().data(), static_cast<int>(this->result_string().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Server.IMValidateRsp.result_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->result_string(), target);
  }

  // .IM.BaseDefine.UserInfo user_info = 4;
  if (this->has_user_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->user_info_, deterministic, target);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->attach_data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Server.IMValidateRsp)
  return target;
}

size_t IMValidateRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Server.IMValidateRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string user_name = 1;
  if (this->user_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_name());
  }

  // string result_string = 3;
  if (this->result_string().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->result_string());
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  // .IM.BaseDefine.UserInfo user_info = 4;
  if (this->has_user_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->user_info_);
  }

  // uint32 result_code = 2;
  if (this->result_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMValidateRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IM.Server.IMValidateRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const IMValidateRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IMValidateRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IM.Server.IMValidateRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IM.Server.IMValidateRsp)
    MergeFrom(*source);
  }
}

void IMValidateRsp::MergeFrom(const IMValidateRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Server.IMValidateRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_name().size() > 0) {

    user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  if (from.result_string().size() > 0) {

    result_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.result_string_);
  }
  if (from.attach_data().size() > 0) {

    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  if (from.has_user_info()) {
    mutable_user_info()->::IM::BaseDefine::UserInfo::MergeFrom(from.user_info());
  }
  if (from.result_code() != 0) {
    set_result_code(from.result_code());
  }
}

void IMValidateRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IM.Server.IMValidateRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMValidateRsp::CopyFrom(const IMValidateRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Server.IMValidateRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMValidateRsp::IsInitialized() const {
  return true;
}

void IMValidateRsp::Swap(IMValidateRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMValidateRsp::InternalSwap(IMValidateRsp* other) {
  using std::swap;
  user_name_.Swap(&other->user_name_);
  result_string_.Swap(&other->result_string_);
  attach_data_.Swap(&other->attach_data_);
  swap(user_info_, other->user_info_);
  swap(result_code_, other->result_code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IMValidateRsp::GetMetadata() const {
  protobuf_IM_2eServer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eServer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IMGetDeviceTokenReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMGetDeviceTokenReq::kUserIdFieldNumber;
const int IMGetDeviceTokenReq::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMGetDeviceTokenReq::IMGetDeviceTokenReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IM_2eServer_2eproto::InitDefaultsIMGetDeviceTokenReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Server.IMGetDeviceTokenReq)
}
IMGetDeviceTokenReq::IMGetDeviceTokenReq(const IMGetDeviceTokenReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      user_id_(from.user_id_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.attach_data().size() > 0) {
    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  // @@protoc_insertion_point(copy_constructor:IM.Server.IMGetDeviceTokenReq)
}

void IMGetDeviceTokenReq::SharedCtor() {
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

IMGetDeviceTokenReq::~IMGetDeviceTokenReq() {
  // @@protoc_insertion_point(destructor:IM.Server.IMGetDeviceTokenReq)
  SharedDtor();
}

void IMGetDeviceTokenReq::SharedDtor() {
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IMGetDeviceTokenReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMGetDeviceTokenReq::descriptor() {
  ::protobuf_IM_2eServer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eServer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IMGetDeviceTokenReq& IMGetDeviceTokenReq::default_instance() {
  ::protobuf_IM_2eServer_2eproto::InitDefaultsIMGetDeviceTokenReq();
  return *internal_default_instance();
}

IMGetDeviceTokenReq* IMGetDeviceTokenReq::New(::google::protobuf::Arena* arena) const {
  IMGetDeviceTokenReq* n = new IMGetDeviceTokenReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMGetDeviceTokenReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Server.IMGetDeviceTokenReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.Clear();
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool IMGetDeviceTokenReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Server.IMGetDeviceTokenReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_user_id())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10u, input, this->mutable_user_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes attach_data = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Server.IMGetDeviceTokenReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Server.IMGetDeviceTokenReq)
  return false;
#undef DO_
}

void IMGetDeviceTokenReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Server.IMGetDeviceTokenReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 user_id = 1;
  if (this->user_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _user_id_cached_byte_size_));
  }
  for (int i = 0, n = this->user_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->user_id(i), output);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:IM.Server.IMGetDeviceTokenReq)
}

::google::protobuf::uint8* IMGetDeviceTokenReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:IM.Server.IMGetDeviceTokenReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 user_id = 1;
  if (this->user_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _user_id_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->user_id_, target);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->attach_data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Server.IMGetDeviceTokenReq)
  return target;
}

size_t IMGetDeviceTokenReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Server.IMGetDeviceTokenReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 user_id = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->user_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _user_id_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGetDeviceTokenReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IM.Server.IMGetDeviceTokenReq)
  GOOGLE_DCHECK_NE(&from, this);
  const IMGetDeviceTokenReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IMGetDeviceTokenReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IM.Server.IMGetDeviceTokenReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IM.Server.IMGetDeviceTokenReq)
    MergeFrom(*source);
  }
}

void IMGetDeviceTokenReq::MergeFrom(const IMGetDeviceTokenReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Server.IMGetDeviceTokenReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_id_.MergeFrom(from.user_id_);
  if (from.attach_data().size() > 0) {

    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
}

void IMGetDeviceTokenReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IM.Server.IMGetDeviceTokenReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMGetDeviceTokenReq::CopyFrom(const IMGetDeviceTokenReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Server.IMGetDeviceTokenReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGetDeviceTokenReq::IsInitialized() const {
  return true;
}

void IMGetDeviceTokenReq::Swap(IMGetDeviceTokenReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMGetDeviceTokenReq::InternalSwap(IMGetDeviceTokenReq* other) {
  using std::swap;
  user_id_.InternalSwap(&other->user_id_);
  attach_data_.Swap(&other->attach_data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IMGetDeviceTokenReq::GetMetadata() const {
  protobuf_IM_2eServer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eServer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IMGetDeviceTokenRsp::InitAsDefaultInstance() {
}
void IMGetDeviceTokenRsp::clear_user_token_info() {
  user_token_info_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMGetDeviceTokenRsp::kUserTokenInfoFieldNumber;
const int IMGetDeviceTokenRsp::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMGetDeviceTokenRsp::IMGetDeviceTokenRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IM_2eServer_2eproto::InitDefaultsIMGetDeviceTokenRsp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Server.IMGetDeviceTokenRsp)
}
IMGetDeviceTokenRsp::IMGetDeviceTokenRsp(const IMGetDeviceTokenRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      user_token_info_(from.user_token_info_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.attach_data().size() > 0) {
    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  // @@protoc_insertion_point(copy_constructor:IM.Server.IMGetDeviceTokenRsp)
}

void IMGetDeviceTokenRsp::SharedCtor() {
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

IMGetDeviceTokenRsp::~IMGetDeviceTokenRsp() {
  // @@protoc_insertion_point(destructor:IM.Server.IMGetDeviceTokenRsp)
  SharedDtor();
}

void IMGetDeviceTokenRsp::SharedDtor() {
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IMGetDeviceTokenRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMGetDeviceTokenRsp::descriptor() {
  ::protobuf_IM_2eServer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eServer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IMGetDeviceTokenRsp& IMGetDeviceTokenRsp::default_instance() {
  ::protobuf_IM_2eServer_2eproto::InitDefaultsIMGetDeviceTokenRsp();
  return *internal_default_instance();
}

IMGetDeviceTokenRsp* IMGetDeviceTokenRsp::New(::google::protobuf::Arena* arena) const {
  IMGetDeviceTokenRsp* n = new IMGetDeviceTokenRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMGetDeviceTokenRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Server.IMGetDeviceTokenRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_token_info_.Clear();
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool IMGetDeviceTokenRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Server.IMGetDeviceTokenRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .IM.BaseDefine.UserTokenInfo user_token_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_user_token_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes attach_data = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Server.IMGetDeviceTokenRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Server.IMGetDeviceTokenRsp)
  return false;
#undef DO_
}

void IMGetDeviceTokenRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Server.IMGetDeviceTokenRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .IM.BaseDefine.UserTokenInfo user_token_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->user_token_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user_token_info(static_cast<int>(i)), output);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:IM.Server.IMGetDeviceTokenRsp)
}

::google::protobuf::uint8* IMGetDeviceTokenRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:IM.Server.IMGetDeviceTokenRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .IM.BaseDefine.UserTokenInfo user_token_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->user_token_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->user_token_info(static_cast<int>(i)), deterministic, target);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->attach_data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Server.IMGetDeviceTokenRsp)
  return target;
}

size_t IMGetDeviceTokenRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Server.IMGetDeviceTokenRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .IM.BaseDefine.UserTokenInfo user_token_info = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->user_token_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->user_token_info(static_cast<int>(i)));
    }
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGetDeviceTokenRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IM.Server.IMGetDeviceTokenRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const IMGetDeviceTokenRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IMGetDeviceTokenRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IM.Server.IMGetDeviceTokenRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IM.Server.IMGetDeviceTokenRsp)
    MergeFrom(*source);
  }
}

void IMGetDeviceTokenRsp::MergeFrom(const IMGetDeviceTokenRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Server.IMGetDeviceTokenRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_token_info_.MergeFrom(from.user_token_info_);
  if (from.attach_data().size() > 0) {

    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
}

void IMGetDeviceTokenRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IM.Server.IMGetDeviceTokenRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMGetDeviceTokenRsp::CopyFrom(const IMGetDeviceTokenRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Server.IMGetDeviceTokenRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGetDeviceTokenRsp::IsInitialized() const {
  return true;
}

void IMGetDeviceTokenRsp::Swap(IMGetDeviceTokenRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMGetDeviceTokenRsp::InternalSwap(IMGetDeviceTokenRsp* other) {
  using std::swap;
  user_token_info_.InternalSwap(&other->user_token_info_);
  attach_data_.Swap(&other->attach_data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IMGetDeviceTokenRsp::GetMetadata() const {
  protobuf_IM_2eServer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eServer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IMRoleSet::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMRoleSet::kMasterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMRoleSet::IMRoleSet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IM_2eServer_2eproto::InitDefaultsIMRoleSet();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Server.IMRoleSet)
}
IMRoleSet::IMRoleSet(const IMRoleSet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  master_ = from.master_;
  // @@protoc_insertion_point(copy_constructor:IM.Server.IMRoleSet)
}

void IMRoleSet::SharedCtor() {
  master_ = 0u;
  _cached_size_ = 0;
}

IMRoleSet::~IMRoleSet() {
  // @@protoc_insertion_point(destructor:IM.Server.IMRoleSet)
  SharedDtor();
}

void IMRoleSet::SharedDtor() {
}

void IMRoleSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMRoleSet::descriptor() {
  ::protobuf_IM_2eServer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eServer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IMRoleSet& IMRoleSet::default_instance() {
  ::protobuf_IM_2eServer_2eproto::InitDefaultsIMRoleSet();
  return *internal_default_instance();
}

IMRoleSet* IMRoleSet::New(::google::protobuf::Arena* arena) const {
  IMRoleSet* n = new IMRoleSet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMRoleSet::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Server.IMRoleSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  master_ = 0u;
  _internal_metadata_.Clear();
}

bool IMRoleSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Server.IMRoleSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 master = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &master_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Server.IMRoleSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Server.IMRoleSet)
  return false;
#undef DO_
}

void IMRoleSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Server.IMRoleSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 master = 1;
  if (this->master() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->master(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:IM.Server.IMRoleSet)
}

::google::protobuf::uint8* IMRoleSet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:IM.Server.IMRoleSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 master = 1;
  if (this->master() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->master(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Server.IMRoleSet)
  return target;
}

size_t IMRoleSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Server.IMRoleSet)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 master = 1;
  if (this->master() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->master());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMRoleSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IM.Server.IMRoleSet)
  GOOGLE_DCHECK_NE(&from, this);
  const IMRoleSet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IMRoleSet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IM.Server.IMRoleSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IM.Server.IMRoleSet)
    MergeFrom(*source);
  }
}

void IMRoleSet::MergeFrom(const IMRoleSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Server.IMRoleSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.master() != 0) {
    set_master(from.master());
  }
}

void IMRoleSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IM.Server.IMRoleSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMRoleSet::CopyFrom(const IMRoleSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Server.IMRoleSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMRoleSet::IsInitialized() const {
  return true;
}

void IMRoleSet::Swap(IMRoleSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMRoleSet::InternalSwap(IMRoleSet* other) {
  using std::swap;
  swap(master_, other->master_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IMRoleSet::GetMetadata() const {
  protobuf_IM_2eServer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eServer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IMOnlineUserInfo::InitAsDefaultInstance() {
}
void IMOnlineUserInfo::clear_user_stat_list() {
  user_stat_list_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMOnlineUserInfo::kUserStatListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMOnlineUserInfo::IMOnlineUserInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IM_2eServer_2eproto::InitDefaultsIMOnlineUserInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Server.IMOnlineUserInfo)
}
IMOnlineUserInfo::IMOnlineUserInfo(const IMOnlineUserInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      user_stat_list_(from.user_stat_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IM.Server.IMOnlineUserInfo)
}

void IMOnlineUserInfo::SharedCtor() {
  _cached_size_ = 0;
}

IMOnlineUserInfo::~IMOnlineUserInfo() {
  // @@protoc_insertion_point(destructor:IM.Server.IMOnlineUserInfo)
  SharedDtor();
}

void IMOnlineUserInfo::SharedDtor() {
}

void IMOnlineUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMOnlineUserInfo::descriptor() {
  ::protobuf_IM_2eServer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eServer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IMOnlineUserInfo& IMOnlineUserInfo::default_instance() {
  ::protobuf_IM_2eServer_2eproto::InitDefaultsIMOnlineUserInfo();
  return *internal_default_instance();
}

IMOnlineUserInfo* IMOnlineUserInfo::New(::google::protobuf::Arena* arena) const {
  IMOnlineUserInfo* n = new IMOnlineUserInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMOnlineUserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Server.IMOnlineUserInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_stat_list_.Clear();
  _internal_metadata_.Clear();
}

bool IMOnlineUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Server.IMOnlineUserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .IM.BaseDefine.ServerUserStat user_stat_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_user_stat_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Server.IMOnlineUserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Server.IMOnlineUserInfo)
  return false;
#undef DO_
}

void IMOnlineUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Server.IMOnlineUserInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .IM.BaseDefine.ServerUserStat user_stat_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->user_stat_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user_stat_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:IM.Server.IMOnlineUserInfo)
}

::google::protobuf::uint8* IMOnlineUserInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:IM.Server.IMOnlineUserInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .IM.BaseDefine.ServerUserStat user_stat_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->user_stat_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->user_stat_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Server.IMOnlineUserInfo)
  return target;
}

size_t IMOnlineUserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Server.IMOnlineUserInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .IM.BaseDefine.ServerUserStat user_stat_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->user_stat_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->user_stat_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMOnlineUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IM.Server.IMOnlineUserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const IMOnlineUserInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IMOnlineUserInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IM.Server.IMOnlineUserInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IM.Server.IMOnlineUserInfo)
    MergeFrom(*source);
  }
}

void IMOnlineUserInfo::MergeFrom(const IMOnlineUserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Server.IMOnlineUserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_stat_list_.MergeFrom(from.user_stat_list_);
}

void IMOnlineUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IM.Server.IMOnlineUserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMOnlineUserInfo::CopyFrom(const IMOnlineUserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Server.IMOnlineUserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMOnlineUserInfo::IsInitialized() const {
  return true;
}

void IMOnlineUserInfo::Swap(IMOnlineUserInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMOnlineUserInfo::InternalSwap(IMOnlineUserInfo* other) {
  using std::swap;
  user_stat_list_.InternalSwap(&other->user_stat_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IMOnlineUserInfo::GetMetadata() const {
  protobuf_IM_2eServer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eServer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IMMsgServInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMMsgServInfo::kIp1FieldNumber;
const int IMMsgServInfo::kIp2FieldNumber;
const int IMMsgServInfo::kPortFieldNumber;
const int IMMsgServInfo::kMaxConnCntFieldNumber;
const int IMMsgServInfo::kCurConnCntFieldNumber;
const int IMMsgServInfo::kHostNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMMsgServInfo::IMMsgServInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IM_2eServer_2eproto::InitDefaultsIMMsgServInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Server.IMMsgServInfo)
}
IMMsgServInfo::IMMsgServInfo(const IMMsgServInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip1().size() > 0) {
    ip1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip1_);
  }
  ip2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip2().size() > 0) {
    ip2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip2_);
  }
  host_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.host_name().size() > 0) {
    host_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_name_);
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&cur_conn_cnt_) -
    reinterpret_cast<char*>(&port_)) + sizeof(cur_conn_cnt_));
  // @@protoc_insertion_point(copy_constructor:IM.Server.IMMsgServInfo)
}

void IMMsgServInfo::SharedCtor() {
  ip1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cur_conn_cnt_) -
      reinterpret_cast<char*>(&port_)) + sizeof(cur_conn_cnt_));
  _cached_size_ = 0;
}

IMMsgServInfo::~IMMsgServInfo() {
  // @@protoc_insertion_point(destructor:IM.Server.IMMsgServInfo)
  SharedDtor();
}

void IMMsgServInfo::SharedDtor() {
  ip1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip2_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IMMsgServInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMMsgServInfo::descriptor() {
  ::protobuf_IM_2eServer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eServer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IMMsgServInfo& IMMsgServInfo::default_instance() {
  ::protobuf_IM_2eServer_2eproto::InitDefaultsIMMsgServInfo();
  return *internal_default_instance();
}

IMMsgServInfo* IMMsgServInfo::New(::google::protobuf::Arena* arena) const {
  IMMsgServInfo* n = new IMMsgServInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMMsgServInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Server.IMMsgServInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cur_conn_cnt_) -
      reinterpret_cast<char*>(&port_)) + sizeof(cur_conn_cnt_));
  _internal_metadata_.Clear();
}

bool IMMsgServInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Server.IMMsgServInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ip1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip1()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip1().data(), static_cast<int>(this->ip1().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.Server.IMMsgServInfo.ip1"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ip2 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip2()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip2().data(), static_cast<int>(this->ip2().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.Server.IMMsgServInfo.ip2"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_conn_cnt = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_conn_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cur_conn_cnt = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_conn_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string host_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->host_name().data(), static_cast<int>(this->host_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.Server.IMMsgServInfo.host_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Server.IMMsgServInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Server.IMMsgServInfo)
  return false;
#undef DO_
}

void IMMsgServInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Server.IMMsgServInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip1 = 1;
  if (this->ip1().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip1().data(), static_cast<int>(this->ip1().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Server.IMMsgServInfo.ip1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip1(), output);
  }

  // string ip2 = 2;
  if (this->ip2().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip2().data(), static_cast<int>(this->ip2().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Server.IMMsgServInfo.ip2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip2(), output);
  }

  // uint32 port = 3;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port(), output);
  }

  // uint32 max_conn_cnt = 4;
  if (this->max_conn_cnt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->max_conn_cnt(), output);
  }

  // uint32 cur_conn_cnt = 5;
  if (this->cur_conn_cnt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cur_conn_cnt(), output);
  }

  // string host_name = 6;
  if (this->host_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host_name().data(), static_cast<int>(this->host_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Server.IMMsgServInfo.host_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->host_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:IM.Server.IMMsgServInfo)
}

::google::protobuf::uint8* IMMsgServInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:IM.Server.IMMsgServInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip1 = 1;
  if (this->ip1().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip1().data(), static_cast<int>(this->ip1().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Server.IMMsgServInfo.ip1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip1(), target);
  }

  // string ip2 = 2;
  if (this->ip2().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip2().data(), static_cast<int>(this->ip2().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Server.IMMsgServInfo.ip2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip2(), target);
  }

  // uint32 port = 3;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->port(), target);
  }

  // uint32 max_conn_cnt = 4;
  if (this->max_conn_cnt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->max_conn_cnt(), target);
  }

  // uint32 cur_conn_cnt = 5;
  if (this->cur_conn_cnt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->cur_conn_cnt(), target);
  }

  // string host_name = 6;
  if (this->host_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host_name().data(), static_cast<int>(this->host_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Server.IMMsgServInfo.host_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->host_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Server.IMMsgServInfo)
  return target;
}

size_t IMMsgServInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Server.IMMsgServInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ip1 = 1;
  if (this->ip1().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip1());
  }

  // string ip2 = 2;
  if (this->ip2().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip2());
  }

  // string host_name = 6;
  if (this->host_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host_name());
  }

  // uint32 port = 3;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  // uint32 max_conn_cnt = 4;
  if (this->max_conn_cnt() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_conn_cnt());
  }

  // uint32 cur_conn_cnt = 5;
  if (this->cur_conn_cnt() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cur_conn_cnt());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMMsgServInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IM.Server.IMMsgServInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const IMMsgServInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IMMsgServInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IM.Server.IMMsgServInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IM.Server.IMMsgServInfo)
    MergeFrom(*source);
  }
}

void IMMsgServInfo::MergeFrom(const IMMsgServInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Server.IMMsgServInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip1().size() > 0) {

    ip1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip1_);
  }
  if (from.ip2().size() > 0) {

    ip2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip2_);
  }
  if (from.host_name().size() > 0) {

    host_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_name_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.max_conn_cnt() != 0) {
    set_max_conn_cnt(from.max_conn_cnt());
  }
  if (from.cur_conn_cnt() != 0) {
    set_cur_conn_cnt(from.cur_conn_cnt());
  }
}

void IMMsgServInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IM.Server.IMMsgServInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMMsgServInfo::CopyFrom(const IMMsgServInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Server.IMMsgServInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMMsgServInfo::IsInitialized() const {
  return true;
}

void IMMsgServInfo::Swap(IMMsgServInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMMsgServInfo::InternalSwap(IMMsgServInfo* other) {
  using std::swap;
  ip1_.Swap(&other->ip1_);
  ip2_.Swap(&other->ip2_);
  host_name_.Swap(&other->host_name_);
  swap(port_, other->port_);
  swap(max_conn_cnt_, other->max_conn_cnt_);
  swap(cur_conn_cnt_, other->cur_conn_cnt_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IMMsgServInfo::GetMetadata() const {
  protobuf_IM_2eServer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eServer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IMUserStatusUpdate::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMUserStatusUpdate::kUserStatusFieldNumber;
const int IMUserStatusUpdate::kUserIdFieldNumber;
const int IMUserStatusUpdate::kClientTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMUserStatusUpdate::IMUserStatusUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IM_2eServer_2eproto::InitDefaultsIMUserStatusUpdate();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Server.IMUserStatusUpdate)
}
IMUserStatusUpdate::IMUserStatusUpdate(const IMUserStatusUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&user_status_, &from.user_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_type_) -
    reinterpret_cast<char*>(&user_status_)) + sizeof(client_type_));
  // @@protoc_insertion_point(copy_constructor:IM.Server.IMUserStatusUpdate)
}

void IMUserStatusUpdate::SharedCtor() {
  ::memset(&user_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_type_) -
      reinterpret_cast<char*>(&user_status_)) + sizeof(client_type_));
  _cached_size_ = 0;
}

IMUserStatusUpdate::~IMUserStatusUpdate() {
  // @@protoc_insertion_point(destructor:IM.Server.IMUserStatusUpdate)
  SharedDtor();
}

void IMUserStatusUpdate::SharedDtor() {
}

void IMUserStatusUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMUserStatusUpdate::descriptor() {
  ::protobuf_IM_2eServer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eServer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IMUserStatusUpdate& IMUserStatusUpdate::default_instance() {
  ::protobuf_IM_2eServer_2eproto::InitDefaultsIMUserStatusUpdate();
  return *internal_default_instance();
}

IMUserStatusUpdate* IMUserStatusUpdate::New(::google::protobuf::Arena* arena) const {
  IMUserStatusUpdate* n = new IMUserStatusUpdate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMUserStatusUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Server.IMUserStatusUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_type_) -
      reinterpret_cast<char*>(&user_status_)) + sizeof(client_type_));
  _internal_metadata_.Clear();
}

bool IMUserStatusUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Server.IMUserStatusUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 user_status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 user_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IM.BaseDefine.ClientType client_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_client_type(static_cast< ::IM::BaseDefine::ClientType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Server.IMUserStatusUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Server.IMUserStatusUpdate)
  return false;
#undef DO_
}

void IMUserStatusUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Server.IMUserStatusUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_status = 1;
  if (this->user_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_status(), output);
  }

  // uint32 user_id = 2;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  // .IM.BaseDefine.ClientType client_type = 3;
  if (this->client_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->client_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:IM.Server.IMUserStatusUpdate)
}

::google::protobuf::uint8* IMUserStatusUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:IM.Server.IMUserStatusUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_status = 1;
  if (this->user_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_status(), target);
  }

  // uint32 user_id = 2;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->user_id(), target);
  }

  // .IM.BaseDefine.ClientType client_type = 3;
  if (this->client_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->client_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Server.IMUserStatusUpdate)
  return target;
}

size_t IMUserStatusUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Server.IMUserStatusUpdate)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 user_status = 1;
  if (this->user_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_status());
  }

  // uint32 user_id = 2;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  // .IM.BaseDefine.ClientType client_type = 3;
  if (this->client_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->client_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMUserStatusUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IM.Server.IMUserStatusUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const IMUserStatusUpdate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IMUserStatusUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IM.Server.IMUserStatusUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IM.Server.IMUserStatusUpdate)
    MergeFrom(*source);
  }
}

void IMUserStatusUpdate::MergeFrom(const IMUserStatusUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Server.IMUserStatusUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_status() != 0) {
    set_user_status(from.user_status());
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.client_type() != 0) {
    set_client_type(from.client_type());
  }
}

void IMUserStatusUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IM.Server.IMUserStatusUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMUserStatusUpdate::CopyFrom(const IMUserStatusUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Server.IMUserStatusUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUserStatusUpdate::IsInitialized() const {
  return true;
}

void IMUserStatusUpdate::Swap(IMUserStatusUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMUserStatusUpdate::InternalSwap(IMUserStatusUpdate* other) {
  using std::swap;
  swap(user_status_, other->user_status_);
  swap(user_id_, other->user_id_);
  swap(client_type_, other->client_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IMUserStatusUpdate::GetMetadata() const {
  protobuf_IM_2eServer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eServer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IMUserCntUpdate::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMUserCntUpdate::kUserActionFieldNumber;
const int IMUserCntUpdate::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMUserCntUpdate::IMUserCntUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IM_2eServer_2eproto::InitDefaultsIMUserCntUpdate();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Server.IMUserCntUpdate)
}
IMUserCntUpdate::IMUserCntUpdate(const IMUserCntUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&user_action_, &from.user_action_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&user_action_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:IM.Server.IMUserCntUpdate)
}

void IMUserCntUpdate::SharedCtor() {
  ::memset(&user_action_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&user_action_)) + sizeof(user_id_));
  _cached_size_ = 0;
}

IMUserCntUpdate::~IMUserCntUpdate() {
  // @@protoc_insertion_point(destructor:IM.Server.IMUserCntUpdate)
  SharedDtor();
}

void IMUserCntUpdate::SharedDtor() {
}

void IMUserCntUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMUserCntUpdate::descriptor() {
  ::protobuf_IM_2eServer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eServer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IMUserCntUpdate& IMUserCntUpdate::default_instance() {
  ::protobuf_IM_2eServer_2eproto::InitDefaultsIMUserCntUpdate();
  return *internal_default_instance();
}

IMUserCntUpdate* IMUserCntUpdate::New(::google::protobuf::Arena* arena) const {
  IMUserCntUpdate* n = new IMUserCntUpdate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMUserCntUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Server.IMUserCntUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_action_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&user_action_)) + sizeof(user_id_));
  _internal_metadata_.Clear();
}

bool IMUserCntUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Server.IMUserCntUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 user_action = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_action_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 user_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Server.IMUserCntUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Server.IMUserCntUpdate)
  return false;
#undef DO_
}

void IMUserCntUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Server.IMUserCntUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_action = 1;
  if (this->user_action() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_action(), output);
  }

  // uint32 user_id = 2;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:IM.Server.IMUserCntUpdate)
}

::google::protobuf::uint8* IMUserCntUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:IM.Server.IMUserCntUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_action = 1;
  if (this->user_action() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_action(), target);
  }

  // uint32 user_id = 2;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->user_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Server.IMUserCntUpdate)
  return target;
}

size_t IMUserCntUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Server.IMUserCntUpdate)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 user_action = 1;
  if (this->user_action() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_action());
  }

  // uint32 user_id = 2;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMUserCntUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IM.Server.IMUserCntUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const IMUserCntUpdate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IMUserCntUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IM.Server.IMUserCntUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IM.Server.IMUserCntUpdate)
    MergeFrom(*source);
  }
}

void IMUserCntUpdate::MergeFrom(const IMUserCntUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Server.IMUserCntUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_action() != 0) {
    set_user_action(from.user_action());
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
}

void IMUserCntUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IM.Server.IMUserCntUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMUserCntUpdate::CopyFrom(const IMUserCntUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Server.IMUserCntUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUserCntUpdate::IsInitialized() const {
  return true;
}

void IMUserCntUpdate::Swap(IMUserCntUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMUserCntUpdate::InternalSwap(IMUserCntUpdate* other) {
  using std::swap;
  swap(user_action_, other->user_action_);
  swap(user_id_, other->user_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IMUserCntUpdate::GetMetadata() const {
  protobuf_IM_2eServer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eServer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IMServerKickUser::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMServerKickUser::kUserIdFieldNumber;
const int IMServerKickUser::kClientTypeFieldNumber;
const int IMServerKickUser::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMServerKickUser::IMServerKickUser()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IM_2eServer_2eproto::InitDefaultsIMServerKickUser();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Server.IMServerKickUser)
}
IMServerKickUser::IMServerKickUser(const IMServerKickUser& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:IM.Server.IMServerKickUser)
}

void IMServerKickUser::SharedCtor() {
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(reason_));
  _cached_size_ = 0;
}

IMServerKickUser::~IMServerKickUser() {
  // @@protoc_insertion_point(destructor:IM.Server.IMServerKickUser)
  SharedDtor();
}

void IMServerKickUser::SharedDtor() {
}

void IMServerKickUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMServerKickUser::descriptor() {
  ::protobuf_IM_2eServer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eServer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IMServerKickUser& IMServerKickUser::default_instance() {
  ::protobuf_IM_2eServer_2eproto::InitDefaultsIMServerKickUser();
  return *internal_default_instance();
}

IMServerKickUser* IMServerKickUser::New(::google::protobuf::Arena* arena) const {
  IMServerKickUser* n = new IMServerKickUser;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMServerKickUser::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Server.IMServerKickUser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(reason_));
  _internal_metadata_.Clear();
}

bool IMServerKickUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Server.IMServerKickUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IM.BaseDefine.ClientType client_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_client_type(static_cast< ::IM::BaseDefine::ClientType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 reason = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Server.IMServerKickUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Server.IMServerKickUser)
  return false;
#undef DO_
}

void IMServerKickUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Server.IMServerKickUser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // .IM.BaseDefine.ClientType client_type = 2;
  if (this->client_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->client_type(), output);
  }

  // uint32 reason = 3;
  if (this->reason() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->reason(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:IM.Server.IMServerKickUser)
}

::google::protobuf::uint8* IMServerKickUser::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:IM.Server.IMServerKickUser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // .IM.BaseDefine.ClientType client_type = 2;
  if (this->client_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->client_type(), target);
  }

  // uint32 reason = 3;
  if (this->reason() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->reason(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Server.IMServerKickUser)
  return target;
}

size_t IMServerKickUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Server.IMServerKickUser)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  // .IM.BaseDefine.ClientType client_type = 2;
  if (this->client_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->client_type());
  }

  // uint32 reason = 3;
  if (this->reason() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reason());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMServerKickUser::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IM.Server.IMServerKickUser)
  GOOGLE_DCHECK_NE(&from, this);
  const IMServerKickUser* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IMServerKickUser>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IM.Server.IMServerKickUser)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IM.Server.IMServerKickUser)
    MergeFrom(*source);
  }
}

void IMServerKickUser::MergeFrom(const IMServerKickUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Server.IMServerKickUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.client_type() != 0) {
    set_client_type(from.client_type());
  }
  if (from.reason() != 0) {
    set_reason(from.reason());
  }
}

void IMServerKickUser::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IM.Server.IMServerKickUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMServerKickUser::CopyFrom(const IMServerKickUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Server.IMServerKickUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMServerKickUser::IsInitialized() const {
  return true;
}

void IMServerKickUser::Swap(IMServerKickUser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMServerKickUser::InternalSwap(IMServerKickUser* other) {
  using std::swap;
  swap(user_id_, other->user_id_);
  swap(client_type_, other->client_type_);
  swap(reason_, other->reason_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IMServerKickUser::GetMetadata() const {
  protobuf_IM_2eServer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eServer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IMServerPCLoginStatusNotify::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMServerPCLoginStatusNotify::kUserIdFieldNumber;
const int IMServerPCLoginStatusNotify::kLoginStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMServerPCLoginStatusNotify::IMServerPCLoginStatusNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IM_2eServer_2eproto::InitDefaultsIMServerPCLoginStatusNotify();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Server.IMServerPCLoginStatusNotify)
}
IMServerPCLoginStatusNotify::IMServerPCLoginStatusNotify(const IMServerPCLoginStatusNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&login_status_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(login_status_));
  // @@protoc_insertion_point(copy_constructor:IM.Server.IMServerPCLoginStatusNotify)
}

void IMServerPCLoginStatusNotify::SharedCtor() {
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&login_status_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(login_status_));
  _cached_size_ = 0;
}

IMServerPCLoginStatusNotify::~IMServerPCLoginStatusNotify() {
  // @@protoc_insertion_point(destructor:IM.Server.IMServerPCLoginStatusNotify)
  SharedDtor();
}

void IMServerPCLoginStatusNotify::SharedDtor() {
}

void IMServerPCLoginStatusNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMServerPCLoginStatusNotify::descriptor() {
  ::protobuf_IM_2eServer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eServer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IMServerPCLoginStatusNotify& IMServerPCLoginStatusNotify::default_instance() {
  ::protobuf_IM_2eServer_2eproto::InitDefaultsIMServerPCLoginStatusNotify();
  return *internal_default_instance();
}

IMServerPCLoginStatusNotify* IMServerPCLoginStatusNotify::New(::google::protobuf::Arena* arena) const {
  IMServerPCLoginStatusNotify* n = new IMServerPCLoginStatusNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMServerPCLoginStatusNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Server.IMServerPCLoginStatusNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&login_status_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(login_status_));
  _internal_metadata_.Clear();
}

bool IMServerPCLoginStatusNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Server.IMServerPCLoginStatusNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 login_status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &login_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Server.IMServerPCLoginStatusNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Server.IMServerPCLoginStatusNotify)
  return false;
#undef DO_
}

void IMServerPCLoginStatusNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Server.IMServerPCLoginStatusNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // uint32 login_status = 2;
  if (this->login_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->login_status(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:IM.Server.IMServerPCLoginStatusNotify)
}

::google::protobuf::uint8* IMServerPCLoginStatusNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:IM.Server.IMServerPCLoginStatusNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // uint32 login_status = 2;
  if (this->login_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->login_status(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Server.IMServerPCLoginStatusNotify)
  return target;
}

size_t IMServerPCLoginStatusNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Server.IMServerPCLoginStatusNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  // uint32 login_status = 2;
  if (this->login_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->login_status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMServerPCLoginStatusNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IM.Server.IMServerPCLoginStatusNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const IMServerPCLoginStatusNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IMServerPCLoginStatusNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IM.Server.IMServerPCLoginStatusNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IM.Server.IMServerPCLoginStatusNotify)
    MergeFrom(*source);
  }
}

void IMServerPCLoginStatusNotify::MergeFrom(const IMServerPCLoginStatusNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Server.IMServerPCLoginStatusNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.login_status() != 0) {
    set_login_status(from.login_status());
  }
}

void IMServerPCLoginStatusNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IM.Server.IMServerPCLoginStatusNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMServerPCLoginStatusNotify::CopyFrom(const IMServerPCLoginStatusNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Server.IMServerPCLoginStatusNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMServerPCLoginStatusNotify::IsInitialized() const {
  return true;
}

void IMServerPCLoginStatusNotify::Swap(IMServerPCLoginStatusNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMServerPCLoginStatusNotify::InternalSwap(IMServerPCLoginStatusNotify* other) {
  using std::swap;
  swap(user_id_, other->user_id_);
  swap(login_status_, other->login_status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IMServerPCLoginStatusNotify::GetMetadata() const {
  protobuf_IM_2eServer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eServer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IMPushToUserReq::InitAsDefaultInstance() {
}
void IMPushToUserReq::clear_user_token_list() {
  user_token_list_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMPushToUserReq::kFlashFieldNumber;
const int IMPushToUserReq::kDataFieldNumber;
const int IMPushToUserReq::kUserTokenListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMPushToUserReq::IMPushToUserReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IM_2eServer_2eproto::InitDefaultsIMPushToUserReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Server.IMPushToUserReq)
}
IMPushToUserReq::IMPushToUserReq(const IMPushToUserReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      user_token_list_(from.user_token_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  flash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.flash().size() > 0) {
    flash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.flash_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:IM.Server.IMPushToUserReq)
}

void IMPushToUserReq::SharedCtor() {
  flash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

IMPushToUserReq::~IMPushToUserReq() {
  // @@protoc_insertion_point(destructor:IM.Server.IMPushToUserReq)
  SharedDtor();
}

void IMPushToUserReq::SharedDtor() {
  flash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IMPushToUserReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMPushToUserReq::descriptor() {
  ::protobuf_IM_2eServer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eServer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IMPushToUserReq& IMPushToUserReq::default_instance() {
  ::protobuf_IM_2eServer_2eproto::InitDefaultsIMPushToUserReq();
  return *internal_default_instance();
}

IMPushToUserReq* IMPushToUserReq::New(::google::protobuf::Arena* arena) const {
  IMPushToUserReq* n = new IMPushToUserReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMPushToUserReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Server.IMPushToUserReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_token_list_.Clear();
  flash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool IMPushToUserReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Server.IMPushToUserReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string flash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_flash()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->flash().data(), static_cast<int>(this->flash().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.Server.IMPushToUserReq.flash"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data().data(), static_cast<int>(this->data().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.Server.IMPushToUserReq.data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .IM.BaseDefine.UserTokenInfo user_token_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_user_token_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Server.IMPushToUserReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Server.IMPushToUserReq)
  return false;
#undef DO_
}

void IMPushToUserReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Server.IMPushToUserReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string flash = 1;
  if (this->flash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->flash().data(), static_cast<int>(this->flash().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Server.IMPushToUserReq.flash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->flash(), output);
  }

  // string data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Server.IMPushToUserReq.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->data(), output);
  }

  // repeated .IM.BaseDefine.UserTokenInfo user_token_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->user_token_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->user_token_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:IM.Server.IMPushToUserReq)
}

::google::protobuf::uint8* IMPushToUserReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:IM.Server.IMPushToUserReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string flash = 1;
  if (this->flash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->flash().data(), static_cast<int>(this->flash().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Server.IMPushToUserReq.flash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->flash(), target);
  }

  // string data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Server.IMPushToUserReq.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->data(), target);
  }

  // repeated .IM.BaseDefine.UserTokenInfo user_token_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->user_token_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->user_token_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Server.IMPushToUserReq)
  return target;
}

size_t IMPushToUserReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Server.IMPushToUserReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .IM.BaseDefine.UserTokenInfo user_token_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->user_token_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->user_token_list(static_cast<int>(i)));
    }
  }

  // string flash = 1;
  if (this->flash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->flash());
  }

  // string data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMPushToUserReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IM.Server.IMPushToUserReq)
  GOOGLE_DCHECK_NE(&from, this);
  const IMPushToUserReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IMPushToUserReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IM.Server.IMPushToUserReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IM.Server.IMPushToUserReq)
    MergeFrom(*source);
  }
}

void IMPushToUserReq::MergeFrom(const IMPushToUserReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Server.IMPushToUserReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_token_list_.MergeFrom(from.user_token_list_);
  if (from.flash().size() > 0) {

    flash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.flash_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void IMPushToUserReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IM.Server.IMPushToUserReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMPushToUserReq::CopyFrom(const IMPushToUserReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Server.IMPushToUserReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMPushToUserReq::IsInitialized() const {
  return true;
}

void IMPushToUserReq::Swap(IMPushToUserReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMPushToUserReq::InternalSwap(IMPushToUserReq* other) {
  using std::swap;
  user_token_list_.InternalSwap(&other->user_token_list_);
  flash_.Swap(&other->flash_);
  data_.Swap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IMPushToUserReq::GetMetadata() const {
  protobuf_IM_2eServer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eServer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IMPushToUserRsp::InitAsDefaultInstance() {
}
void IMPushToUserRsp::clear_push_result_list() {
  push_result_list_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMPushToUserRsp::kPushResultListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMPushToUserRsp::IMPushToUserRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IM_2eServer_2eproto::InitDefaultsIMPushToUserRsp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Server.IMPushToUserRsp)
}
IMPushToUserRsp::IMPushToUserRsp(const IMPushToUserRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      push_result_list_(from.push_result_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IM.Server.IMPushToUserRsp)
}

void IMPushToUserRsp::SharedCtor() {
  _cached_size_ = 0;
}

IMPushToUserRsp::~IMPushToUserRsp() {
  // @@protoc_insertion_point(destructor:IM.Server.IMPushToUserRsp)
  SharedDtor();
}

void IMPushToUserRsp::SharedDtor() {
}

void IMPushToUserRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMPushToUserRsp::descriptor() {
  ::protobuf_IM_2eServer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eServer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IMPushToUserRsp& IMPushToUserRsp::default_instance() {
  ::protobuf_IM_2eServer_2eproto::InitDefaultsIMPushToUserRsp();
  return *internal_default_instance();
}

IMPushToUserRsp* IMPushToUserRsp::New(::google::protobuf::Arena* arena) const {
  IMPushToUserRsp* n = new IMPushToUserRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMPushToUserRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Server.IMPushToUserRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  push_result_list_.Clear();
  _internal_metadata_.Clear();
}

bool IMPushToUserRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Server.IMPushToUserRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .IM.BaseDefine.PushResult push_result_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_push_result_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Server.IMPushToUserRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Server.IMPushToUserRsp)
  return false;
#undef DO_
}

void IMPushToUserRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Server.IMPushToUserRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .IM.BaseDefine.PushResult push_result_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->push_result_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->push_result_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:IM.Server.IMPushToUserRsp)
}

::google::protobuf::uint8* IMPushToUserRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:IM.Server.IMPushToUserRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .IM.BaseDefine.PushResult push_result_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->push_result_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->push_result_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Server.IMPushToUserRsp)
  return target;
}

size_t IMPushToUserRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Server.IMPushToUserRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .IM.BaseDefine.PushResult push_result_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->push_result_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->push_result_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMPushToUserRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IM.Server.IMPushToUserRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const IMPushToUserRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IMPushToUserRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IM.Server.IMPushToUserRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IM.Server.IMPushToUserRsp)
    MergeFrom(*source);
  }
}

void IMPushToUserRsp::MergeFrom(const IMPushToUserRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Server.IMPushToUserRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  push_result_list_.MergeFrom(from.push_result_list_);
}

void IMPushToUserRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IM.Server.IMPushToUserRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMPushToUserRsp::CopyFrom(const IMPushToUserRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Server.IMPushToUserRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMPushToUserRsp::IsInitialized() const {
  return true;
}

void IMPushToUserRsp::Swap(IMPushToUserRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMPushToUserRsp::InternalSwap(IMPushToUserRsp* other) {
  using std::swap;
  push_result_list_.InternalSwap(&other->push_result_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IMPushToUserRsp::GetMetadata() const {
  protobuf_IM_2eServer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eServer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IMGroupGetShieldReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMGroupGetShieldReq::kGroupIdFieldNumber;
const int IMGroupGetShieldReq::kUserIdFieldNumber;
const int IMGroupGetShieldReq::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMGroupGetShieldReq::IMGroupGetShieldReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IM_2eServer_2eproto::InitDefaultsIMGroupGetShieldReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Server.IMGroupGetShieldReq)
}
IMGroupGetShieldReq::IMGroupGetShieldReq(const IMGroupGetShieldReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      user_id_(from.user_id_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.attach_data().size() > 0) {
    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  group_id_ = from.group_id_;
  // @@protoc_insertion_point(copy_constructor:IM.Server.IMGroupGetShieldReq)
}

void IMGroupGetShieldReq::SharedCtor() {
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_id_ = 0u;
  _cached_size_ = 0;
}

IMGroupGetShieldReq::~IMGroupGetShieldReq() {
  // @@protoc_insertion_point(destructor:IM.Server.IMGroupGetShieldReq)
  SharedDtor();
}

void IMGroupGetShieldReq::SharedDtor() {
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IMGroupGetShieldReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMGroupGetShieldReq::descriptor() {
  ::protobuf_IM_2eServer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eServer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IMGroupGetShieldReq& IMGroupGetShieldReq::default_instance() {
  ::protobuf_IM_2eServer_2eproto::InitDefaultsIMGroupGetShieldReq();
  return *internal_default_instance();
}

IMGroupGetShieldReq* IMGroupGetShieldReq::New(::google::protobuf::Arena* arena) const {
  IMGroupGetShieldReq* n = new IMGroupGetShieldReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMGroupGetShieldReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Server.IMGroupGetShieldReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.Clear();
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_id_ = 0u;
  _internal_metadata_.Clear();
}

bool IMGroupGetShieldReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Server.IMGroupGetShieldReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 user_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_user_id())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18u, input, this->mutable_user_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes attach_data = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Server.IMGroupGetShieldReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Server.IMGroupGetShieldReq)
  return false;
#undef DO_
}

void IMGroupGetShieldReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Server.IMGroupGetShieldReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 group_id = 1;
  if (this->group_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group_id(), output);
  }

  // repeated uint32 user_id = 2;
  if (this->user_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _user_id_cached_byte_size_));
  }
  for (int i = 0, n = this->user_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->user_id(i), output);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:IM.Server.IMGroupGetShieldReq)
}

::google::protobuf::uint8* IMGroupGetShieldReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:IM.Server.IMGroupGetShieldReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 group_id = 1;
  if (this->group_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->group_id(), target);
  }

  // repeated uint32 user_id = 2;
  if (this->user_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _user_id_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->user_id_, target);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->attach_data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Server.IMGroupGetShieldReq)
  return target;
}

size_t IMGroupGetShieldReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Server.IMGroupGetShieldReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 user_id = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->user_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _user_id_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  // uint32 group_id = 1;
  if (this->group_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupGetShieldReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IM.Server.IMGroupGetShieldReq)
  GOOGLE_DCHECK_NE(&from, this);
  const IMGroupGetShieldReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IMGroupGetShieldReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IM.Server.IMGroupGetShieldReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IM.Server.IMGroupGetShieldReq)
    MergeFrom(*source);
  }
}

void IMGroupGetShieldReq::MergeFrom(const IMGroupGetShieldReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Server.IMGroupGetShieldReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_id_.MergeFrom(from.user_id_);
  if (from.attach_data().size() > 0) {

    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  if (from.group_id() != 0) {
    set_group_id(from.group_id());
  }
}

void IMGroupGetShieldReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IM.Server.IMGroupGetShieldReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMGroupGetShieldReq::CopyFrom(const IMGroupGetShieldReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Server.IMGroupGetShieldReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupGetShieldReq::IsInitialized() const {
  return true;
}

void IMGroupGetShieldReq::Swap(IMGroupGetShieldReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMGroupGetShieldReq::InternalSwap(IMGroupGetShieldReq* other) {
  using std::swap;
  user_id_.InternalSwap(&other->user_id_);
  attach_data_.Swap(&other->attach_data_);
  swap(group_id_, other->group_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IMGroupGetShieldReq::GetMetadata() const {
  protobuf_IM_2eServer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eServer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IMGroupGetShieldRsp::InitAsDefaultInstance() {
}
void IMGroupGetShieldRsp::clear_shield_status_list() {
  shield_status_list_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMGroupGetShieldRsp::kGroupIdFieldNumber;
const int IMGroupGetShieldRsp::kShieldStatusListFieldNumber;
const int IMGroupGetShieldRsp::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMGroupGetShieldRsp::IMGroupGetShieldRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IM_2eServer_2eproto::InitDefaultsIMGroupGetShieldRsp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Server.IMGroupGetShieldRsp)
}
IMGroupGetShieldRsp::IMGroupGetShieldRsp(const IMGroupGetShieldRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      shield_status_list_(from.shield_status_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.attach_data().size() > 0) {
    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  group_id_ = from.group_id_;
  // @@protoc_insertion_point(copy_constructor:IM.Server.IMGroupGetShieldRsp)
}

void IMGroupGetShieldRsp::SharedCtor() {
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_id_ = 0u;
  _cached_size_ = 0;
}

IMGroupGetShieldRsp::~IMGroupGetShieldRsp() {
  // @@protoc_insertion_point(destructor:IM.Server.IMGroupGetShieldRsp)
  SharedDtor();
}

void IMGroupGetShieldRsp::SharedDtor() {
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IMGroupGetShieldRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMGroupGetShieldRsp::descriptor() {
  ::protobuf_IM_2eServer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eServer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IMGroupGetShieldRsp& IMGroupGetShieldRsp::default_instance() {
  ::protobuf_IM_2eServer_2eproto::InitDefaultsIMGroupGetShieldRsp();
  return *internal_default_instance();
}

IMGroupGetShieldRsp* IMGroupGetShieldRsp::New(::google::protobuf::Arena* arena) const {
  IMGroupGetShieldRsp* n = new IMGroupGetShieldRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMGroupGetShieldRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Server.IMGroupGetShieldRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shield_status_list_.Clear();
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_id_ = 0u;
  _internal_metadata_.Clear();
}

bool IMGroupGetShieldRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Server.IMGroupGetShieldRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .IM.BaseDefine.ShieldStatus shield_status_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_shield_status_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes attach_data = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Server.IMGroupGetShieldRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Server.IMGroupGetShieldRsp)
  return false;
#undef DO_
}

void IMGroupGetShieldRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Server.IMGroupGetShieldRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 group_id = 1;
  if (this->group_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group_id(), output);
  }

  // repeated .IM.BaseDefine.ShieldStatus shield_status_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->shield_status_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->shield_status_list(static_cast<int>(i)), output);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:IM.Server.IMGroupGetShieldRsp)
}

::google::protobuf::uint8* IMGroupGetShieldRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:IM.Server.IMGroupGetShieldRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 group_id = 1;
  if (this->group_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->group_id(), target);
  }

  // repeated .IM.BaseDefine.ShieldStatus shield_status_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->shield_status_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->shield_status_list(static_cast<int>(i)), deterministic, target);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->attach_data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Server.IMGroupGetShieldRsp)
  return target;
}

size_t IMGroupGetShieldRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Server.IMGroupGetShieldRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .IM.BaseDefine.ShieldStatus shield_status_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->shield_status_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->shield_status_list(static_cast<int>(i)));
    }
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  // uint32 group_id = 1;
  if (this->group_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMGroupGetShieldRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IM.Server.IMGroupGetShieldRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const IMGroupGetShieldRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IMGroupGetShieldRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IM.Server.IMGroupGetShieldRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IM.Server.IMGroupGetShieldRsp)
    MergeFrom(*source);
  }
}

void IMGroupGetShieldRsp::MergeFrom(const IMGroupGetShieldRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Server.IMGroupGetShieldRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shield_status_list_.MergeFrom(from.shield_status_list_);
  if (from.attach_data().size() > 0) {

    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  if (from.group_id() != 0) {
    set_group_id(from.group_id());
  }
}

void IMGroupGetShieldRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IM.Server.IMGroupGetShieldRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMGroupGetShieldRsp::CopyFrom(const IMGroupGetShieldRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Server.IMGroupGetShieldRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMGroupGetShieldRsp::IsInitialized() const {
  return true;
}

void IMGroupGetShieldRsp::Swap(IMGroupGetShieldRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMGroupGetShieldRsp::InternalSwap(IMGroupGetShieldRsp* other) {
  using std::swap;
  shield_status_list_.InternalSwap(&other->shield_status_list_);
  attach_data_.Swap(&other->attach_data_);
  swap(group_id_, other->group_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IMGroupGetShieldRsp::GetMetadata() const {
  protobuf_IM_2eServer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eServer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IMFileTransferReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMFileTransferReq::kFromUserIdFieldNumber;
const int IMFileTransferReq::kToUserIdFieldNumber;
const int IMFileTransferReq::kFileNameFieldNumber;
const int IMFileTransferReq::kFileSizeFieldNumber;
const int IMFileTransferReq::kTransModeFieldNumber;
const int IMFileTransferReq::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMFileTransferReq::IMFileTransferReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IM_2eServer_2eproto::InitDefaultsIMFileTransferReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Server.IMFileTransferReq)
}
IMFileTransferReq::IMFileTransferReq(const IMFileTransferReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.file_name().size() > 0) {
    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.attach_data().size() > 0) {
    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  ::memcpy(&from_user_id_, &from.from_user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&trans_mode_) -
    reinterpret_cast<char*>(&from_user_id_)) + sizeof(trans_mode_));
  // @@protoc_insertion_point(copy_constructor:IM.Server.IMFileTransferReq)
}

void IMFileTransferReq::SharedCtor() {
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&from_user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trans_mode_) -
      reinterpret_cast<char*>(&from_user_id_)) + sizeof(trans_mode_));
  _cached_size_ = 0;
}

IMFileTransferReq::~IMFileTransferReq() {
  // @@protoc_insertion_point(destructor:IM.Server.IMFileTransferReq)
  SharedDtor();
}

void IMFileTransferReq::SharedDtor() {
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IMFileTransferReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMFileTransferReq::descriptor() {
  ::protobuf_IM_2eServer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eServer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IMFileTransferReq& IMFileTransferReq::default_instance() {
  ::protobuf_IM_2eServer_2eproto::InitDefaultsIMFileTransferReq();
  return *internal_default_instance();
}

IMFileTransferReq* IMFileTransferReq::New(::google::protobuf::Arena* arena) const {
  IMFileTransferReq* n = new IMFileTransferReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMFileTransferReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Server.IMFileTransferReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&from_user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trans_mode_) -
      reinterpret_cast<char*>(&from_user_id_)) + sizeof(trans_mode_));
  _internal_metadata_.Clear();
}

bool IMFileTransferReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Server.IMFileTransferReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 from_user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 to_user_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &to_user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string file_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_name().data(), static_cast<int>(this->file_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.Server.IMFileTransferReq.file_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 file_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IM.BaseDefine.TransferFileType trans_mode = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_trans_mode(static_cast< ::IM::BaseDefine::TransferFileType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes attach_data = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Server.IMFileTransferReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Server.IMFileTransferReq)
  return false;
#undef DO_
}

void IMFileTransferReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Server.IMFileTransferReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 from_user_id = 1;
  if (this->from_user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->from_user_id(), output);
  }

  // uint32 to_user_id = 2;
  if (this->to_user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->to_user_id(), output);
  }

  // string file_name = 3;
  if (this->file_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Server.IMFileTransferReq.file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->file_name(), output);
  }

  // uint32 file_size = 4;
  if (this->file_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->file_size(), output);
  }

  // .IM.BaseDefine.TransferFileType trans_mode = 5;
  if (this->trans_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->trans_mode(), output);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:IM.Server.IMFileTransferReq)
}

::google::protobuf::uint8* IMFileTransferReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:IM.Server.IMFileTransferReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 from_user_id = 1;
  if (this->from_user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->from_user_id(), target);
  }

  // uint32 to_user_id = 2;
  if (this->to_user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->to_user_id(), target);
  }

  // string file_name = 3;
  if (this->file_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Server.IMFileTransferReq.file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->file_name(), target);
  }

  // uint32 file_size = 4;
  if (this->file_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->file_size(), target);
  }

  // .IM.BaseDefine.TransferFileType trans_mode = 5;
  if (this->trans_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->trans_mode(), target);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->attach_data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Server.IMFileTransferReq)
  return target;
}

size_t IMFileTransferReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Server.IMFileTransferReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string file_name = 3;
  if (this->file_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_name());
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  // uint32 from_user_id = 1;
  if (this->from_user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->from_user_id());
  }

  // uint32 to_user_id = 2;
  if (this->to_user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->to_user_id());
  }

  // uint32 file_size = 4;
  if (this->file_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->file_size());
  }

  // .IM.BaseDefine.TransferFileType trans_mode = 5;
  if (this->trans_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->trans_mode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMFileTransferReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IM.Server.IMFileTransferReq)
  GOOGLE_DCHECK_NE(&from, this);
  const IMFileTransferReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IMFileTransferReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IM.Server.IMFileTransferReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IM.Server.IMFileTransferReq)
    MergeFrom(*source);
  }
}

void IMFileTransferReq::MergeFrom(const IMFileTransferReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Server.IMFileTransferReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file_name().size() > 0) {

    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  if (from.attach_data().size() > 0) {

    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  if (from.from_user_id() != 0) {
    set_from_user_id(from.from_user_id());
  }
  if (from.to_user_id() != 0) {
    set_to_user_id(from.to_user_id());
  }
  if (from.file_size() != 0) {
    set_file_size(from.file_size());
  }
  if (from.trans_mode() != 0) {
    set_trans_mode(from.trans_mode());
  }
}

void IMFileTransferReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IM.Server.IMFileTransferReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMFileTransferReq::CopyFrom(const IMFileTransferReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Server.IMFileTransferReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMFileTransferReq::IsInitialized() const {
  return true;
}

void IMFileTransferReq::Swap(IMFileTransferReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMFileTransferReq::InternalSwap(IMFileTransferReq* other) {
  using std::swap;
  file_name_.Swap(&other->file_name_);
  attach_data_.Swap(&other->attach_data_);
  swap(from_user_id_, other->from_user_id_);
  swap(to_user_id_, other->to_user_id_);
  swap(file_size_, other->file_size_);
  swap(trans_mode_, other->trans_mode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IMFileTransferReq::GetMetadata() const {
  protobuf_IM_2eServer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eServer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IMFileTransferRsp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMFileTransferRsp::kResultCodeFieldNumber;
const int IMFileTransferRsp::kFromUserIdFieldNumber;
const int IMFileTransferRsp::kToUserIdFieldNumber;
const int IMFileTransferRsp::kFileNameFieldNumber;
const int IMFileTransferRsp::kFileSizeFieldNumber;
const int IMFileTransferRsp::kTaskIdFieldNumber;
const int IMFileTransferRsp::kTransModeFieldNumber;
const int IMFileTransferRsp::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMFileTransferRsp::IMFileTransferRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IM_2eServer_2eproto::InitDefaultsIMFileTransferRsp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Server.IMFileTransferRsp)
}
IMFileTransferRsp::IMFileTransferRsp(const IMFileTransferRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.file_name().size() > 0) {
    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  task_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.task_id().size() > 0) {
    task_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.task_id_);
  }
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.attach_data().size() > 0) {
    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  ::memcpy(&result_code_, &from.result_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&trans_mode_) -
    reinterpret_cast<char*>(&result_code_)) + sizeof(trans_mode_));
  // @@protoc_insertion_point(copy_constructor:IM.Server.IMFileTransferRsp)
}

void IMFileTransferRsp::SharedCtor() {
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  task_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trans_mode_) -
      reinterpret_cast<char*>(&result_code_)) + sizeof(trans_mode_));
  _cached_size_ = 0;
}

IMFileTransferRsp::~IMFileTransferRsp() {
  // @@protoc_insertion_point(destructor:IM.Server.IMFileTransferRsp)
  SharedDtor();
}

void IMFileTransferRsp::SharedDtor() {
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  task_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IMFileTransferRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMFileTransferRsp::descriptor() {
  ::protobuf_IM_2eServer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eServer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IMFileTransferRsp& IMFileTransferRsp::default_instance() {
  ::protobuf_IM_2eServer_2eproto::InitDefaultsIMFileTransferRsp();
  return *internal_default_instance();
}

IMFileTransferRsp* IMFileTransferRsp::New(::google::protobuf::Arena* arena) const {
  IMFileTransferRsp* n = new IMFileTransferRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMFileTransferRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Server.IMFileTransferRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  task_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trans_mode_) -
      reinterpret_cast<char*>(&result_code_)) + sizeof(trans_mode_));
  _internal_metadata_.Clear();
}

bool IMFileTransferRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Server.IMFileTransferRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 result_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 from_user_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 to_user_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &to_user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string file_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_name().data(), static_cast<int>(this->file_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.Server.IMFileTransferRsp.file_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 file_size = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string task_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->task_id().data(), static_cast<int>(this->task_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.Server.IMFileTransferRsp.task_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IM.BaseDefine.TransferFileType trans_mode = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_trans_mode(static_cast< ::IM::BaseDefine::TransferFileType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes attach_data = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Server.IMFileTransferRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Server.IMFileTransferRsp)
  return false;
#undef DO_
}

void IMFileTransferRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Server.IMFileTransferRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result_code = 1;
  if (this->result_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result_code(), output);
  }

  // uint32 from_user_id = 2;
  if (this->from_user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->from_user_id(), output);
  }

  // uint32 to_user_id = 3;
  if (this->to_user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->to_user_id(), output);
  }

  // string file_name = 4;
  if (this->file_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Server.IMFileTransferRsp.file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->file_name(), output);
  }

  // uint32 file_size = 5;
  if (this->file_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->file_size(), output);
  }

  // string task_id = 6;
  if (this->task_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->task_id().data(), static_cast<int>(this->task_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Server.IMFileTransferRsp.task_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->task_id(), output);
  }

  // .IM.BaseDefine.TransferFileType trans_mode = 7;
  if (this->trans_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->trans_mode(), output);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:IM.Server.IMFileTransferRsp)
}

::google::protobuf::uint8* IMFileTransferRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:IM.Server.IMFileTransferRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result_code = 1;
  if (this->result_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result_code(), target);
  }

  // uint32 from_user_id = 2;
  if (this->from_user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->from_user_id(), target);
  }

  // uint32 to_user_id = 3;
  if (this->to_user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->to_user_id(), target);
  }

  // string file_name = 4;
  if (this->file_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Server.IMFileTransferRsp.file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->file_name(), target);
  }

  // uint32 file_size = 5;
  if (this->file_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->file_size(), target);
  }

  // string task_id = 6;
  if (this->task_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->task_id().data(), static_cast<int>(this->task_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Server.IMFileTransferRsp.task_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->task_id(), target);
  }

  // .IM.BaseDefine.TransferFileType trans_mode = 7;
  if (this->trans_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->trans_mode(), target);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->attach_data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Server.IMFileTransferRsp)
  return target;
}

size_t IMFileTransferRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Server.IMFileTransferRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string file_name = 4;
  if (this->file_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_name());
  }

  // string task_id = 6;
  if (this->task_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->task_id());
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  // uint32 result_code = 1;
  if (this->result_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result_code());
  }

  // uint32 from_user_id = 2;
  if (this->from_user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->from_user_id());
  }

  // uint32 to_user_id = 3;
  if (this->to_user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->to_user_id());
  }

  // uint32 file_size = 5;
  if (this->file_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->file_size());
  }

  // .IM.BaseDefine.TransferFileType trans_mode = 7;
  if (this->trans_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->trans_mode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMFileTransferRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IM.Server.IMFileTransferRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const IMFileTransferRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IMFileTransferRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IM.Server.IMFileTransferRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IM.Server.IMFileTransferRsp)
    MergeFrom(*source);
  }
}

void IMFileTransferRsp::MergeFrom(const IMFileTransferRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Server.IMFileTransferRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file_name().size() > 0) {

    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  if (from.task_id().size() > 0) {

    task_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.task_id_);
  }
  if (from.attach_data().size() > 0) {

    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  if (from.result_code() != 0) {
    set_result_code(from.result_code());
  }
  if (from.from_user_id() != 0) {
    set_from_user_id(from.from_user_id());
  }
  if (from.to_user_id() != 0) {
    set_to_user_id(from.to_user_id());
  }
  if (from.file_size() != 0) {
    set_file_size(from.file_size());
  }
  if (from.trans_mode() != 0) {
    set_trans_mode(from.trans_mode());
  }
}

void IMFileTransferRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IM.Server.IMFileTransferRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMFileTransferRsp::CopyFrom(const IMFileTransferRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Server.IMFileTransferRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMFileTransferRsp::IsInitialized() const {
  return true;
}

void IMFileTransferRsp::Swap(IMFileTransferRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMFileTransferRsp::InternalSwap(IMFileTransferRsp* other) {
  using std::swap;
  file_name_.Swap(&other->file_name_);
  task_id_.Swap(&other->task_id_);
  attach_data_.Swap(&other->attach_data_);
  swap(result_code_, other->result_code_);
  swap(from_user_id_, other->from_user_id_);
  swap(to_user_id_, other->to_user_id_);
  swap(file_size_, other->file_size_);
  swap(trans_mode_, other->trans_mode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IMFileTransferRsp::GetMetadata() const {
  protobuf_IM_2eServer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eServer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IMFileServerIPReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMFileServerIPReq::IMFileServerIPReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IM_2eServer_2eproto::InitDefaultsIMFileServerIPReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Server.IMFileServerIPReq)
}
IMFileServerIPReq::IMFileServerIPReq(const IMFileServerIPReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IM.Server.IMFileServerIPReq)
}

void IMFileServerIPReq::SharedCtor() {
  _cached_size_ = 0;
}

IMFileServerIPReq::~IMFileServerIPReq() {
  // @@protoc_insertion_point(destructor:IM.Server.IMFileServerIPReq)
  SharedDtor();
}

void IMFileServerIPReq::SharedDtor() {
}

void IMFileServerIPReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMFileServerIPReq::descriptor() {
  ::protobuf_IM_2eServer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eServer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IMFileServerIPReq& IMFileServerIPReq::default_instance() {
  ::protobuf_IM_2eServer_2eproto::InitDefaultsIMFileServerIPReq();
  return *internal_default_instance();
}

IMFileServerIPReq* IMFileServerIPReq::New(::google::protobuf::Arena* arena) const {
  IMFileServerIPReq* n = new IMFileServerIPReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMFileServerIPReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Server.IMFileServerIPReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool IMFileServerIPReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Server.IMFileServerIPReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Server.IMFileServerIPReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Server.IMFileServerIPReq)
  return false;
#undef DO_
}

void IMFileServerIPReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Server.IMFileServerIPReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:IM.Server.IMFileServerIPReq)
}

::google::protobuf::uint8* IMFileServerIPReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:IM.Server.IMFileServerIPReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Server.IMFileServerIPReq)
  return target;
}

size_t IMFileServerIPReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Server.IMFileServerIPReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMFileServerIPReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IM.Server.IMFileServerIPReq)
  GOOGLE_DCHECK_NE(&from, this);
  const IMFileServerIPReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IMFileServerIPReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IM.Server.IMFileServerIPReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IM.Server.IMFileServerIPReq)
    MergeFrom(*source);
  }
}

void IMFileServerIPReq::MergeFrom(const IMFileServerIPReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Server.IMFileServerIPReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void IMFileServerIPReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IM.Server.IMFileServerIPReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMFileServerIPReq::CopyFrom(const IMFileServerIPReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Server.IMFileServerIPReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMFileServerIPReq::IsInitialized() const {
  return true;
}

void IMFileServerIPReq::Swap(IMFileServerIPReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMFileServerIPReq::InternalSwap(IMFileServerIPReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IMFileServerIPReq::GetMetadata() const {
  protobuf_IM_2eServer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eServer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IMFileServerIPRsp::InitAsDefaultInstance() {
}
void IMFileServerIPRsp::clear_ip_addr_list() {
  ip_addr_list_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMFileServerIPRsp::kIpAddrListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMFileServerIPRsp::IMFileServerIPRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IM_2eServer_2eproto::InitDefaultsIMFileServerIPRsp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Server.IMFileServerIPRsp)
}
IMFileServerIPRsp::IMFileServerIPRsp(const IMFileServerIPRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      ip_addr_list_(from.ip_addr_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IM.Server.IMFileServerIPRsp)
}

void IMFileServerIPRsp::SharedCtor() {
  _cached_size_ = 0;
}

IMFileServerIPRsp::~IMFileServerIPRsp() {
  // @@protoc_insertion_point(destructor:IM.Server.IMFileServerIPRsp)
  SharedDtor();
}

void IMFileServerIPRsp::SharedDtor() {
}

void IMFileServerIPRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMFileServerIPRsp::descriptor() {
  ::protobuf_IM_2eServer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eServer_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IMFileServerIPRsp& IMFileServerIPRsp::default_instance() {
  ::protobuf_IM_2eServer_2eproto::InitDefaultsIMFileServerIPRsp();
  return *internal_default_instance();
}

IMFileServerIPRsp* IMFileServerIPRsp::New(::google::protobuf::Arena* arena) const {
  IMFileServerIPRsp* n = new IMFileServerIPRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMFileServerIPRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Server.IMFileServerIPRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_addr_list_.Clear();
  _internal_metadata_.Clear();
}

bool IMFileServerIPRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Server.IMFileServerIPRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .IM.BaseDefine.IpAddr ip_addr_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_ip_addr_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Server.IMFileServerIPRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Server.IMFileServerIPRsp)
  return false;
#undef DO_
}

void IMFileServerIPRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Server.IMFileServerIPRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .IM.BaseDefine.IpAddr ip_addr_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ip_addr_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ip_addr_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:IM.Server.IMFileServerIPRsp)
}

::google::protobuf::uint8* IMFileServerIPRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:IM.Server.IMFileServerIPRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .IM.BaseDefine.IpAddr ip_addr_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ip_addr_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->ip_addr_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Server.IMFileServerIPRsp)
  return target;
}

size_t IMFileServerIPRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Server.IMFileServerIPRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .IM.BaseDefine.IpAddr ip_addr_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->ip_addr_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->ip_addr_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMFileServerIPRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IM.Server.IMFileServerIPRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const IMFileServerIPRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IMFileServerIPRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IM.Server.IMFileServerIPRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IM.Server.IMFileServerIPRsp)
    MergeFrom(*source);
  }
}

void IMFileServerIPRsp::MergeFrom(const IMFileServerIPRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Server.IMFileServerIPRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ip_addr_list_.MergeFrom(from.ip_addr_list_);
}

void IMFileServerIPRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IM.Server.IMFileServerIPRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMFileServerIPRsp::CopyFrom(const IMFileServerIPRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Server.IMFileServerIPRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMFileServerIPRsp::IsInitialized() const {
  return true;
}

void IMFileServerIPRsp::Swap(IMFileServerIPRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMFileServerIPRsp::InternalSwap(IMFileServerIPRsp* other) {
  using std::swap;
  ip_addr_list_.InternalSwap(&other->ip_addr_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IMFileServerIPRsp::GetMetadata() const {
  protobuf_IM_2eServer_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eServer_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Server
}  // namespace IM

// @@protoc_insertion_point(global_scope)
