// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Server.proto

#ifndef PROTOBUF_IM_2eServer_2eproto__INCLUDED
#define PROTOBUF_IM_2eServer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "IM.BaseDefine.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_IM_2eServer_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[20];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsIMStopReceivePacketImpl();
void InitDefaultsIMStopReceivePacket();
void InitDefaultsIMValidateReqImpl();
void InitDefaultsIMValidateReq();
void InitDefaultsIMValidateRspImpl();
void InitDefaultsIMValidateRsp();
void InitDefaultsIMGetDeviceTokenReqImpl();
void InitDefaultsIMGetDeviceTokenReq();
void InitDefaultsIMGetDeviceTokenRspImpl();
void InitDefaultsIMGetDeviceTokenRsp();
void InitDefaultsIMRoleSetImpl();
void InitDefaultsIMRoleSet();
void InitDefaultsIMOnlineUserInfoImpl();
void InitDefaultsIMOnlineUserInfo();
void InitDefaultsIMMsgServInfoImpl();
void InitDefaultsIMMsgServInfo();
void InitDefaultsIMUserStatusUpdateImpl();
void InitDefaultsIMUserStatusUpdate();
void InitDefaultsIMUserCntUpdateImpl();
void InitDefaultsIMUserCntUpdate();
void InitDefaultsIMServerKickUserImpl();
void InitDefaultsIMServerKickUser();
void InitDefaultsIMServerPCLoginStatusNotifyImpl();
void InitDefaultsIMServerPCLoginStatusNotify();
void InitDefaultsIMPushToUserReqImpl();
void InitDefaultsIMPushToUserReq();
void InitDefaultsIMPushToUserRspImpl();
void InitDefaultsIMPushToUserRsp();
void InitDefaultsIMGroupGetShieldReqImpl();
void InitDefaultsIMGroupGetShieldReq();
void InitDefaultsIMGroupGetShieldRspImpl();
void InitDefaultsIMGroupGetShieldRsp();
void InitDefaultsIMFileTransferReqImpl();
void InitDefaultsIMFileTransferReq();
void InitDefaultsIMFileTransferRspImpl();
void InitDefaultsIMFileTransferRsp();
void InitDefaultsIMFileServerIPReqImpl();
void InitDefaultsIMFileServerIPReq();
void InitDefaultsIMFileServerIPRspImpl();
void InitDefaultsIMFileServerIPRsp();
inline void InitDefaults() {
  InitDefaultsIMStopReceivePacket();
  InitDefaultsIMValidateReq();
  InitDefaultsIMValidateRsp();
  InitDefaultsIMGetDeviceTokenReq();
  InitDefaultsIMGetDeviceTokenRsp();
  InitDefaultsIMRoleSet();
  InitDefaultsIMOnlineUserInfo();
  InitDefaultsIMMsgServInfo();
  InitDefaultsIMUserStatusUpdate();
  InitDefaultsIMUserCntUpdate();
  InitDefaultsIMServerKickUser();
  InitDefaultsIMServerPCLoginStatusNotify();
  InitDefaultsIMPushToUserReq();
  InitDefaultsIMPushToUserRsp();
  InitDefaultsIMGroupGetShieldReq();
  InitDefaultsIMGroupGetShieldRsp();
  InitDefaultsIMFileTransferReq();
  InitDefaultsIMFileTransferRsp();
  InitDefaultsIMFileServerIPReq();
  InitDefaultsIMFileServerIPRsp();
}
}  // namespace protobuf_IM_2eServer_2eproto
namespace IM {
namespace Server {
class IMFileServerIPReq;
class IMFileServerIPReqDefaultTypeInternal;
extern IMFileServerIPReqDefaultTypeInternal _IMFileServerIPReq_default_instance_;
class IMFileServerIPRsp;
class IMFileServerIPRspDefaultTypeInternal;
extern IMFileServerIPRspDefaultTypeInternal _IMFileServerIPRsp_default_instance_;
class IMFileTransferReq;
class IMFileTransferReqDefaultTypeInternal;
extern IMFileTransferReqDefaultTypeInternal _IMFileTransferReq_default_instance_;
class IMFileTransferRsp;
class IMFileTransferRspDefaultTypeInternal;
extern IMFileTransferRspDefaultTypeInternal _IMFileTransferRsp_default_instance_;
class IMGetDeviceTokenReq;
class IMGetDeviceTokenReqDefaultTypeInternal;
extern IMGetDeviceTokenReqDefaultTypeInternal _IMGetDeviceTokenReq_default_instance_;
class IMGetDeviceTokenRsp;
class IMGetDeviceTokenRspDefaultTypeInternal;
extern IMGetDeviceTokenRspDefaultTypeInternal _IMGetDeviceTokenRsp_default_instance_;
class IMGroupGetShieldReq;
class IMGroupGetShieldReqDefaultTypeInternal;
extern IMGroupGetShieldReqDefaultTypeInternal _IMGroupGetShieldReq_default_instance_;
class IMGroupGetShieldRsp;
class IMGroupGetShieldRspDefaultTypeInternal;
extern IMGroupGetShieldRspDefaultTypeInternal _IMGroupGetShieldRsp_default_instance_;
class IMMsgServInfo;
class IMMsgServInfoDefaultTypeInternal;
extern IMMsgServInfoDefaultTypeInternal _IMMsgServInfo_default_instance_;
class IMOnlineUserInfo;
class IMOnlineUserInfoDefaultTypeInternal;
extern IMOnlineUserInfoDefaultTypeInternal _IMOnlineUserInfo_default_instance_;
class IMPushToUserReq;
class IMPushToUserReqDefaultTypeInternal;
extern IMPushToUserReqDefaultTypeInternal _IMPushToUserReq_default_instance_;
class IMPushToUserRsp;
class IMPushToUserRspDefaultTypeInternal;
extern IMPushToUserRspDefaultTypeInternal _IMPushToUserRsp_default_instance_;
class IMRoleSet;
class IMRoleSetDefaultTypeInternal;
extern IMRoleSetDefaultTypeInternal _IMRoleSet_default_instance_;
class IMServerKickUser;
class IMServerKickUserDefaultTypeInternal;
extern IMServerKickUserDefaultTypeInternal _IMServerKickUser_default_instance_;
class IMServerPCLoginStatusNotify;
class IMServerPCLoginStatusNotifyDefaultTypeInternal;
extern IMServerPCLoginStatusNotifyDefaultTypeInternal _IMServerPCLoginStatusNotify_default_instance_;
class IMStopReceivePacket;
class IMStopReceivePacketDefaultTypeInternal;
extern IMStopReceivePacketDefaultTypeInternal _IMStopReceivePacket_default_instance_;
class IMUserCntUpdate;
class IMUserCntUpdateDefaultTypeInternal;
extern IMUserCntUpdateDefaultTypeInternal _IMUserCntUpdate_default_instance_;
class IMUserStatusUpdate;
class IMUserStatusUpdateDefaultTypeInternal;
extern IMUserStatusUpdateDefaultTypeInternal _IMUserStatusUpdate_default_instance_;
class IMValidateReq;
class IMValidateReqDefaultTypeInternal;
extern IMValidateReqDefaultTypeInternal _IMValidateReq_default_instance_;
class IMValidateRsp;
class IMValidateRspDefaultTypeInternal;
extern IMValidateRspDefaultTypeInternal _IMValidateRsp_default_instance_;
}  // namespace Server
}  // namespace IM
namespace IM {
namespace Server {

// ===================================================================

class IMStopReceivePacket : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IM.Server.IMStopReceivePacket) */ {
 public:
  IMStopReceivePacket();
  virtual ~IMStopReceivePacket();

  IMStopReceivePacket(const IMStopReceivePacket& from);

  inline IMStopReceivePacket& operator=(const IMStopReceivePacket& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IMStopReceivePacket(IMStopReceivePacket&& from) noexcept
    : IMStopReceivePacket() {
    *this = ::std::move(from);
  }

  inline IMStopReceivePacket& operator=(IMStopReceivePacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IMStopReceivePacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMStopReceivePacket* internal_default_instance() {
    return reinterpret_cast<const IMStopReceivePacket*>(
               &_IMStopReceivePacket_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(IMStopReceivePacket* other);
  friend void swap(IMStopReceivePacket& a, IMStopReceivePacket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IMStopReceivePacket* New() const PROTOBUF_FINAL { return New(NULL); }

  IMStopReceivePacket* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IMStopReceivePacket& from);
  void MergeFrom(const IMStopReceivePacket& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IMStopReceivePacket* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::uint32 result() const;
  void set_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IM.Server.IMStopReceivePacket)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 result_;
  mutable int _cached_size_;
  friend struct ::protobuf_IM_2eServer_2eproto::TableStruct;
  friend void ::protobuf_IM_2eServer_2eproto::InitDefaultsIMStopReceivePacketImpl();
};
// -------------------------------------------------------------------

class IMValidateReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IM.Server.IMValidateReq) */ {
 public:
  IMValidateReq();
  virtual ~IMValidateReq();

  IMValidateReq(const IMValidateReq& from);

  inline IMValidateReq& operator=(const IMValidateReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IMValidateReq(IMValidateReq&& from) noexcept
    : IMValidateReq() {
    *this = ::std::move(from);
  }

  inline IMValidateReq& operator=(IMValidateReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IMValidateReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMValidateReq* internal_default_instance() {
    return reinterpret_cast<const IMValidateReq*>(
               &_IMValidateReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(IMValidateReq* other);
  friend void swap(IMValidateReq& a, IMValidateReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IMValidateReq* New() const PROTOBUF_FINAL { return New(NULL); }

  IMValidateReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IMValidateReq& from);
  void MergeFrom(const IMValidateReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IMValidateReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string user_name = 1;
  void clear_user_name();
  static const int kUserNameFieldNumber = 1;
  const ::std::string& user_name() const;
  void set_user_name(const ::std::string& value);
  #if LANG_CXX11
  void set_user_name(::std::string&& value);
  #endif
  void set_user_name(const char* value);
  void set_user_name(const char* value, size_t size);
  ::std::string* mutable_user_name();
  ::std::string* release_user_name();
  void set_allocated_user_name(::std::string* user_name);

  // string password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // bytes attach_data = 20;
  void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  const ::std::string& attach_data() const;
  void set_attach_data(const ::std::string& value);
  #if LANG_CXX11
  void set_attach_data(::std::string&& value);
  #endif
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  ::std::string* mutable_attach_data();
  ::std::string* release_attach_data();
  void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Server.IMValidateReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_name_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr attach_data_;
  mutable int _cached_size_;
  friend struct ::protobuf_IM_2eServer_2eproto::TableStruct;
  friend void ::protobuf_IM_2eServer_2eproto::InitDefaultsIMValidateReqImpl();
};
// -------------------------------------------------------------------

class IMValidateRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IM.Server.IMValidateRsp) */ {
 public:
  IMValidateRsp();
  virtual ~IMValidateRsp();

  IMValidateRsp(const IMValidateRsp& from);

  inline IMValidateRsp& operator=(const IMValidateRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IMValidateRsp(IMValidateRsp&& from) noexcept
    : IMValidateRsp() {
    *this = ::std::move(from);
  }

  inline IMValidateRsp& operator=(IMValidateRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IMValidateRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMValidateRsp* internal_default_instance() {
    return reinterpret_cast<const IMValidateRsp*>(
               &_IMValidateRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(IMValidateRsp* other);
  friend void swap(IMValidateRsp& a, IMValidateRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IMValidateRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  IMValidateRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IMValidateRsp& from);
  void MergeFrom(const IMValidateRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IMValidateRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string user_name = 1;
  void clear_user_name();
  static const int kUserNameFieldNumber = 1;
  const ::std::string& user_name() const;
  void set_user_name(const ::std::string& value);
  #if LANG_CXX11
  void set_user_name(::std::string&& value);
  #endif
  void set_user_name(const char* value);
  void set_user_name(const char* value, size_t size);
  ::std::string* mutable_user_name();
  ::std::string* release_user_name();
  void set_allocated_user_name(::std::string* user_name);

  // string result_string = 3;
  void clear_result_string();
  static const int kResultStringFieldNumber = 3;
  const ::std::string& result_string() const;
  void set_result_string(const ::std::string& value);
  #if LANG_CXX11
  void set_result_string(::std::string&& value);
  #endif
  void set_result_string(const char* value);
  void set_result_string(const char* value, size_t size);
  ::std::string* mutable_result_string();
  ::std::string* release_result_string();
  void set_allocated_result_string(::std::string* result_string);

  // bytes attach_data = 20;
  void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  const ::std::string& attach_data() const;
  void set_attach_data(const ::std::string& value);
  #if LANG_CXX11
  void set_attach_data(::std::string&& value);
  #endif
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  ::std::string* mutable_attach_data();
  ::std::string* release_attach_data();
  void set_allocated_attach_data(::std::string* attach_data);

  // .IM.BaseDefine.UserInfo user_info = 4;
  bool has_user_info() const;
  void clear_user_info();
  static const int kUserInfoFieldNumber = 4;
  const ::IM::BaseDefine::UserInfo& user_info() const;
  ::IM::BaseDefine::UserInfo* release_user_info();
  ::IM::BaseDefine::UserInfo* mutable_user_info();
  void set_allocated_user_info(::IM::BaseDefine::UserInfo* user_info);

  // uint32 result_code = 2;
  void clear_result_code();
  static const int kResultCodeFieldNumber = 2;
  ::google::protobuf::uint32 result_code() const;
  void set_result_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IM.Server.IMValidateRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_name_;
  ::google::protobuf::internal::ArenaStringPtr result_string_;
  ::google::protobuf::internal::ArenaStringPtr attach_data_;
  ::IM::BaseDefine::UserInfo* user_info_;
  ::google::protobuf::uint32 result_code_;
  mutable int _cached_size_;
  friend struct ::protobuf_IM_2eServer_2eproto::TableStruct;
  friend void ::protobuf_IM_2eServer_2eproto::InitDefaultsIMValidateRspImpl();
};
// -------------------------------------------------------------------

class IMGetDeviceTokenReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IM.Server.IMGetDeviceTokenReq) */ {
 public:
  IMGetDeviceTokenReq();
  virtual ~IMGetDeviceTokenReq();

  IMGetDeviceTokenReq(const IMGetDeviceTokenReq& from);

  inline IMGetDeviceTokenReq& operator=(const IMGetDeviceTokenReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IMGetDeviceTokenReq(IMGetDeviceTokenReq&& from) noexcept
    : IMGetDeviceTokenReq() {
    *this = ::std::move(from);
  }

  inline IMGetDeviceTokenReq& operator=(IMGetDeviceTokenReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IMGetDeviceTokenReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMGetDeviceTokenReq* internal_default_instance() {
    return reinterpret_cast<const IMGetDeviceTokenReq*>(
               &_IMGetDeviceTokenReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(IMGetDeviceTokenReq* other);
  friend void swap(IMGetDeviceTokenReq& a, IMGetDeviceTokenReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IMGetDeviceTokenReq* New() const PROTOBUF_FINAL { return New(NULL); }

  IMGetDeviceTokenReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IMGetDeviceTokenReq& from);
  void MergeFrom(const IMGetDeviceTokenReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IMGetDeviceTokenReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 user_id = 1;
  int user_id_size() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::uint32 user_id(int index) const;
  void set_user_id(int index, ::google::protobuf::uint32 value);
  void add_user_id(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      user_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_user_id();

  // bytes attach_data = 20;
  void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  const ::std::string& attach_data() const;
  void set_attach_data(const ::std::string& value);
  #if LANG_CXX11
  void set_attach_data(::std::string&& value);
  #endif
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  ::std::string* mutable_attach_data();
  ::std::string* release_attach_data();
  void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Server.IMGetDeviceTokenReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > user_id_;
  mutable int _user_id_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr attach_data_;
  mutable int _cached_size_;
  friend struct ::protobuf_IM_2eServer_2eproto::TableStruct;
  friend void ::protobuf_IM_2eServer_2eproto::InitDefaultsIMGetDeviceTokenReqImpl();
};
// -------------------------------------------------------------------

class IMGetDeviceTokenRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IM.Server.IMGetDeviceTokenRsp) */ {
 public:
  IMGetDeviceTokenRsp();
  virtual ~IMGetDeviceTokenRsp();

  IMGetDeviceTokenRsp(const IMGetDeviceTokenRsp& from);

  inline IMGetDeviceTokenRsp& operator=(const IMGetDeviceTokenRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IMGetDeviceTokenRsp(IMGetDeviceTokenRsp&& from) noexcept
    : IMGetDeviceTokenRsp() {
    *this = ::std::move(from);
  }

  inline IMGetDeviceTokenRsp& operator=(IMGetDeviceTokenRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IMGetDeviceTokenRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMGetDeviceTokenRsp* internal_default_instance() {
    return reinterpret_cast<const IMGetDeviceTokenRsp*>(
               &_IMGetDeviceTokenRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(IMGetDeviceTokenRsp* other);
  friend void swap(IMGetDeviceTokenRsp& a, IMGetDeviceTokenRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IMGetDeviceTokenRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  IMGetDeviceTokenRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IMGetDeviceTokenRsp& from);
  void MergeFrom(const IMGetDeviceTokenRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IMGetDeviceTokenRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .IM.BaseDefine.UserTokenInfo user_token_info = 1;
  int user_token_info_size() const;
  void clear_user_token_info();
  static const int kUserTokenInfoFieldNumber = 1;
  const ::IM::BaseDefine::UserTokenInfo& user_token_info(int index) const;
  ::IM::BaseDefine::UserTokenInfo* mutable_user_token_info(int index);
  ::IM::BaseDefine::UserTokenInfo* add_user_token_info();
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserTokenInfo >*
      mutable_user_token_info();
  const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserTokenInfo >&
      user_token_info() const;

  // bytes attach_data = 20;
  void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  const ::std::string& attach_data() const;
  void set_attach_data(const ::std::string& value);
  #if LANG_CXX11
  void set_attach_data(::std::string&& value);
  #endif
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  ::std::string* mutable_attach_data();
  ::std::string* release_attach_data();
  void set_allocated_attach_data(::std::string* attach_data);

  // @@protoc_insertion_point(class_scope:IM.Server.IMGetDeviceTokenRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserTokenInfo > user_token_info_;
  ::google::protobuf::internal::ArenaStringPtr attach_data_;
  mutable int _cached_size_;
  friend struct ::protobuf_IM_2eServer_2eproto::TableStruct;
  friend void ::protobuf_IM_2eServer_2eproto::InitDefaultsIMGetDeviceTokenRspImpl();
};
// -------------------------------------------------------------------

class IMRoleSet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IM.Server.IMRoleSet) */ {
 public:
  IMRoleSet();
  virtual ~IMRoleSet();

  IMRoleSet(const IMRoleSet& from);

  inline IMRoleSet& operator=(const IMRoleSet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IMRoleSet(IMRoleSet&& from) noexcept
    : IMRoleSet() {
    *this = ::std::move(from);
  }

  inline IMRoleSet& operator=(IMRoleSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IMRoleSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMRoleSet* internal_default_instance() {
    return reinterpret_cast<const IMRoleSet*>(
               &_IMRoleSet_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(IMRoleSet* other);
  friend void swap(IMRoleSet& a, IMRoleSet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IMRoleSet* New() const PROTOBUF_FINAL { return New(NULL); }

  IMRoleSet* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IMRoleSet& from);
  void MergeFrom(const IMRoleSet& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IMRoleSet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 master = 1;
  void clear_master();
  static const int kMasterFieldNumber = 1;
  ::google::protobuf::uint32 master() const;
  void set_master(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IM.Server.IMRoleSet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 master_;
  mutable int _cached_size_;
  friend struct ::protobuf_IM_2eServer_2eproto::TableStruct;
  friend void ::protobuf_IM_2eServer_2eproto::InitDefaultsIMRoleSetImpl();
};
// -------------------------------------------------------------------

class IMOnlineUserInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IM.Server.IMOnlineUserInfo) */ {
 public:
  IMOnlineUserInfo();
  virtual ~IMOnlineUserInfo();

  IMOnlineUserInfo(const IMOnlineUserInfo& from);

  inline IMOnlineUserInfo& operator=(const IMOnlineUserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IMOnlineUserInfo(IMOnlineUserInfo&& from) noexcept
    : IMOnlineUserInfo() {
    *this = ::std::move(from);
  }

  inline IMOnlineUserInfo& operator=(IMOnlineUserInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IMOnlineUserInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMOnlineUserInfo* internal_default_instance() {
    return reinterpret_cast<const IMOnlineUserInfo*>(
               &_IMOnlineUserInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(IMOnlineUserInfo* other);
  friend void swap(IMOnlineUserInfo& a, IMOnlineUserInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IMOnlineUserInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  IMOnlineUserInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IMOnlineUserInfo& from);
  void MergeFrom(const IMOnlineUserInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IMOnlineUserInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .IM.BaseDefine.ServerUserStat user_stat_list = 1;
  int user_stat_list_size() const;
  void clear_user_stat_list();
  static const int kUserStatListFieldNumber = 1;
  const ::IM::BaseDefine::ServerUserStat& user_stat_list(int index) const;
  ::IM::BaseDefine::ServerUserStat* mutable_user_stat_list(int index);
  ::IM::BaseDefine::ServerUserStat* add_user_stat_list();
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::ServerUserStat >*
      mutable_user_stat_list();
  const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::ServerUserStat >&
      user_stat_list() const;

  // @@protoc_insertion_point(class_scope:IM.Server.IMOnlineUserInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::ServerUserStat > user_stat_list_;
  mutable int _cached_size_;
  friend struct ::protobuf_IM_2eServer_2eproto::TableStruct;
  friend void ::protobuf_IM_2eServer_2eproto::InitDefaultsIMOnlineUserInfoImpl();
};
// -------------------------------------------------------------------

class IMMsgServInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IM.Server.IMMsgServInfo) */ {
 public:
  IMMsgServInfo();
  virtual ~IMMsgServInfo();

  IMMsgServInfo(const IMMsgServInfo& from);

  inline IMMsgServInfo& operator=(const IMMsgServInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IMMsgServInfo(IMMsgServInfo&& from) noexcept
    : IMMsgServInfo() {
    *this = ::std::move(from);
  }

  inline IMMsgServInfo& operator=(IMMsgServInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IMMsgServInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMMsgServInfo* internal_default_instance() {
    return reinterpret_cast<const IMMsgServInfo*>(
               &_IMMsgServInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(IMMsgServInfo* other);
  friend void swap(IMMsgServInfo& a, IMMsgServInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IMMsgServInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  IMMsgServInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IMMsgServInfo& from);
  void MergeFrom(const IMMsgServInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IMMsgServInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ip1 = 1;
  void clear_ip1();
  static const int kIp1FieldNumber = 1;
  const ::std::string& ip1() const;
  void set_ip1(const ::std::string& value);
  #if LANG_CXX11
  void set_ip1(::std::string&& value);
  #endif
  void set_ip1(const char* value);
  void set_ip1(const char* value, size_t size);
  ::std::string* mutable_ip1();
  ::std::string* release_ip1();
  void set_allocated_ip1(::std::string* ip1);

  // string ip2 = 2;
  void clear_ip2();
  static const int kIp2FieldNumber = 2;
  const ::std::string& ip2() const;
  void set_ip2(const ::std::string& value);
  #if LANG_CXX11
  void set_ip2(::std::string&& value);
  #endif
  void set_ip2(const char* value);
  void set_ip2(const char* value, size_t size);
  ::std::string* mutable_ip2();
  ::std::string* release_ip2();
  void set_allocated_ip2(::std::string* ip2);

  // string host_name = 6;
  void clear_host_name();
  static const int kHostNameFieldNumber = 6;
  const ::std::string& host_name() const;
  void set_host_name(const ::std::string& value);
  #if LANG_CXX11
  void set_host_name(::std::string&& value);
  #endif
  void set_host_name(const char* value);
  void set_host_name(const char* value, size_t size);
  ::std::string* mutable_host_name();
  ::std::string* release_host_name();
  void set_allocated_host_name(::std::string* host_name);

  // uint32 port = 3;
  void clear_port();
  static const int kPortFieldNumber = 3;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // uint32 max_conn_cnt = 4;
  void clear_max_conn_cnt();
  static const int kMaxConnCntFieldNumber = 4;
  ::google::protobuf::uint32 max_conn_cnt() const;
  void set_max_conn_cnt(::google::protobuf::uint32 value);

  // uint32 cur_conn_cnt = 5;
  void clear_cur_conn_cnt();
  static const int kCurConnCntFieldNumber = 5;
  ::google::protobuf::uint32 cur_conn_cnt() const;
  void set_cur_conn_cnt(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IM.Server.IMMsgServInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip1_;
  ::google::protobuf::internal::ArenaStringPtr ip2_;
  ::google::protobuf::internal::ArenaStringPtr host_name_;
  ::google::protobuf::uint32 port_;
  ::google::protobuf::uint32 max_conn_cnt_;
  ::google::protobuf::uint32 cur_conn_cnt_;
  mutable int _cached_size_;
  friend struct ::protobuf_IM_2eServer_2eproto::TableStruct;
  friend void ::protobuf_IM_2eServer_2eproto::InitDefaultsIMMsgServInfoImpl();
};
// -------------------------------------------------------------------

class IMUserStatusUpdate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IM.Server.IMUserStatusUpdate) */ {
 public:
  IMUserStatusUpdate();
  virtual ~IMUserStatusUpdate();

  IMUserStatusUpdate(const IMUserStatusUpdate& from);

  inline IMUserStatusUpdate& operator=(const IMUserStatusUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IMUserStatusUpdate(IMUserStatusUpdate&& from) noexcept
    : IMUserStatusUpdate() {
    *this = ::std::move(from);
  }

  inline IMUserStatusUpdate& operator=(IMUserStatusUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IMUserStatusUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMUserStatusUpdate* internal_default_instance() {
    return reinterpret_cast<const IMUserStatusUpdate*>(
               &_IMUserStatusUpdate_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(IMUserStatusUpdate* other);
  friend void swap(IMUserStatusUpdate& a, IMUserStatusUpdate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IMUserStatusUpdate* New() const PROTOBUF_FINAL { return New(NULL); }

  IMUserStatusUpdate* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IMUserStatusUpdate& from);
  void MergeFrom(const IMUserStatusUpdate& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IMUserStatusUpdate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 user_status = 1;
  void clear_user_status();
  static const int kUserStatusFieldNumber = 1;
  ::google::protobuf::uint32 user_status() const;
  void set_user_status(::google::protobuf::uint32 value);

  // uint32 user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  ::google::protobuf::uint32 user_id() const;
  void set_user_id(::google::protobuf::uint32 value);

  // .IM.BaseDefine.ClientType client_type = 3;
  void clear_client_type();
  static const int kClientTypeFieldNumber = 3;
  ::IM::BaseDefine::ClientType client_type() const;
  void set_client_type(::IM::BaseDefine::ClientType value);

  // @@protoc_insertion_point(class_scope:IM.Server.IMUserStatusUpdate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 user_status_;
  ::google::protobuf::uint32 user_id_;
  int client_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_IM_2eServer_2eproto::TableStruct;
  friend void ::protobuf_IM_2eServer_2eproto::InitDefaultsIMUserStatusUpdateImpl();
};
// -------------------------------------------------------------------

class IMUserCntUpdate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IM.Server.IMUserCntUpdate) */ {
 public:
  IMUserCntUpdate();
  virtual ~IMUserCntUpdate();

  IMUserCntUpdate(const IMUserCntUpdate& from);

  inline IMUserCntUpdate& operator=(const IMUserCntUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IMUserCntUpdate(IMUserCntUpdate&& from) noexcept
    : IMUserCntUpdate() {
    *this = ::std::move(from);
  }

  inline IMUserCntUpdate& operator=(IMUserCntUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IMUserCntUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMUserCntUpdate* internal_default_instance() {
    return reinterpret_cast<const IMUserCntUpdate*>(
               &_IMUserCntUpdate_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(IMUserCntUpdate* other);
  friend void swap(IMUserCntUpdate& a, IMUserCntUpdate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IMUserCntUpdate* New() const PROTOBUF_FINAL { return New(NULL); }

  IMUserCntUpdate* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IMUserCntUpdate& from);
  void MergeFrom(const IMUserCntUpdate& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IMUserCntUpdate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 user_action = 1;
  void clear_user_action();
  static const int kUserActionFieldNumber = 1;
  ::google::protobuf::uint32 user_action() const;
  void set_user_action(::google::protobuf::uint32 value);

  // uint32 user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  ::google::protobuf::uint32 user_id() const;
  void set_user_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IM.Server.IMUserCntUpdate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 user_action_;
  ::google::protobuf::uint32 user_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_IM_2eServer_2eproto::TableStruct;
  friend void ::protobuf_IM_2eServer_2eproto::InitDefaultsIMUserCntUpdateImpl();
};
// -------------------------------------------------------------------

class IMServerKickUser : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IM.Server.IMServerKickUser) */ {
 public:
  IMServerKickUser();
  virtual ~IMServerKickUser();

  IMServerKickUser(const IMServerKickUser& from);

  inline IMServerKickUser& operator=(const IMServerKickUser& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IMServerKickUser(IMServerKickUser&& from) noexcept
    : IMServerKickUser() {
    *this = ::std::move(from);
  }

  inline IMServerKickUser& operator=(IMServerKickUser&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IMServerKickUser& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMServerKickUser* internal_default_instance() {
    return reinterpret_cast<const IMServerKickUser*>(
               &_IMServerKickUser_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(IMServerKickUser* other);
  friend void swap(IMServerKickUser& a, IMServerKickUser& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IMServerKickUser* New() const PROTOBUF_FINAL { return New(NULL); }

  IMServerKickUser* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IMServerKickUser& from);
  void MergeFrom(const IMServerKickUser& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IMServerKickUser* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::uint32 user_id() const;
  void set_user_id(::google::protobuf::uint32 value);

  // .IM.BaseDefine.ClientType client_type = 2;
  void clear_client_type();
  static const int kClientTypeFieldNumber = 2;
  ::IM::BaseDefine::ClientType client_type() const;
  void set_client_type(::IM::BaseDefine::ClientType value);

  // uint32 reason = 3;
  void clear_reason();
  static const int kReasonFieldNumber = 3;
  ::google::protobuf::uint32 reason() const;
  void set_reason(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IM.Server.IMServerKickUser)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 user_id_;
  int client_type_;
  ::google::protobuf::uint32 reason_;
  mutable int _cached_size_;
  friend struct ::protobuf_IM_2eServer_2eproto::TableStruct;
  friend void ::protobuf_IM_2eServer_2eproto::InitDefaultsIMServerKickUserImpl();
};
// -------------------------------------------------------------------

class IMServerPCLoginStatusNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IM.Server.IMServerPCLoginStatusNotify) */ {
 public:
  IMServerPCLoginStatusNotify();
  virtual ~IMServerPCLoginStatusNotify();

  IMServerPCLoginStatusNotify(const IMServerPCLoginStatusNotify& from);

  inline IMServerPCLoginStatusNotify& operator=(const IMServerPCLoginStatusNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IMServerPCLoginStatusNotify(IMServerPCLoginStatusNotify&& from) noexcept
    : IMServerPCLoginStatusNotify() {
    *this = ::std::move(from);
  }

  inline IMServerPCLoginStatusNotify& operator=(IMServerPCLoginStatusNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IMServerPCLoginStatusNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMServerPCLoginStatusNotify* internal_default_instance() {
    return reinterpret_cast<const IMServerPCLoginStatusNotify*>(
               &_IMServerPCLoginStatusNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(IMServerPCLoginStatusNotify* other);
  friend void swap(IMServerPCLoginStatusNotify& a, IMServerPCLoginStatusNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IMServerPCLoginStatusNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  IMServerPCLoginStatusNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IMServerPCLoginStatusNotify& from);
  void MergeFrom(const IMServerPCLoginStatusNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IMServerPCLoginStatusNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::uint32 user_id() const;
  void set_user_id(::google::protobuf::uint32 value);

  // uint32 login_status = 2;
  void clear_login_status();
  static const int kLoginStatusFieldNumber = 2;
  ::google::protobuf::uint32 login_status() const;
  void set_login_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IM.Server.IMServerPCLoginStatusNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 login_status_;
  mutable int _cached_size_;
  friend struct ::protobuf_IM_2eServer_2eproto::TableStruct;
  friend void ::protobuf_IM_2eServer_2eproto::InitDefaultsIMServerPCLoginStatusNotifyImpl();
};
// -------------------------------------------------------------------

class IMPushToUserReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IM.Server.IMPushToUserReq) */ {
 public:
  IMPushToUserReq();
  virtual ~IMPushToUserReq();

  IMPushToUserReq(const IMPushToUserReq& from);

  inline IMPushToUserReq& operator=(const IMPushToUserReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IMPushToUserReq(IMPushToUserReq&& from) noexcept
    : IMPushToUserReq() {
    *this = ::std::move(from);
  }

  inline IMPushToUserReq& operator=(IMPushToUserReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IMPushToUserReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMPushToUserReq* internal_default_instance() {
    return reinterpret_cast<const IMPushToUserReq*>(
               &_IMPushToUserReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(IMPushToUserReq* other);
  friend void swap(IMPushToUserReq& a, IMPushToUserReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IMPushToUserReq* New() const PROTOBUF_FINAL { return New(NULL); }

  IMPushToUserReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IMPushToUserReq& from);
  void MergeFrom(const IMPushToUserReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IMPushToUserReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .IM.BaseDefine.UserTokenInfo user_token_list = 3;
  int user_token_list_size() const;
  void clear_user_token_list();
  static const int kUserTokenListFieldNumber = 3;
  const ::IM::BaseDefine::UserTokenInfo& user_token_list(int index) const;
  ::IM::BaseDefine::UserTokenInfo* mutable_user_token_list(int index);
  ::IM::BaseDefine::UserTokenInfo* add_user_token_list();
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserTokenInfo >*
      mutable_user_token_list();
  const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserTokenInfo >&
      user_token_list() const;

  // string flash = 1;
  void clear_flash();
  static const int kFlashFieldNumber = 1;
  const ::std::string& flash() const;
  void set_flash(const ::std::string& value);
  #if LANG_CXX11
  void set_flash(::std::string&& value);
  #endif
  void set_flash(const char* value);
  void set_flash(const char* value, size_t size);
  ::std::string* mutable_flash();
  ::std::string* release_flash();
  void set_allocated_flash(::std::string* flash);

  // string data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:IM.Server.IMPushToUserReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserTokenInfo > user_token_list_;
  ::google::protobuf::internal::ArenaStringPtr flash_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable int _cached_size_;
  friend struct ::protobuf_IM_2eServer_2eproto::TableStruct;
  friend void ::protobuf_IM_2eServer_2eproto::InitDefaultsIMPushToUserReqImpl();
};
// -------------------------------------------------------------------

class IMPushToUserRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IM.Server.IMPushToUserRsp) */ {
 public:
  IMPushToUserRsp();
  virtual ~IMPushToUserRsp();

  IMPushToUserRsp(const IMPushToUserRsp& from);

  inline IMPushToUserRsp& operator=(const IMPushToUserRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IMPushToUserRsp(IMPushToUserRsp&& from) noexcept
    : IMPushToUserRsp() {
    *this = ::std::move(from);
  }

  inline IMPushToUserRsp& operator=(IMPushToUserRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IMPushToUserRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMPushToUserRsp* internal_default_instance() {
    return reinterpret_cast<const IMPushToUserRsp*>(
               &_IMPushToUserRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(IMPushToUserRsp* other);
  friend void swap(IMPushToUserRsp& a, IMPushToUserRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IMPushToUserRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  IMPushToUserRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IMPushToUserRsp& from);
  void MergeFrom(const IMPushToUserRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IMPushToUserRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .IM.BaseDefine.PushResult push_result_list = 1;
  int push_result_list_size() const;
  void clear_push_result_list();
  static const int kPushResultListFieldNumber = 1;
  const ::IM::BaseDefine::PushResult& push_result_list(int index) const;
  ::IM::BaseDefine::PushResult* mutable_push_result_list(int index);
  ::IM::BaseDefine::PushResult* add_push_result_list();
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::PushResult >*
      mutable_push_result_list();
  const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::PushResult >&
      push_result_list() const;

  // @@protoc_insertion_point(class_scope:IM.Server.IMPushToUserRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::PushResult > push_result_list_;
  mutable int _cached_size_;
  friend struct ::protobuf_IM_2eServer_2eproto::TableStruct;
  friend void ::protobuf_IM_2eServer_2eproto::InitDefaultsIMPushToUserRspImpl();
};
// -------------------------------------------------------------------

class IMGroupGetShieldReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IM.Server.IMGroupGetShieldReq) */ {
 public:
  IMGroupGetShieldReq();
  virtual ~IMGroupGetShieldReq();

  IMGroupGetShieldReq(const IMGroupGetShieldReq& from);

  inline IMGroupGetShieldReq& operator=(const IMGroupGetShieldReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IMGroupGetShieldReq(IMGroupGetShieldReq&& from) noexcept
    : IMGroupGetShieldReq() {
    *this = ::std::move(from);
  }

  inline IMGroupGetShieldReq& operator=(IMGroupGetShieldReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IMGroupGetShieldReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMGroupGetShieldReq* internal_default_instance() {
    return reinterpret_cast<const IMGroupGetShieldReq*>(
               &_IMGroupGetShieldReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(IMGroupGetShieldReq* other);
  friend void swap(IMGroupGetShieldReq& a, IMGroupGetShieldReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IMGroupGetShieldReq* New() const PROTOBUF_FINAL { return New(NULL); }

  IMGroupGetShieldReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IMGroupGetShieldReq& from);
  void MergeFrom(const IMGroupGetShieldReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IMGroupGetShieldReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 user_id = 2;
  int user_id_size() const;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  ::google::protobuf::uint32 user_id(int index) const;
  void set_user_id(int index, ::google::protobuf::uint32 value);
  void add_user_id(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      user_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_user_id();

  // bytes attach_data = 20;
  void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  const ::std::string& attach_data() const;
  void set_attach_data(const ::std::string& value);
  #if LANG_CXX11
  void set_attach_data(::std::string&& value);
  #endif
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  ::std::string* mutable_attach_data();
  ::std::string* release_attach_data();
  void set_allocated_attach_data(::std::string* attach_data);

  // uint32 group_id = 1;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  ::google::protobuf::uint32 group_id() const;
  void set_group_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IM.Server.IMGroupGetShieldReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > user_id_;
  mutable int _user_id_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr attach_data_;
  ::google::protobuf::uint32 group_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_IM_2eServer_2eproto::TableStruct;
  friend void ::protobuf_IM_2eServer_2eproto::InitDefaultsIMGroupGetShieldReqImpl();
};
// -------------------------------------------------------------------

class IMGroupGetShieldRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IM.Server.IMGroupGetShieldRsp) */ {
 public:
  IMGroupGetShieldRsp();
  virtual ~IMGroupGetShieldRsp();

  IMGroupGetShieldRsp(const IMGroupGetShieldRsp& from);

  inline IMGroupGetShieldRsp& operator=(const IMGroupGetShieldRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IMGroupGetShieldRsp(IMGroupGetShieldRsp&& from) noexcept
    : IMGroupGetShieldRsp() {
    *this = ::std::move(from);
  }

  inline IMGroupGetShieldRsp& operator=(IMGroupGetShieldRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IMGroupGetShieldRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMGroupGetShieldRsp* internal_default_instance() {
    return reinterpret_cast<const IMGroupGetShieldRsp*>(
               &_IMGroupGetShieldRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(IMGroupGetShieldRsp* other);
  friend void swap(IMGroupGetShieldRsp& a, IMGroupGetShieldRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IMGroupGetShieldRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  IMGroupGetShieldRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IMGroupGetShieldRsp& from);
  void MergeFrom(const IMGroupGetShieldRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IMGroupGetShieldRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .IM.BaseDefine.ShieldStatus shield_status_list = 2;
  int shield_status_list_size() const;
  void clear_shield_status_list();
  static const int kShieldStatusListFieldNumber = 2;
  const ::IM::BaseDefine::ShieldStatus& shield_status_list(int index) const;
  ::IM::BaseDefine::ShieldStatus* mutable_shield_status_list(int index);
  ::IM::BaseDefine::ShieldStatus* add_shield_status_list();
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::ShieldStatus >*
      mutable_shield_status_list();
  const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::ShieldStatus >&
      shield_status_list() const;

  // bytes attach_data = 20;
  void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  const ::std::string& attach_data() const;
  void set_attach_data(const ::std::string& value);
  #if LANG_CXX11
  void set_attach_data(::std::string&& value);
  #endif
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  ::std::string* mutable_attach_data();
  ::std::string* release_attach_data();
  void set_allocated_attach_data(::std::string* attach_data);

  // uint32 group_id = 1;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 1;
  ::google::protobuf::uint32 group_id() const;
  void set_group_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:IM.Server.IMGroupGetShieldRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::ShieldStatus > shield_status_list_;
  ::google::protobuf::internal::ArenaStringPtr attach_data_;
  ::google::protobuf::uint32 group_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_IM_2eServer_2eproto::TableStruct;
  friend void ::protobuf_IM_2eServer_2eproto::InitDefaultsIMGroupGetShieldRspImpl();
};
// -------------------------------------------------------------------

class IMFileTransferReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IM.Server.IMFileTransferReq) */ {
 public:
  IMFileTransferReq();
  virtual ~IMFileTransferReq();

  IMFileTransferReq(const IMFileTransferReq& from);

  inline IMFileTransferReq& operator=(const IMFileTransferReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IMFileTransferReq(IMFileTransferReq&& from) noexcept
    : IMFileTransferReq() {
    *this = ::std::move(from);
  }

  inline IMFileTransferReq& operator=(IMFileTransferReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IMFileTransferReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMFileTransferReq* internal_default_instance() {
    return reinterpret_cast<const IMFileTransferReq*>(
               &_IMFileTransferReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(IMFileTransferReq* other);
  friend void swap(IMFileTransferReq& a, IMFileTransferReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IMFileTransferReq* New() const PROTOBUF_FINAL { return New(NULL); }

  IMFileTransferReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IMFileTransferReq& from);
  void MergeFrom(const IMFileTransferReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IMFileTransferReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string file_name = 3;
  void clear_file_name();
  static const int kFileNameFieldNumber = 3;
  const ::std::string& file_name() const;
  void set_file_name(const ::std::string& value);
  #if LANG_CXX11
  void set_file_name(::std::string&& value);
  #endif
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  ::std::string* mutable_file_name();
  ::std::string* release_file_name();
  void set_allocated_file_name(::std::string* file_name);

  // bytes attach_data = 20;
  void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  const ::std::string& attach_data() const;
  void set_attach_data(const ::std::string& value);
  #if LANG_CXX11
  void set_attach_data(::std::string&& value);
  #endif
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  ::std::string* mutable_attach_data();
  ::std::string* release_attach_data();
  void set_allocated_attach_data(::std::string* attach_data);

  // uint32 from_user_id = 1;
  void clear_from_user_id();
  static const int kFromUserIdFieldNumber = 1;
  ::google::protobuf::uint32 from_user_id() const;
  void set_from_user_id(::google::protobuf::uint32 value);

  // uint32 to_user_id = 2;
  void clear_to_user_id();
  static const int kToUserIdFieldNumber = 2;
  ::google::protobuf::uint32 to_user_id() const;
  void set_to_user_id(::google::protobuf::uint32 value);

  // uint32 file_size = 4;
  void clear_file_size();
  static const int kFileSizeFieldNumber = 4;
  ::google::protobuf::uint32 file_size() const;
  void set_file_size(::google::protobuf::uint32 value);

  // .IM.BaseDefine.TransferFileType trans_mode = 5;
  void clear_trans_mode();
  static const int kTransModeFieldNumber = 5;
  ::IM::BaseDefine::TransferFileType trans_mode() const;
  void set_trans_mode(::IM::BaseDefine::TransferFileType value);

  // @@protoc_insertion_point(class_scope:IM.Server.IMFileTransferReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr file_name_;
  ::google::protobuf::internal::ArenaStringPtr attach_data_;
  ::google::protobuf::uint32 from_user_id_;
  ::google::protobuf::uint32 to_user_id_;
  ::google::protobuf::uint32 file_size_;
  int trans_mode_;
  mutable int _cached_size_;
  friend struct ::protobuf_IM_2eServer_2eproto::TableStruct;
  friend void ::protobuf_IM_2eServer_2eproto::InitDefaultsIMFileTransferReqImpl();
};
// -------------------------------------------------------------------

class IMFileTransferRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IM.Server.IMFileTransferRsp) */ {
 public:
  IMFileTransferRsp();
  virtual ~IMFileTransferRsp();

  IMFileTransferRsp(const IMFileTransferRsp& from);

  inline IMFileTransferRsp& operator=(const IMFileTransferRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IMFileTransferRsp(IMFileTransferRsp&& from) noexcept
    : IMFileTransferRsp() {
    *this = ::std::move(from);
  }

  inline IMFileTransferRsp& operator=(IMFileTransferRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IMFileTransferRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMFileTransferRsp* internal_default_instance() {
    return reinterpret_cast<const IMFileTransferRsp*>(
               &_IMFileTransferRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(IMFileTransferRsp* other);
  friend void swap(IMFileTransferRsp& a, IMFileTransferRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IMFileTransferRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  IMFileTransferRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IMFileTransferRsp& from);
  void MergeFrom(const IMFileTransferRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IMFileTransferRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string file_name = 4;
  void clear_file_name();
  static const int kFileNameFieldNumber = 4;
  const ::std::string& file_name() const;
  void set_file_name(const ::std::string& value);
  #if LANG_CXX11
  void set_file_name(::std::string&& value);
  #endif
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  ::std::string* mutable_file_name();
  ::std::string* release_file_name();
  void set_allocated_file_name(::std::string* file_name);

  // string task_id = 6;
  void clear_task_id();
  static const int kTaskIdFieldNumber = 6;
  const ::std::string& task_id() const;
  void set_task_id(const ::std::string& value);
  #if LANG_CXX11
  void set_task_id(::std::string&& value);
  #endif
  void set_task_id(const char* value);
  void set_task_id(const char* value, size_t size);
  ::std::string* mutable_task_id();
  ::std::string* release_task_id();
  void set_allocated_task_id(::std::string* task_id);

  // bytes attach_data = 20;
  void clear_attach_data();
  static const int kAttachDataFieldNumber = 20;
  const ::std::string& attach_data() const;
  void set_attach_data(const ::std::string& value);
  #if LANG_CXX11
  void set_attach_data(::std::string&& value);
  #endif
  void set_attach_data(const char* value);
  void set_attach_data(const void* value, size_t size);
  ::std::string* mutable_attach_data();
  ::std::string* release_attach_data();
  void set_allocated_attach_data(::std::string* attach_data);

  // uint32 result_code = 1;
  void clear_result_code();
  static const int kResultCodeFieldNumber = 1;
  ::google::protobuf::uint32 result_code() const;
  void set_result_code(::google::protobuf::uint32 value);

  // uint32 from_user_id = 2;
  void clear_from_user_id();
  static const int kFromUserIdFieldNumber = 2;
  ::google::protobuf::uint32 from_user_id() const;
  void set_from_user_id(::google::protobuf::uint32 value);

  // uint32 to_user_id = 3;
  void clear_to_user_id();
  static const int kToUserIdFieldNumber = 3;
  ::google::protobuf::uint32 to_user_id() const;
  void set_to_user_id(::google::protobuf::uint32 value);

  // uint32 file_size = 5;
  void clear_file_size();
  static const int kFileSizeFieldNumber = 5;
  ::google::protobuf::uint32 file_size() const;
  void set_file_size(::google::protobuf::uint32 value);

  // .IM.BaseDefine.TransferFileType trans_mode = 7;
  void clear_trans_mode();
  static const int kTransModeFieldNumber = 7;
  ::IM::BaseDefine::TransferFileType trans_mode() const;
  void set_trans_mode(::IM::BaseDefine::TransferFileType value);

  // @@protoc_insertion_point(class_scope:IM.Server.IMFileTransferRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr file_name_;
  ::google::protobuf::internal::ArenaStringPtr task_id_;
  ::google::protobuf::internal::ArenaStringPtr attach_data_;
  ::google::protobuf::uint32 result_code_;
  ::google::protobuf::uint32 from_user_id_;
  ::google::protobuf::uint32 to_user_id_;
  ::google::protobuf::uint32 file_size_;
  int trans_mode_;
  mutable int _cached_size_;
  friend struct ::protobuf_IM_2eServer_2eproto::TableStruct;
  friend void ::protobuf_IM_2eServer_2eproto::InitDefaultsIMFileTransferRspImpl();
};
// -------------------------------------------------------------------

class IMFileServerIPReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IM.Server.IMFileServerIPReq) */ {
 public:
  IMFileServerIPReq();
  virtual ~IMFileServerIPReq();

  IMFileServerIPReq(const IMFileServerIPReq& from);

  inline IMFileServerIPReq& operator=(const IMFileServerIPReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IMFileServerIPReq(IMFileServerIPReq&& from) noexcept
    : IMFileServerIPReq() {
    *this = ::std::move(from);
  }

  inline IMFileServerIPReq& operator=(IMFileServerIPReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IMFileServerIPReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMFileServerIPReq* internal_default_instance() {
    return reinterpret_cast<const IMFileServerIPReq*>(
               &_IMFileServerIPReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(IMFileServerIPReq* other);
  friend void swap(IMFileServerIPReq& a, IMFileServerIPReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IMFileServerIPReq* New() const PROTOBUF_FINAL { return New(NULL); }

  IMFileServerIPReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IMFileServerIPReq& from);
  void MergeFrom(const IMFileServerIPReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IMFileServerIPReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IM.Server.IMFileServerIPReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_IM_2eServer_2eproto::TableStruct;
  friend void ::protobuf_IM_2eServer_2eproto::InitDefaultsIMFileServerIPReqImpl();
};
// -------------------------------------------------------------------

class IMFileServerIPRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:IM.Server.IMFileServerIPRsp) */ {
 public:
  IMFileServerIPRsp();
  virtual ~IMFileServerIPRsp();

  IMFileServerIPRsp(const IMFileServerIPRsp& from);

  inline IMFileServerIPRsp& operator=(const IMFileServerIPRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IMFileServerIPRsp(IMFileServerIPRsp&& from) noexcept
    : IMFileServerIPRsp() {
    *this = ::std::move(from);
  }

  inline IMFileServerIPRsp& operator=(IMFileServerIPRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IMFileServerIPRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IMFileServerIPRsp* internal_default_instance() {
    return reinterpret_cast<const IMFileServerIPRsp*>(
               &_IMFileServerIPRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(IMFileServerIPRsp* other);
  friend void swap(IMFileServerIPRsp& a, IMFileServerIPRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IMFileServerIPRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  IMFileServerIPRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IMFileServerIPRsp& from);
  void MergeFrom(const IMFileServerIPRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IMFileServerIPRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .IM.BaseDefine.IpAddr ip_addr_list = 1;
  int ip_addr_list_size() const;
  void clear_ip_addr_list();
  static const int kIpAddrListFieldNumber = 1;
  const ::IM::BaseDefine::IpAddr& ip_addr_list(int index) const;
  ::IM::BaseDefine::IpAddr* mutable_ip_addr_list(int index);
  ::IM::BaseDefine::IpAddr* add_ip_addr_list();
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::IpAddr >*
      mutable_ip_addr_list();
  const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::IpAddr >&
      ip_addr_list() const;

  // @@protoc_insertion_point(class_scope:IM.Server.IMFileServerIPRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::IpAddr > ip_addr_list_;
  mutable int _cached_size_;
  friend struct ::protobuf_IM_2eServer_2eproto::TableStruct;
  friend void ::protobuf_IM_2eServer_2eproto::InitDefaultsIMFileServerIPRspImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IMStopReceivePacket

// uint32 result = 1;
inline void IMStopReceivePacket::clear_result() {
  result_ = 0u;
}
inline ::google::protobuf::uint32 IMStopReceivePacket::result() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMStopReceivePacket.result)
  return result_;
}
inline void IMStopReceivePacket::set_result(::google::protobuf::uint32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMStopReceivePacket.result)
}

// -------------------------------------------------------------------

// IMValidateReq

// string user_name = 1;
inline void IMValidateReq::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IMValidateReq::user_name() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMValidateReq.user_name)
  return user_name_.GetNoArena();
}
inline void IMValidateReq::set_user_name(const ::std::string& value) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Server.IMValidateReq.user_name)
}
#if LANG_CXX11
inline void IMValidateReq::set_user_name(::std::string&& value) {
  
  user_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Server.IMValidateReq.user_name)
}
#endif
inline void IMValidateReq::set_user_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Server.IMValidateReq.user_name)
}
inline void IMValidateReq::set_user_name(const char* value, size_t size) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMValidateReq.user_name)
}
inline ::std::string* IMValidateReq::mutable_user_name() {
  
  // @@protoc_insertion_point(field_mutable:IM.Server.IMValidateReq.user_name)
  return user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IMValidateReq::release_user_name() {
  // @@protoc_insertion_point(field_release:IM.Server.IMValidateReq.user_name)
  
  return user_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IMValidateReq::set_allocated_user_name(::std::string* user_name) {
  if (user_name != NULL) {
    
  } else {
    
  }
  user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMValidateReq.user_name)
}

// string password = 2;
inline void IMValidateReq::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IMValidateReq::password() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMValidateReq.password)
  return password_.GetNoArena();
}
inline void IMValidateReq::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Server.IMValidateReq.password)
}
#if LANG_CXX11
inline void IMValidateReq::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Server.IMValidateReq.password)
}
#endif
inline void IMValidateReq::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Server.IMValidateReq.password)
}
inline void IMValidateReq::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMValidateReq.password)
}
inline ::std::string* IMValidateReq::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:IM.Server.IMValidateReq.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IMValidateReq::release_password() {
  // @@protoc_insertion_point(field_release:IM.Server.IMValidateReq.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IMValidateReq::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMValidateReq.password)
}

// bytes attach_data = 20;
inline void IMValidateReq::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IMValidateReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMValidateReq.attach_data)
  return attach_data_.GetNoArena();
}
inline void IMValidateReq::set_attach_data(const ::std::string& value) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Server.IMValidateReq.attach_data)
}
#if LANG_CXX11
inline void IMValidateReq::set_attach_data(::std::string&& value) {
  
  attach_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Server.IMValidateReq.attach_data)
}
#endif
inline void IMValidateReq::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Server.IMValidateReq.attach_data)
}
inline void IMValidateReq::set_attach_data(const void* value, size_t size) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMValidateReq.attach_data)
}
inline ::std::string* IMValidateReq::mutable_attach_data() {
  
  // @@protoc_insertion_point(field_mutable:IM.Server.IMValidateReq.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IMValidateReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Server.IMValidateReq.attach_data)
  
  return attach_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IMValidateReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    
  } else {
    
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMValidateReq.attach_data)
}

// -------------------------------------------------------------------

// IMValidateRsp

// string user_name = 1;
inline void IMValidateRsp::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IMValidateRsp::user_name() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMValidateRsp.user_name)
  return user_name_.GetNoArena();
}
inline void IMValidateRsp::set_user_name(const ::std::string& value) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Server.IMValidateRsp.user_name)
}
#if LANG_CXX11
inline void IMValidateRsp::set_user_name(::std::string&& value) {
  
  user_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Server.IMValidateRsp.user_name)
}
#endif
inline void IMValidateRsp::set_user_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Server.IMValidateRsp.user_name)
}
inline void IMValidateRsp::set_user_name(const char* value, size_t size) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMValidateRsp.user_name)
}
inline ::std::string* IMValidateRsp::mutable_user_name() {
  
  // @@protoc_insertion_point(field_mutable:IM.Server.IMValidateRsp.user_name)
  return user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IMValidateRsp::release_user_name() {
  // @@protoc_insertion_point(field_release:IM.Server.IMValidateRsp.user_name)
  
  return user_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IMValidateRsp::set_allocated_user_name(::std::string* user_name) {
  if (user_name != NULL) {
    
  } else {
    
  }
  user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMValidateRsp.user_name)
}

// uint32 result_code = 2;
inline void IMValidateRsp::clear_result_code() {
  result_code_ = 0u;
}
inline ::google::protobuf::uint32 IMValidateRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMValidateRsp.result_code)
  return result_code_;
}
inline void IMValidateRsp::set_result_code(::google::protobuf::uint32 value) {
  
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMValidateRsp.result_code)
}

// string result_string = 3;
inline void IMValidateRsp::clear_result_string() {
  result_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IMValidateRsp::result_string() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMValidateRsp.result_string)
  return result_string_.GetNoArena();
}
inline void IMValidateRsp::set_result_string(const ::std::string& value) {
  
  result_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Server.IMValidateRsp.result_string)
}
#if LANG_CXX11
inline void IMValidateRsp::set_result_string(::std::string&& value) {
  
  result_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Server.IMValidateRsp.result_string)
}
#endif
inline void IMValidateRsp::set_result_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  result_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Server.IMValidateRsp.result_string)
}
inline void IMValidateRsp::set_result_string(const char* value, size_t size) {
  
  result_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMValidateRsp.result_string)
}
inline ::std::string* IMValidateRsp::mutable_result_string() {
  
  // @@protoc_insertion_point(field_mutable:IM.Server.IMValidateRsp.result_string)
  return result_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IMValidateRsp::release_result_string() {
  // @@protoc_insertion_point(field_release:IM.Server.IMValidateRsp.result_string)
  
  return result_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IMValidateRsp::set_allocated_result_string(::std::string* result_string) {
  if (result_string != NULL) {
    
  } else {
    
  }
  result_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), result_string);
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMValidateRsp.result_string)
}

// .IM.BaseDefine.UserInfo user_info = 4;
inline bool IMValidateRsp::has_user_info() const {
  return this != internal_default_instance() && user_info_ != NULL;
}
inline const ::IM::BaseDefine::UserInfo& IMValidateRsp::user_info() const {
  const ::IM::BaseDefine::UserInfo* p = user_info_;
  // @@protoc_insertion_point(field_get:IM.Server.IMValidateRsp.user_info)
  return p != NULL ? *p : *reinterpret_cast<const ::IM::BaseDefine::UserInfo*>(
      &::IM::BaseDefine::_UserInfo_default_instance_);
}
inline ::IM::BaseDefine::UserInfo* IMValidateRsp::release_user_info() {
  // @@protoc_insertion_point(field_release:IM.Server.IMValidateRsp.user_info)
  
  ::IM::BaseDefine::UserInfo* temp = user_info_;
  user_info_ = NULL;
  return temp;
}
inline ::IM::BaseDefine::UserInfo* IMValidateRsp::mutable_user_info() {
  
  if (user_info_ == NULL) {
    user_info_ = new ::IM::BaseDefine::UserInfo;
  }
  // @@protoc_insertion_point(field_mutable:IM.Server.IMValidateRsp.user_info)
  return user_info_;
}
inline void IMValidateRsp::set_allocated_user_info(::IM::BaseDefine::UserInfo* user_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(user_info_);
  }
  if (user_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      user_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, user_info, submessage_arena);
    }
    
  } else {
    
  }
  user_info_ = user_info;
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMValidateRsp.user_info)
}

// bytes attach_data = 20;
inline void IMValidateRsp::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IMValidateRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMValidateRsp.attach_data)
  return attach_data_.GetNoArena();
}
inline void IMValidateRsp::set_attach_data(const ::std::string& value) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Server.IMValidateRsp.attach_data)
}
#if LANG_CXX11
inline void IMValidateRsp::set_attach_data(::std::string&& value) {
  
  attach_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Server.IMValidateRsp.attach_data)
}
#endif
inline void IMValidateRsp::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Server.IMValidateRsp.attach_data)
}
inline void IMValidateRsp::set_attach_data(const void* value, size_t size) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMValidateRsp.attach_data)
}
inline ::std::string* IMValidateRsp::mutable_attach_data() {
  
  // @@protoc_insertion_point(field_mutable:IM.Server.IMValidateRsp.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IMValidateRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Server.IMValidateRsp.attach_data)
  
  return attach_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IMValidateRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    
  } else {
    
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMValidateRsp.attach_data)
}

// -------------------------------------------------------------------

// IMGetDeviceTokenReq

// repeated uint32 user_id = 1;
inline int IMGetDeviceTokenReq::user_id_size() const {
  return user_id_.size();
}
inline void IMGetDeviceTokenReq::clear_user_id() {
  user_id_.Clear();
}
inline ::google::protobuf::uint32 IMGetDeviceTokenReq::user_id(int index) const {
  // @@protoc_insertion_point(field_get:IM.Server.IMGetDeviceTokenReq.user_id)
  return user_id_.Get(index);
}
inline void IMGetDeviceTokenReq::set_user_id(int index, ::google::protobuf::uint32 value) {
  user_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Server.IMGetDeviceTokenReq.user_id)
}
inline void IMGetDeviceTokenReq::add_user_id(::google::protobuf::uint32 value) {
  user_id_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Server.IMGetDeviceTokenReq.user_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMGetDeviceTokenReq::user_id() const {
  // @@protoc_insertion_point(field_list:IM.Server.IMGetDeviceTokenReq.user_id)
  return user_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMGetDeviceTokenReq::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable_list:IM.Server.IMGetDeviceTokenReq.user_id)
  return &user_id_;
}

// bytes attach_data = 20;
inline void IMGetDeviceTokenReq::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IMGetDeviceTokenReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMGetDeviceTokenReq.attach_data)
  return attach_data_.GetNoArena();
}
inline void IMGetDeviceTokenReq::set_attach_data(const ::std::string& value) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Server.IMGetDeviceTokenReq.attach_data)
}
#if LANG_CXX11
inline void IMGetDeviceTokenReq::set_attach_data(::std::string&& value) {
  
  attach_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Server.IMGetDeviceTokenReq.attach_data)
}
#endif
inline void IMGetDeviceTokenReq::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Server.IMGetDeviceTokenReq.attach_data)
}
inline void IMGetDeviceTokenReq::set_attach_data(const void* value, size_t size) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMGetDeviceTokenReq.attach_data)
}
inline ::std::string* IMGetDeviceTokenReq::mutable_attach_data() {
  
  // @@protoc_insertion_point(field_mutable:IM.Server.IMGetDeviceTokenReq.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IMGetDeviceTokenReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Server.IMGetDeviceTokenReq.attach_data)
  
  return attach_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IMGetDeviceTokenReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    
  } else {
    
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMGetDeviceTokenReq.attach_data)
}

// -------------------------------------------------------------------

// IMGetDeviceTokenRsp

// repeated .IM.BaseDefine.UserTokenInfo user_token_info = 1;
inline int IMGetDeviceTokenRsp::user_token_info_size() const {
  return user_token_info_.size();
}
inline const ::IM::BaseDefine::UserTokenInfo& IMGetDeviceTokenRsp::user_token_info(int index) const {
  // @@protoc_insertion_point(field_get:IM.Server.IMGetDeviceTokenRsp.user_token_info)
  return user_token_info_.Get(index);
}
inline ::IM::BaseDefine::UserTokenInfo* IMGetDeviceTokenRsp::mutable_user_token_info(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Server.IMGetDeviceTokenRsp.user_token_info)
  return user_token_info_.Mutable(index);
}
inline ::IM::BaseDefine::UserTokenInfo* IMGetDeviceTokenRsp::add_user_token_info() {
  // @@protoc_insertion_point(field_add:IM.Server.IMGetDeviceTokenRsp.user_token_info)
  return user_token_info_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserTokenInfo >*
IMGetDeviceTokenRsp::mutable_user_token_info() {
  // @@protoc_insertion_point(field_mutable_list:IM.Server.IMGetDeviceTokenRsp.user_token_info)
  return &user_token_info_;
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserTokenInfo >&
IMGetDeviceTokenRsp::user_token_info() const {
  // @@protoc_insertion_point(field_list:IM.Server.IMGetDeviceTokenRsp.user_token_info)
  return user_token_info_;
}

// bytes attach_data = 20;
inline void IMGetDeviceTokenRsp::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IMGetDeviceTokenRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMGetDeviceTokenRsp.attach_data)
  return attach_data_.GetNoArena();
}
inline void IMGetDeviceTokenRsp::set_attach_data(const ::std::string& value) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Server.IMGetDeviceTokenRsp.attach_data)
}
#if LANG_CXX11
inline void IMGetDeviceTokenRsp::set_attach_data(::std::string&& value) {
  
  attach_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Server.IMGetDeviceTokenRsp.attach_data)
}
#endif
inline void IMGetDeviceTokenRsp::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Server.IMGetDeviceTokenRsp.attach_data)
}
inline void IMGetDeviceTokenRsp::set_attach_data(const void* value, size_t size) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMGetDeviceTokenRsp.attach_data)
}
inline ::std::string* IMGetDeviceTokenRsp::mutable_attach_data() {
  
  // @@protoc_insertion_point(field_mutable:IM.Server.IMGetDeviceTokenRsp.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IMGetDeviceTokenRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Server.IMGetDeviceTokenRsp.attach_data)
  
  return attach_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IMGetDeviceTokenRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    
  } else {
    
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMGetDeviceTokenRsp.attach_data)
}

// -------------------------------------------------------------------

// IMRoleSet

// uint32 master = 1;
inline void IMRoleSet::clear_master() {
  master_ = 0u;
}
inline ::google::protobuf::uint32 IMRoleSet::master() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMRoleSet.master)
  return master_;
}
inline void IMRoleSet::set_master(::google::protobuf::uint32 value) {
  
  master_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMRoleSet.master)
}

// -------------------------------------------------------------------

// IMOnlineUserInfo

// repeated .IM.BaseDefine.ServerUserStat user_stat_list = 1;
inline int IMOnlineUserInfo::user_stat_list_size() const {
  return user_stat_list_.size();
}
inline const ::IM::BaseDefine::ServerUserStat& IMOnlineUserInfo::user_stat_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Server.IMOnlineUserInfo.user_stat_list)
  return user_stat_list_.Get(index);
}
inline ::IM::BaseDefine::ServerUserStat* IMOnlineUserInfo::mutable_user_stat_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Server.IMOnlineUserInfo.user_stat_list)
  return user_stat_list_.Mutable(index);
}
inline ::IM::BaseDefine::ServerUserStat* IMOnlineUserInfo::add_user_stat_list() {
  // @@protoc_insertion_point(field_add:IM.Server.IMOnlineUserInfo.user_stat_list)
  return user_stat_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::ServerUserStat >*
IMOnlineUserInfo::mutable_user_stat_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Server.IMOnlineUserInfo.user_stat_list)
  return &user_stat_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::ServerUserStat >&
IMOnlineUserInfo::user_stat_list() const {
  // @@protoc_insertion_point(field_list:IM.Server.IMOnlineUserInfo.user_stat_list)
  return user_stat_list_;
}

// -------------------------------------------------------------------

// IMMsgServInfo

// string ip1 = 1;
inline void IMMsgServInfo::clear_ip1() {
  ip1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IMMsgServInfo::ip1() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMMsgServInfo.ip1)
  return ip1_.GetNoArena();
}
inline void IMMsgServInfo::set_ip1(const ::std::string& value) {
  
  ip1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Server.IMMsgServInfo.ip1)
}
#if LANG_CXX11
inline void IMMsgServInfo::set_ip1(::std::string&& value) {
  
  ip1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Server.IMMsgServInfo.ip1)
}
#endif
inline void IMMsgServInfo::set_ip1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Server.IMMsgServInfo.ip1)
}
inline void IMMsgServInfo::set_ip1(const char* value, size_t size) {
  
  ip1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMMsgServInfo.ip1)
}
inline ::std::string* IMMsgServInfo::mutable_ip1() {
  
  // @@protoc_insertion_point(field_mutable:IM.Server.IMMsgServInfo.ip1)
  return ip1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IMMsgServInfo::release_ip1() {
  // @@protoc_insertion_point(field_release:IM.Server.IMMsgServInfo.ip1)
  
  return ip1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IMMsgServInfo::set_allocated_ip1(::std::string* ip1) {
  if (ip1 != NULL) {
    
  } else {
    
  }
  ip1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip1);
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMMsgServInfo.ip1)
}

// string ip2 = 2;
inline void IMMsgServInfo::clear_ip2() {
  ip2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IMMsgServInfo::ip2() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMMsgServInfo.ip2)
  return ip2_.GetNoArena();
}
inline void IMMsgServInfo::set_ip2(const ::std::string& value) {
  
  ip2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Server.IMMsgServInfo.ip2)
}
#if LANG_CXX11
inline void IMMsgServInfo::set_ip2(::std::string&& value) {
  
  ip2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Server.IMMsgServInfo.ip2)
}
#endif
inline void IMMsgServInfo::set_ip2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Server.IMMsgServInfo.ip2)
}
inline void IMMsgServInfo::set_ip2(const char* value, size_t size) {
  
  ip2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMMsgServInfo.ip2)
}
inline ::std::string* IMMsgServInfo::mutable_ip2() {
  
  // @@protoc_insertion_point(field_mutable:IM.Server.IMMsgServInfo.ip2)
  return ip2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IMMsgServInfo::release_ip2() {
  // @@protoc_insertion_point(field_release:IM.Server.IMMsgServInfo.ip2)
  
  return ip2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IMMsgServInfo::set_allocated_ip2(::std::string* ip2) {
  if (ip2 != NULL) {
    
  } else {
    
  }
  ip2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip2);
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMMsgServInfo.ip2)
}

// uint32 port = 3;
inline void IMMsgServInfo::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 IMMsgServInfo::port() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMMsgServInfo.port)
  return port_;
}
inline void IMMsgServInfo::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMMsgServInfo.port)
}

// uint32 max_conn_cnt = 4;
inline void IMMsgServInfo::clear_max_conn_cnt() {
  max_conn_cnt_ = 0u;
}
inline ::google::protobuf::uint32 IMMsgServInfo::max_conn_cnt() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMMsgServInfo.max_conn_cnt)
  return max_conn_cnt_;
}
inline void IMMsgServInfo::set_max_conn_cnt(::google::protobuf::uint32 value) {
  
  max_conn_cnt_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMMsgServInfo.max_conn_cnt)
}

// uint32 cur_conn_cnt = 5;
inline void IMMsgServInfo::clear_cur_conn_cnt() {
  cur_conn_cnt_ = 0u;
}
inline ::google::protobuf::uint32 IMMsgServInfo::cur_conn_cnt() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMMsgServInfo.cur_conn_cnt)
  return cur_conn_cnt_;
}
inline void IMMsgServInfo::set_cur_conn_cnt(::google::protobuf::uint32 value) {
  
  cur_conn_cnt_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMMsgServInfo.cur_conn_cnt)
}

// string host_name = 6;
inline void IMMsgServInfo::clear_host_name() {
  host_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IMMsgServInfo::host_name() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMMsgServInfo.host_name)
  return host_name_.GetNoArena();
}
inline void IMMsgServInfo::set_host_name(const ::std::string& value) {
  
  host_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Server.IMMsgServInfo.host_name)
}
#if LANG_CXX11
inline void IMMsgServInfo::set_host_name(::std::string&& value) {
  
  host_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Server.IMMsgServInfo.host_name)
}
#endif
inline void IMMsgServInfo::set_host_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  host_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Server.IMMsgServInfo.host_name)
}
inline void IMMsgServInfo::set_host_name(const char* value, size_t size) {
  
  host_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMMsgServInfo.host_name)
}
inline ::std::string* IMMsgServInfo::mutable_host_name() {
  
  // @@protoc_insertion_point(field_mutable:IM.Server.IMMsgServInfo.host_name)
  return host_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IMMsgServInfo::release_host_name() {
  // @@protoc_insertion_point(field_release:IM.Server.IMMsgServInfo.host_name)
  
  return host_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IMMsgServInfo::set_allocated_host_name(::std::string* host_name) {
  if (host_name != NULL) {
    
  } else {
    
  }
  host_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host_name);
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMMsgServInfo.host_name)
}

// -------------------------------------------------------------------

// IMUserStatusUpdate

// uint32 user_status = 1;
inline void IMUserStatusUpdate::clear_user_status() {
  user_status_ = 0u;
}
inline ::google::protobuf::uint32 IMUserStatusUpdate::user_status() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMUserStatusUpdate.user_status)
  return user_status_;
}
inline void IMUserStatusUpdate::set_user_status(::google::protobuf::uint32 value) {
  
  user_status_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMUserStatusUpdate.user_status)
}

// uint32 user_id = 2;
inline void IMUserStatusUpdate::clear_user_id() {
  user_id_ = 0u;
}
inline ::google::protobuf::uint32 IMUserStatusUpdate::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMUserStatusUpdate.user_id)
  return user_id_;
}
inline void IMUserStatusUpdate::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMUserStatusUpdate.user_id)
}

// .IM.BaseDefine.ClientType client_type = 3;
inline void IMUserStatusUpdate::clear_client_type() {
  client_type_ = 0;
}
inline ::IM::BaseDefine::ClientType IMUserStatusUpdate::client_type() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMUserStatusUpdate.client_type)
  return static_cast< ::IM::BaseDefine::ClientType >(client_type_);
}
inline void IMUserStatusUpdate::set_client_type(::IM::BaseDefine::ClientType value) {
  
  client_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMUserStatusUpdate.client_type)
}

// -------------------------------------------------------------------

// IMUserCntUpdate

// uint32 user_action = 1;
inline void IMUserCntUpdate::clear_user_action() {
  user_action_ = 0u;
}
inline ::google::protobuf::uint32 IMUserCntUpdate::user_action() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMUserCntUpdate.user_action)
  return user_action_;
}
inline void IMUserCntUpdate::set_user_action(::google::protobuf::uint32 value) {
  
  user_action_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMUserCntUpdate.user_action)
}

// uint32 user_id = 2;
inline void IMUserCntUpdate::clear_user_id() {
  user_id_ = 0u;
}
inline ::google::protobuf::uint32 IMUserCntUpdate::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMUserCntUpdate.user_id)
  return user_id_;
}
inline void IMUserCntUpdate::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMUserCntUpdate.user_id)
}

// -------------------------------------------------------------------

// IMServerKickUser

// uint32 user_id = 1;
inline void IMServerKickUser::clear_user_id() {
  user_id_ = 0u;
}
inline ::google::protobuf::uint32 IMServerKickUser::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMServerKickUser.user_id)
  return user_id_;
}
inline void IMServerKickUser::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMServerKickUser.user_id)
}

// .IM.BaseDefine.ClientType client_type = 2;
inline void IMServerKickUser::clear_client_type() {
  client_type_ = 0;
}
inline ::IM::BaseDefine::ClientType IMServerKickUser::client_type() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMServerKickUser.client_type)
  return static_cast< ::IM::BaseDefine::ClientType >(client_type_);
}
inline void IMServerKickUser::set_client_type(::IM::BaseDefine::ClientType value) {
  
  client_type_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMServerKickUser.client_type)
}

// uint32 reason = 3;
inline void IMServerKickUser::clear_reason() {
  reason_ = 0u;
}
inline ::google::protobuf::uint32 IMServerKickUser::reason() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMServerKickUser.reason)
  return reason_;
}
inline void IMServerKickUser::set_reason(::google::protobuf::uint32 value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMServerKickUser.reason)
}

// -------------------------------------------------------------------

// IMServerPCLoginStatusNotify

// uint32 user_id = 1;
inline void IMServerPCLoginStatusNotify::clear_user_id() {
  user_id_ = 0u;
}
inline ::google::protobuf::uint32 IMServerPCLoginStatusNotify::user_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMServerPCLoginStatusNotify.user_id)
  return user_id_;
}
inline void IMServerPCLoginStatusNotify::set_user_id(::google::protobuf::uint32 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMServerPCLoginStatusNotify.user_id)
}

// uint32 login_status = 2;
inline void IMServerPCLoginStatusNotify::clear_login_status() {
  login_status_ = 0u;
}
inline ::google::protobuf::uint32 IMServerPCLoginStatusNotify::login_status() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMServerPCLoginStatusNotify.login_status)
  return login_status_;
}
inline void IMServerPCLoginStatusNotify::set_login_status(::google::protobuf::uint32 value) {
  
  login_status_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMServerPCLoginStatusNotify.login_status)
}

// -------------------------------------------------------------------

// IMPushToUserReq

// string flash = 1;
inline void IMPushToUserReq::clear_flash() {
  flash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IMPushToUserReq::flash() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMPushToUserReq.flash)
  return flash_.GetNoArena();
}
inline void IMPushToUserReq::set_flash(const ::std::string& value) {
  
  flash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Server.IMPushToUserReq.flash)
}
#if LANG_CXX11
inline void IMPushToUserReq::set_flash(::std::string&& value) {
  
  flash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Server.IMPushToUserReq.flash)
}
#endif
inline void IMPushToUserReq::set_flash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  flash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Server.IMPushToUserReq.flash)
}
inline void IMPushToUserReq::set_flash(const char* value, size_t size) {
  
  flash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMPushToUserReq.flash)
}
inline ::std::string* IMPushToUserReq::mutable_flash() {
  
  // @@protoc_insertion_point(field_mutable:IM.Server.IMPushToUserReq.flash)
  return flash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IMPushToUserReq::release_flash() {
  // @@protoc_insertion_point(field_release:IM.Server.IMPushToUserReq.flash)
  
  return flash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IMPushToUserReq::set_allocated_flash(::std::string* flash) {
  if (flash != NULL) {
    
  } else {
    
  }
  flash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), flash);
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMPushToUserReq.flash)
}

// string data = 2;
inline void IMPushToUserReq::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IMPushToUserReq::data() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMPushToUserReq.data)
  return data_.GetNoArena();
}
inline void IMPushToUserReq::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Server.IMPushToUserReq.data)
}
#if LANG_CXX11
inline void IMPushToUserReq::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Server.IMPushToUserReq.data)
}
#endif
inline void IMPushToUserReq::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Server.IMPushToUserReq.data)
}
inline void IMPushToUserReq::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMPushToUserReq.data)
}
inline ::std::string* IMPushToUserReq::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:IM.Server.IMPushToUserReq.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IMPushToUserReq::release_data() {
  // @@protoc_insertion_point(field_release:IM.Server.IMPushToUserReq.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IMPushToUserReq::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMPushToUserReq.data)
}

// repeated .IM.BaseDefine.UserTokenInfo user_token_list = 3;
inline int IMPushToUserReq::user_token_list_size() const {
  return user_token_list_.size();
}
inline const ::IM::BaseDefine::UserTokenInfo& IMPushToUserReq::user_token_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Server.IMPushToUserReq.user_token_list)
  return user_token_list_.Get(index);
}
inline ::IM::BaseDefine::UserTokenInfo* IMPushToUserReq::mutable_user_token_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Server.IMPushToUserReq.user_token_list)
  return user_token_list_.Mutable(index);
}
inline ::IM::BaseDefine::UserTokenInfo* IMPushToUserReq::add_user_token_list() {
  // @@protoc_insertion_point(field_add:IM.Server.IMPushToUserReq.user_token_list)
  return user_token_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserTokenInfo >*
IMPushToUserReq::mutable_user_token_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Server.IMPushToUserReq.user_token_list)
  return &user_token_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::UserTokenInfo >&
IMPushToUserReq::user_token_list() const {
  // @@protoc_insertion_point(field_list:IM.Server.IMPushToUserReq.user_token_list)
  return user_token_list_;
}

// -------------------------------------------------------------------

// IMPushToUserRsp

// repeated .IM.BaseDefine.PushResult push_result_list = 1;
inline int IMPushToUserRsp::push_result_list_size() const {
  return push_result_list_.size();
}
inline const ::IM::BaseDefine::PushResult& IMPushToUserRsp::push_result_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Server.IMPushToUserRsp.push_result_list)
  return push_result_list_.Get(index);
}
inline ::IM::BaseDefine::PushResult* IMPushToUserRsp::mutable_push_result_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Server.IMPushToUserRsp.push_result_list)
  return push_result_list_.Mutable(index);
}
inline ::IM::BaseDefine::PushResult* IMPushToUserRsp::add_push_result_list() {
  // @@protoc_insertion_point(field_add:IM.Server.IMPushToUserRsp.push_result_list)
  return push_result_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::PushResult >*
IMPushToUserRsp::mutable_push_result_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Server.IMPushToUserRsp.push_result_list)
  return &push_result_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::PushResult >&
IMPushToUserRsp::push_result_list() const {
  // @@protoc_insertion_point(field_list:IM.Server.IMPushToUserRsp.push_result_list)
  return push_result_list_;
}

// -------------------------------------------------------------------

// IMGroupGetShieldReq

// uint32 group_id = 1;
inline void IMGroupGetShieldReq::clear_group_id() {
  group_id_ = 0u;
}
inline ::google::protobuf::uint32 IMGroupGetShieldReq::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMGroupGetShieldReq.group_id)
  return group_id_;
}
inline void IMGroupGetShieldReq::set_group_id(::google::protobuf::uint32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMGroupGetShieldReq.group_id)
}

// repeated uint32 user_id = 2;
inline int IMGroupGetShieldReq::user_id_size() const {
  return user_id_.size();
}
inline void IMGroupGetShieldReq::clear_user_id() {
  user_id_.Clear();
}
inline ::google::protobuf::uint32 IMGroupGetShieldReq::user_id(int index) const {
  // @@protoc_insertion_point(field_get:IM.Server.IMGroupGetShieldReq.user_id)
  return user_id_.Get(index);
}
inline void IMGroupGetShieldReq::set_user_id(int index, ::google::protobuf::uint32 value) {
  user_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:IM.Server.IMGroupGetShieldReq.user_id)
}
inline void IMGroupGetShieldReq::add_user_id(::google::protobuf::uint32 value) {
  user_id_.Add(value);
  // @@protoc_insertion_point(field_add:IM.Server.IMGroupGetShieldReq.user_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IMGroupGetShieldReq::user_id() const {
  // @@protoc_insertion_point(field_list:IM.Server.IMGroupGetShieldReq.user_id)
  return user_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IMGroupGetShieldReq::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable_list:IM.Server.IMGroupGetShieldReq.user_id)
  return &user_id_;
}

// bytes attach_data = 20;
inline void IMGroupGetShieldReq::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IMGroupGetShieldReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMGroupGetShieldReq.attach_data)
  return attach_data_.GetNoArena();
}
inline void IMGroupGetShieldReq::set_attach_data(const ::std::string& value) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Server.IMGroupGetShieldReq.attach_data)
}
#if LANG_CXX11
inline void IMGroupGetShieldReq::set_attach_data(::std::string&& value) {
  
  attach_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Server.IMGroupGetShieldReq.attach_data)
}
#endif
inline void IMGroupGetShieldReq::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Server.IMGroupGetShieldReq.attach_data)
}
inline void IMGroupGetShieldReq::set_attach_data(const void* value, size_t size) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMGroupGetShieldReq.attach_data)
}
inline ::std::string* IMGroupGetShieldReq::mutable_attach_data() {
  
  // @@protoc_insertion_point(field_mutable:IM.Server.IMGroupGetShieldReq.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IMGroupGetShieldReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Server.IMGroupGetShieldReq.attach_data)
  
  return attach_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IMGroupGetShieldReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    
  } else {
    
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMGroupGetShieldReq.attach_data)
}

// -------------------------------------------------------------------

// IMGroupGetShieldRsp

// uint32 group_id = 1;
inline void IMGroupGetShieldRsp::clear_group_id() {
  group_id_ = 0u;
}
inline ::google::protobuf::uint32 IMGroupGetShieldRsp::group_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMGroupGetShieldRsp.group_id)
  return group_id_;
}
inline void IMGroupGetShieldRsp::set_group_id(::google::protobuf::uint32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMGroupGetShieldRsp.group_id)
}

// repeated .IM.BaseDefine.ShieldStatus shield_status_list = 2;
inline int IMGroupGetShieldRsp::shield_status_list_size() const {
  return shield_status_list_.size();
}
inline const ::IM::BaseDefine::ShieldStatus& IMGroupGetShieldRsp::shield_status_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Server.IMGroupGetShieldRsp.shield_status_list)
  return shield_status_list_.Get(index);
}
inline ::IM::BaseDefine::ShieldStatus* IMGroupGetShieldRsp::mutable_shield_status_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Server.IMGroupGetShieldRsp.shield_status_list)
  return shield_status_list_.Mutable(index);
}
inline ::IM::BaseDefine::ShieldStatus* IMGroupGetShieldRsp::add_shield_status_list() {
  // @@protoc_insertion_point(field_add:IM.Server.IMGroupGetShieldRsp.shield_status_list)
  return shield_status_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::ShieldStatus >*
IMGroupGetShieldRsp::mutable_shield_status_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Server.IMGroupGetShieldRsp.shield_status_list)
  return &shield_status_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::ShieldStatus >&
IMGroupGetShieldRsp::shield_status_list() const {
  // @@protoc_insertion_point(field_list:IM.Server.IMGroupGetShieldRsp.shield_status_list)
  return shield_status_list_;
}

// bytes attach_data = 20;
inline void IMGroupGetShieldRsp::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IMGroupGetShieldRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMGroupGetShieldRsp.attach_data)
  return attach_data_.GetNoArena();
}
inline void IMGroupGetShieldRsp::set_attach_data(const ::std::string& value) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Server.IMGroupGetShieldRsp.attach_data)
}
#if LANG_CXX11
inline void IMGroupGetShieldRsp::set_attach_data(::std::string&& value) {
  
  attach_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Server.IMGroupGetShieldRsp.attach_data)
}
#endif
inline void IMGroupGetShieldRsp::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Server.IMGroupGetShieldRsp.attach_data)
}
inline void IMGroupGetShieldRsp::set_attach_data(const void* value, size_t size) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMGroupGetShieldRsp.attach_data)
}
inline ::std::string* IMGroupGetShieldRsp::mutable_attach_data() {
  
  // @@protoc_insertion_point(field_mutable:IM.Server.IMGroupGetShieldRsp.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IMGroupGetShieldRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Server.IMGroupGetShieldRsp.attach_data)
  
  return attach_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IMGroupGetShieldRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    
  } else {
    
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMGroupGetShieldRsp.attach_data)
}

// -------------------------------------------------------------------

// IMFileTransferReq

// uint32 from_user_id = 1;
inline void IMFileTransferReq::clear_from_user_id() {
  from_user_id_ = 0u;
}
inline ::google::protobuf::uint32 IMFileTransferReq::from_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMFileTransferReq.from_user_id)
  return from_user_id_;
}
inline void IMFileTransferReq::set_from_user_id(::google::protobuf::uint32 value) {
  
  from_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMFileTransferReq.from_user_id)
}

// uint32 to_user_id = 2;
inline void IMFileTransferReq::clear_to_user_id() {
  to_user_id_ = 0u;
}
inline ::google::protobuf::uint32 IMFileTransferReq::to_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMFileTransferReq.to_user_id)
  return to_user_id_;
}
inline void IMFileTransferReq::set_to_user_id(::google::protobuf::uint32 value) {
  
  to_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMFileTransferReq.to_user_id)
}

// string file_name = 3;
inline void IMFileTransferReq::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IMFileTransferReq::file_name() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMFileTransferReq.file_name)
  return file_name_.GetNoArena();
}
inline void IMFileTransferReq::set_file_name(const ::std::string& value) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Server.IMFileTransferReq.file_name)
}
#if LANG_CXX11
inline void IMFileTransferReq::set_file_name(::std::string&& value) {
  
  file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Server.IMFileTransferReq.file_name)
}
#endif
inline void IMFileTransferReq::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Server.IMFileTransferReq.file_name)
}
inline void IMFileTransferReq::set_file_name(const char* value, size_t size) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMFileTransferReq.file_name)
}
inline ::std::string* IMFileTransferReq::mutable_file_name() {
  
  // @@protoc_insertion_point(field_mutable:IM.Server.IMFileTransferReq.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IMFileTransferReq::release_file_name() {
  // @@protoc_insertion_point(field_release:IM.Server.IMFileTransferReq.file_name)
  
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IMFileTransferReq::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    
  } else {
    
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMFileTransferReq.file_name)
}

// uint32 file_size = 4;
inline void IMFileTransferReq::clear_file_size() {
  file_size_ = 0u;
}
inline ::google::protobuf::uint32 IMFileTransferReq::file_size() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMFileTransferReq.file_size)
  return file_size_;
}
inline void IMFileTransferReq::set_file_size(::google::protobuf::uint32 value) {
  
  file_size_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMFileTransferReq.file_size)
}

// .IM.BaseDefine.TransferFileType trans_mode = 5;
inline void IMFileTransferReq::clear_trans_mode() {
  trans_mode_ = 0;
}
inline ::IM::BaseDefine::TransferFileType IMFileTransferReq::trans_mode() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMFileTransferReq.trans_mode)
  return static_cast< ::IM::BaseDefine::TransferFileType >(trans_mode_);
}
inline void IMFileTransferReq::set_trans_mode(::IM::BaseDefine::TransferFileType value) {
  
  trans_mode_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMFileTransferReq.trans_mode)
}

// bytes attach_data = 20;
inline void IMFileTransferReq::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IMFileTransferReq::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMFileTransferReq.attach_data)
  return attach_data_.GetNoArena();
}
inline void IMFileTransferReq::set_attach_data(const ::std::string& value) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Server.IMFileTransferReq.attach_data)
}
#if LANG_CXX11
inline void IMFileTransferReq::set_attach_data(::std::string&& value) {
  
  attach_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Server.IMFileTransferReq.attach_data)
}
#endif
inline void IMFileTransferReq::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Server.IMFileTransferReq.attach_data)
}
inline void IMFileTransferReq::set_attach_data(const void* value, size_t size) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMFileTransferReq.attach_data)
}
inline ::std::string* IMFileTransferReq::mutable_attach_data() {
  
  // @@protoc_insertion_point(field_mutable:IM.Server.IMFileTransferReq.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IMFileTransferReq::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Server.IMFileTransferReq.attach_data)
  
  return attach_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IMFileTransferReq::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    
  } else {
    
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMFileTransferReq.attach_data)
}

// -------------------------------------------------------------------

// IMFileTransferRsp

// uint32 result_code = 1;
inline void IMFileTransferRsp::clear_result_code() {
  result_code_ = 0u;
}
inline ::google::protobuf::uint32 IMFileTransferRsp::result_code() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMFileTransferRsp.result_code)
  return result_code_;
}
inline void IMFileTransferRsp::set_result_code(::google::protobuf::uint32 value) {
  
  result_code_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMFileTransferRsp.result_code)
}

// uint32 from_user_id = 2;
inline void IMFileTransferRsp::clear_from_user_id() {
  from_user_id_ = 0u;
}
inline ::google::protobuf::uint32 IMFileTransferRsp::from_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMFileTransferRsp.from_user_id)
  return from_user_id_;
}
inline void IMFileTransferRsp::set_from_user_id(::google::protobuf::uint32 value) {
  
  from_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMFileTransferRsp.from_user_id)
}

// uint32 to_user_id = 3;
inline void IMFileTransferRsp::clear_to_user_id() {
  to_user_id_ = 0u;
}
inline ::google::protobuf::uint32 IMFileTransferRsp::to_user_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMFileTransferRsp.to_user_id)
  return to_user_id_;
}
inline void IMFileTransferRsp::set_to_user_id(::google::protobuf::uint32 value) {
  
  to_user_id_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMFileTransferRsp.to_user_id)
}

// string file_name = 4;
inline void IMFileTransferRsp::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IMFileTransferRsp::file_name() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMFileTransferRsp.file_name)
  return file_name_.GetNoArena();
}
inline void IMFileTransferRsp::set_file_name(const ::std::string& value) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Server.IMFileTransferRsp.file_name)
}
#if LANG_CXX11
inline void IMFileTransferRsp::set_file_name(::std::string&& value) {
  
  file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Server.IMFileTransferRsp.file_name)
}
#endif
inline void IMFileTransferRsp::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Server.IMFileTransferRsp.file_name)
}
inline void IMFileTransferRsp::set_file_name(const char* value, size_t size) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMFileTransferRsp.file_name)
}
inline ::std::string* IMFileTransferRsp::mutable_file_name() {
  
  // @@protoc_insertion_point(field_mutable:IM.Server.IMFileTransferRsp.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IMFileTransferRsp::release_file_name() {
  // @@protoc_insertion_point(field_release:IM.Server.IMFileTransferRsp.file_name)
  
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IMFileTransferRsp::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    
  } else {
    
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMFileTransferRsp.file_name)
}

// uint32 file_size = 5;
inline void IMFileTransferRsp::clear_file_size() {
  file_size_ = 0u;
}
inline ::google::protobuf::uint32 IMFileTransferRsp::file_size() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMFileTransferRsp.file_size)
  return file_size_;
}
inline void IMFileTransferRsp::set_file_size(::google::protobuf::uint32 value) {
  
  file_size_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMFileTransferRsp.file_size)
}

// string task_id = 6;
inline void IMFileTransferRsp::clear_task_id() {
  task_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IMFileTransferRsp::task_id() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMFileTransferRsp.task_id)
  return task_id_.GetNoArena();
}
inline void IMFileTransferRsp::set_task_id(const ::std::string& value) {
  
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Server.IMFileTransferRsp.task_id)
}
#if LANG_CXX11
inline void IMFileTransferRsp::set_task_id(::std::string&& value) {
  
  task_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Server.IMFileTransferRsp.task_id)
}
#endif
inline void IMFileTransferRsp::set_task_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Server.IMFileTransferRsp.task_id)
}
inline void IMFileTransferRsp::set_task_id(const char* value, size_t size) {
  
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMFileTransferRsp.task_id)
}
inline ::std::string* IMFileTransferRsp::mutable_task_id() {
  
  // @@protoc_insertion_point(field_mutable:IM.Server.IMFileTransferRsp.task_id)
  return task_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IMFileTransferRsp::release_task_id() {
  // @@protoc_insertion_point(field_release:IM.Server.IMFileTransferRsp.task_id)
  
  return task_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IMFileTransferRsp::set_allocated_task_id(::std::string* task_id) {
  if (task_id != NULL) {
    
  } else {
    
  }
  task_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), task_id);
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMFileTransferRsp.task_id)
}

// .IM.BaseDefine.TransferFileType trans_mode = 7;
inline void IMFileTransferRsp::clear_trans_mode() {
  trans_mode_ = 0;
}
inline ::IM::BaseDefine::TransferFileType IMFileTransferRsp::trans_mode() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMFileTransferRsp.trans_mode)
  return static_cast< ::IM::BaseDefine::TransferFileType >(trans_mode_);
}
inline void IMFileTransferRsp::set_trans_mode(::IM::BaseDefine::TransferFileType value) {
  
  trans_mode_ = value;
  // @@protoc_insertion_point(field_set:IM.Server.IMFileTransferRsp.trans_mode)
}

// bytes attach_data = 20;
inline void IMFileTransferRsp::clear_attach_data() {
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IMFileTransferRsp::attach_data() const {
  // @@protoc_insertion_point(field_get:IM.Server.IMFileTransferRsp.attach_data)
  return attach_data_.GetNoArena();
}
inline void IMFileTransferRsp::set_attach_data(const ::std::string& value) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IM.Server.IMFileTransferRsp.attach_data)
}
#if LANG_CXX11
inline void IMFileTransferRsp::set_attach_data(::std::string&& value) {
  
  attach_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IM.Server.IMFileTransferRsp.attach_data)
}
#endif
inline void IMFileTransferRsp::set_attach_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IM.Server.IMFileTransferRsp.attach_data)
}
inline void IMFileTransferRsp::set_attach_data(const void* value, size_t size) {
  
  attach_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IM.Server.IMFileTransferRsp.attach_data)
}
inline ::std::string* IMFileTransferRsp::mutable_attach_data() {
  
  // @@protoc_insertion_point(field_mutable:IM.Server.IMFileTransferRsp.attach_data)
  return attach_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IMFileTransferRsp::release_attach_data() {
  // @@protoc_insertion_point(field_release:IM.Server.IMFileTransferRsp.attach_data)
  
  return attach_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IMFileTransferRsp::set_allocated_attach_data(::std::string* attach_data) {
  if (attach_data != NULL) {
    
  } else {
    
  }
  attach_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attach_data);
  // @@protoc_insertion_point(field_set_allocated:IM.Server.IMFileTransferRsp.attach_data)
}

// -------------------------------------------------------------------

// IMFileServerIPReq

// -------------------------------------------------------------------

// IMFileServerIPRsp

// repeated .IM.BaseDefine.IpAddr ip_addr_list = 1;
inline int IMFileServerIPRsp::ip_addr_list_size() const {
  return ip_addr_list_.size();
}
inline const ::IM::BaseDefine::IpAddr& IMFileServerIPRsp::ip_addr_list(int index) const {
  // @@protoc_insertion_point(field_get:IM.Server.IMFileServerIPRsp.ip_addr_list)
  return ip_addr_list_.Get(index);
}
inline ::IM::BaseDefine::IpAddr* IMFileServerIPRsp::mutable_ip_addr_list(int index) {
  // @@protoc_insertion_point(field_mutable:IM.Server.IMFileServerIPRsp.ip_addr_list)
  return ip_addr_list_.Mutable(index);
}
inline ::IM::BaseDefine::IpAddr* IMFileServerIPRsp::add_ip_addr_list() {
  // @@protoc_insertion_point(field_add:IM.Server.IMFileServerIPRsp.ip_addr_list)
  return ip_addr_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::IpAddr >*
IMFileServerIPRsp::mutable_ip_addr_list() {
  // @@protoc_insertion_point(field_mutable_list:IM.Server.IMFileServerIPRsp.ip_addr_list)
  return &ip_addr_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::IM::BaseDefine::IpAddr >&
IMFileServerIPRsp::ip_addr_list() const {
  // @@protoc_insertion_point(field_list:IM.Server.IMFileServerIPRsp.ip_addr_list)
  return ip_addr_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Server
}  // namespace IM

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_IM_2eServer_2eproto__INCLUDED
