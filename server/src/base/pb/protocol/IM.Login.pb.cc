// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Login.proto

#include "IM.Login.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace IM {
namespace Login {
class IMMsgServReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IMMsgServReq>
      _instance;
} _IMMsgServReq_default_instance_;
class IMMsgServRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IMMsgServRsp>
      _instance;
} _IMMsgServRsp_default_instance_;
class IMLoginReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IMLoginReq>
      _instance;
} _IMLoginReq_default_instance_;
class IMLoginResDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IMLoginRes>
      _instance;
} _IMLoginRes_default_instance_;
class IMLogoutReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IMLogoutReq>
      _instance;
} _IMLogoutReq_default_instance_;
class IMLogoutRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IMLogoutRsp>
      _instance;
} _IMLogoutRsp_default_instance_;
class IMKickUserDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IMKickUser>
      _instance;
} _IMKickUser_default_instance_;
class IMDeviceTokenReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IMDeviceTokenReq>
      _instance;
} _IMDeviceTokenReq_default_instance_;
class IMDeviceTokenRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IMDeviceTokenRsp>
      _instance;
} _IMDeviceTokenRsp_default_instance_;
class IMKickPCClientReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IMKickPCClientReq>
      _instance;
} _IMKickPCClientReq_default_instance_;
class IMKickPCClientRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IMKickPCClientRsp>
      _instance;
} _IMKickPCClientRsp_default_instance_;
class IMPushShieldReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IMPushShieldReq>
      _instance;
} _IMPushShieldReq_default_instance_;
class IMPushShieldRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IMPushShieldRsp>
      _instance;
} _IMPushShieldRsp_default_instance_;
class IMQueryPushShieldReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IMQueryPushShieldReq>
      _instance;
} _IMQueryPushShieldReq_default_instance_;
class IMQueryPushShieldRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IMQueryPushShieldRsp>
      _instance;
} _IMQueryPushShieldRsp_default_instance_;
}  // namespace Login
}  // namespace IM
namespace protobuf_IM_2eLogin_2eproto {
void InitDefaultsIMMsgServReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::IM::Login::_IMMsgServReq_default_instance_;
    new (ptr) ::IM::Login::IMMsgServReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::Login::IMMsgServReq::InitAsDefaultInstance();
}

void InitDefaultsIMMsgServReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIMMsgServReqImpl);
}

void InitDefaultsIMMsgServRspImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::IM::Login::_IMMsgServRsp_default_instance_;
    new (ptr) ::IM::Login::IMMsgServRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::Login::IMMsgServRsp::InitAsDefaultInstance();
}

void InitDefaultsIMMsgServRsp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIMMsgServRspImpl);
}

void InitDefaultsIMLoginReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::IM::Login::_IMLoginReq_default_instance_;
    new (ptr) ::IM::Login::IMLoginReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::Login::IMLoginReq::InitAsDefaultInstance();
}

void InitDefaultsIMLoginReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIMLoginReqImpl);
}

void InitDefaultsIMLoginResImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_IM_2eBaseDefine_2eproto::InitDefaultsUserInfo();
  {
    void* ptr = &::IM::Login::_IMLoginRes_default_instance_;
    new (ptr) ::IM::Login::IMLoginRes();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::Login::IMLoginRes::InitAsDefaultInstance();
}

void InitDefaultsIMLoginRes() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIMLoginResImpl);
}

void InitDefaultsIMLogoutReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::IM::Login::_IMLogoutReq_default_instance_;
    new (ptr) ::IM::Login::IMLogoutReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::Login::IMLogoutReq::InitAsDefaultInstance();
}

void InitDefaultsIMLogoutReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIMLogoutReqImpl);
}

void InitDefaultsIMLogoutRspImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::IM::Login::_IMLogoutRsp_default_instance_;
    new (ptr) ::IM::Login::IMLogoutRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::Login::IMLogoutRsp::InitAsDefaultInstance();
}

void InitDefaultsIMLogoutRsp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIMLogoutRspImpl);
}

void InitDefaultsIMKickUserImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::IM::Login::_IMKickUser_default_instance_;
    new (ptr) ::IM::Login::IMKickUser();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::Login::IMKickUser::InitAsDefaultInstance();
}

void InitDefaultsIMKickUser() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIMKickUserImpl);
}

void InitDefaultsIMDeviceTokenReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::IM::Login::_IMDeviceTokenReq_default_instance_;
    new (ptr) ::IM::Login::IMDeviceTokenReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::Login::IMDeviceTokenReq::InitAsDefaultInstance();
}

void InitDefaultsIMDeviceTokenReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIMDeviceTokenReqImpl);
}

void InitDefaultsIMDeviceTokenRspImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::IM::Login::_IMDeviceTokenRsp_default_instance_;
    new (ptr) ::IM::Login::IMDeviceTokenRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::Login::IMDeviceTokenRsp::InitAsDefaultInstance();
}

void InitDefaultsIMDeviceTokenRsp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIMDeviceTokenRspImpl);
}

void InitDefaultsIMKickPCClientReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::IM::Login::_IMKickPCClientReq_default_instance_;
    new (ptr) ::IM::Login::IMKickPCClientReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::Login::IMKickPCClientReq::InitAsDefaultInstance();
}

void InitDefaultsIMKickPCClientReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIMKickPCClientReqImpl);
}

void InitDefaultsIMKickPCClientRspImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::IM::Login::_IMKickPCClientRsp_default_instance_;
    new (ptr) ::IM::Login::IMKickPCClientRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::Login::IMKickPCClientRsp::InitAsDefaultInstance();
}

void InitDefaultsIMKickPCClientRsp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIMKickPCClientRspImpl);
}

void InitDefaultsIMPushShieldReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::IM::Login::_IMPushShieldReq_default_instance_;
    new (ptr) ::IM::Login::IMPushShieldReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::Login::IMPushShieldReq::InitAsDefaultInstance();
}

void InitDefaultsIMPushShieldReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIMPushShieldReqImpl);
}

void InitDefaultsIMPushShieldRspImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::IM::Login::_IMPushShieldRsp_default_instance_;
    new (ptr) ::IM::Login::IMPushShieldRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::Login::IMPushShieldRsp::InitAsDefaultInstance();
}

void InitDefaultsIMPushShieldRsp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIMPushShieldRspImpl);
}

void InitDefaultsIMQueryPushShieldReqImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::IM::Login::_IMQueryPushShieldReq_default_instance_;
    new (ptr) ::IM::Login::IMQueryPushShieldReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::Login::IMQueryPushShieldReq::InitAsDefaultInstance();
}

void InitDefaultsIMQueryPushShieldReq() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIMQueryPushShieldReqImpl);
}

void InitDefaultsIMQueryPushShieldRspImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::IM::Login::_IMQueryPushShieldRsp_default_instance_;
    new (ptr) ::IM::Login::IMQueryPushShieldRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::IM::Login::IMQueryPushShieldRsp::InitAsDefaultInstance();
}

void InitDefaultsIMQueryPushShieldRsp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIMQueryPushShieldRspImpl);
}

::google::protobuf::Metadata file_level_metadata[15];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Login::IMMsgServReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Login::IMMsgServRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Login::IMMsgServRsp, result_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Login::IMMsgServRsp, prior_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Login::IMMsgServRsp, backip_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Login::IMMsgServRsp, port_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Login::IMLoginReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Login::IMLoginReq, user_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Login::IMLoginReq, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Login::IMLoginReq, online_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Login::IMLoginReq, client_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Login::IMLoginReq, client_version_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Login::IMLoginRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Login::IMLoginRes, server_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Login::IMLoginRes, result_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Login::IMLoginRes, result_string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Login::IMLoginRes, online_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Login::IMLoginRes, user_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Login::IMLogoutReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Login::IMLogoutRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Login::IMLogoutRsp, result_code_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Login::IMKickUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Login::IMKickUser, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Login::IMKickUser, kick_reason_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Login::IMDeviceTokenReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Login::IMDeviceTokenReq, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Login::IMDeviceTokenReq, device_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Login::IMDeviceTokenReq, client_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Login::IMDeviceTokenReq, attach_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Login::IMDeviceTokenRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Login::IMDeviceTokenRsp, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Login::IMDeviceTokenRsp, attach_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Login::IMKickPCClientReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Login::IMKickPCClientReq, user_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Login::IMKickPCClientRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Login::IMKickPCClientRsp, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Login::IMKickPCClientRsp, result_code_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Login::IMPushShieldReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Login::IMPushShieldReq, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Login::IMPushShieldReq, shield_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Login::IMPushShieldReq, attach_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Login::IMPushShieldRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Login::IMPushShieldRsp, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Login::IMPushShieldRsp, result_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Login::IMPushShieldRsp, shield_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Login::IMPushShieldRsp, attach_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Login::IMQueryPushShieldReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Login::IMQueryPushShieldReq, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Login::IMQueryPushShieldReq, attach_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Login::IMQueryPushShieldRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Login::IMQueryPushShieldRsp, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Login::IMQueryPushShieldRsp, result_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Login::IMQueryPushShieldRsp, shield_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::IM::Login::IMQueryPushShieldRsp, attach_data_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::IM::Login::IMMsgServReq)},
  { 5, -1, sizeof(::IM::Login::IMMsgServRsp)},
  { 14, -1, sizeof(::IM::Login::IMLoginReq)},
  { 24, -1, sizeof(::IM::Login::IMLoginRes)},
  { 34, -1, sizeof(::IM::Login::IMLogoutReq)},
  { 39, -1, sizeof(::IM::Login::IMLogoutRsp)},
  { 45, -1, sizeof(::IM::Login::IMKickUser)},
  { 52, -1, sizeof(::IM::Login::IMDeviceTokenReq)},
  { 61, -1, sizeof(::IM::Login::IMDeviceTokenRsp)},
  { 68, -1, sizeof(::IM::Login::IMKickPCClientReq)},
  { 74, -1, sizeof(::IM::Login::IMKickPCClientRsp)},
  { 81, -1, sizeof(::IM::Login::IMPushShieldReq)},
  { 89, -1, sizeof(::IM::Login::IMPushShieldRsp)},
  { 98, -1, sizeof(::IM::Login::IMQueryPushShieldReq)},
  { 105, -1, sizeof(::IM::Login::IMQueryPushShieldRsp)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::IM::Login::_IMMsgServReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::IM::Login::_IMMsgServRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::IM::Login::_IMLoginReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::IM::Login::_IMLoginRes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::IM::Login::_IMLogoutReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::IM::Login::_IMLogoutRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::IM::Login::_IMKickUser_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::IM::Login::_IMDeviceTokenReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::IM::Login::_IMDeviceTokenRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::IM::Login::_IMKickPCClientReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::IM::Login::_IMKickPCClientRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::IM::Login::_IMPushShieldReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::IM::Login::_IMPushShieldRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::IM::Login::_IMQueryPushShieldReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::IM::Login::_IMQueryPushShieldRsp_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "IM.Login.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 15);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016IM.Login.proto\022\010IM.Login\032\023IM.BaseDefin"
      "e.proto\"\016\n\014IMMsgServReq\"q\n\014IMMsgServRsp\022"
      ".\n\013result_code\030\001 \001(\0162\031.IM.BaseDefine.Res"
      "ultType\022\020\n\010prior_ip\030\002 \001(\t\022\021\n\tbackip_ip\030\003"
      " \001(\t\022\014\n\004port\030\004 \001(\r\"\255\001\n\nIMLoginReq\022\021\n\tuse"
      "r_name\030\001 \001(\t\022\020\n\010password\030\002 \001(\t\0222\n\ronline"
      "_status\030\003 \001(\0162\033.IM.BaseDefine.UserStatTy"
      "pe\022.\n\013client_type\030\004 \001(\0162\031.IM.BaseDefine."
      "ClientType\022\026\n\016client_version\030\005 \001(\t\"\310\001\n\nI"
      "MLoginRes\022\023\n\013server_time\030\001 \001(\r\022.\n\013result"
      "_code\030\002 \001(\0162\031.IM.BaseDefine.ResultType\022\025"
      "\n\rresult_string\030\003 \001(\t\0222\n\ronline_status\030\004"
      " \001(\0162\033.IM.BaseDefine.UserStatType\022*\n\tuse"
      "r_info\030\005 \001(\0132\027.IM.BaseDefine.UserInfo\"\r\n"
      "\013IMLogoutReq\"\"\n\013IMLogoutRsp\022\023\n\013result_co"
      "de\030\001 \001(\r\"Q\n\nIMKickUser\022\017\n\007user_id\030\001 \001(\r\022"
      "2\n\013kick_reason\030\002 \001(\0162\035.IM.BaseDefine.Kic"
      "kReasonType\"~\n\020IMDeviceTokenReq\022\017\n\007user_"
      "id\030\001 \001(\r\022\024\n\014device_token\030\002 \001(\t\022.\n\013client"
      "_type\030\003 \001(\0162\031.IM.BaseDefine.ClientType\022\023"
      "\n\013attach_data\030\024 \001(\014\"8\n\020IMDeviceTokenRsp\022"
      "\017\n\007user_id\030\001 \001(\r\022\023\n\013attach_data\030\024 \001(\014\"$\n"
      "\021IMKickPCClientReq\022\017\n\007user_id\030\001 \001(\r\"9\n\021I"
      "MKickPCClientRsp\022\017\n\007user_id\030\001 \001(\r\022\023\n\013res"
      "ult_code\030\002 \001(\r\"N\n\017IMPushShieldReq\022\017\n\007use"
      "r_id\030\001 \001(\r\022\025\n\rshield_status\030\002 \001(\r\022\023\n\013att"
      "ach_data\030\024 \001(\014\"c\n\017IMPushShieldRsp\022\017\n\007use"
      "r_id\030\001 \001(\r\022\023\n\013result_code\030\002 \001(\r\022\025\n\rshiel"
      "d_status\030\003 \001(\r\022\023\n\013attach_data\030\024 \001(\014\"<\n\024I"
      "MQueryPushShieldReq\022\017\n\007user_id\030\001 \001(\r\022\023\n\013"
      "attach_data\030\024 \001(\014\"h\n\024IMQueryPushShieldRs"
      "p\022\017\n\007user_id\030\001 \001(\r\022\023\n\013result_code\030\002 \001(\r\022"
      "\025\n\rshield_status\030\003 \001(\r\022\023\n\013attach_data\030\024 "
      "\001(\014B\031\n\027com.mogujie.tt.protobufb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1358);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "IM.Login.proto", &protobuf_RegisterTypes);
  ::protobuf_IM_2eBaseDefine_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_IM_2eLogin_2eproto
namespace IM {
namespace Login {

// ===================================================================

void IMMsgServReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMMsgServReq::IMMsgServReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IM_2eLogin_2eproto::InitDefaultsIMMsgServReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Login.IMMsgServReq)
}
IMMsgServReq::IMMsgServReq(const IMMsgServReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IM.Login.IMMsgServReq)
}

void IMMsgServReq::SharedCtor() {
  _cached_size_ = 0;
}

IMMsgServReq::~IMMsgServReq() {
  // @@protoc_insertion_point(destructor:IM.Login.IMMsgServReq)
  SharedDtor();
}

void IMMsgServReq::SharedDtor() {
}

void IMMsgServReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMMsgServReq::descriptor() {
  ::protobuf_IM_2eLogin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eLogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IMMsgServReq& IMMsgServReq::default_instance() {
  ::protobuf_IM_2eLogin_2eproto::InitDefaultsIMMsgServReq();
  return *internal_default_instance();
}

IMMsgServReq* IMMsgServReq::New(::google::protobuf::Arena* arena) const {
  IMMsgServReq* n = new IMMsgServReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMMsgServReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Login.IMMsgServReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool IMMsgServReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Login.IMMsgServReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Login.IMMsgServReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Login.IMMsgServReq)
  return false;
#undef DO_
}

void IMMsgServReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Login.IMMsgServReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:IM.Login.IMMsgServReq)
}

::google::protobuf::uint8* IMMsgServReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:IM.Login.IMMsgServReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Login.IMMsgServReq)
  return target;
}

size_t IMMsgServReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Login.IMMsgServReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMMsgServReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IM.Login.IMMsgServReq)
  GOOGLE_DCHECK_NE(&from, this);
  const IMMsgServReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IMMsgServReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IM.Login.IMMsgServReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IM.Login.IMMsgServReq)
    MergeFrom(*source);
  }
}

void IMMsgServReq::MergeFrom(const IMMsgServReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Login.IMMsgServReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void IMMsgServReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IM.Login.IMMsgServReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMMsgServReq::CopyFrom(const IMMsgServReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Login.IMMsgServReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMMsgServReq::IsInitialized() const {
  return true;
}

void IMMsgServReq::Swap(IMMsgServReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMMsgServReq::InternalSwap(IMMsgServReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IMMsgServReq::GetMetadata() const {
  protobuf_IM_2eLogin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eLogin_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IMMsgServRsp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMMsgServRsp::kResultCodeFieldNumber;
const int IMMsgServRsp::kPriorIpFieldNumber;
const int IMMsgServRsp::kBackipIpFieldNumber;
const int IMMsgServRsp::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMMsgServRsp::IMMsgServRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IM_2eLogin_2eproto::InitDefaultsIMMsgServRsp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Login.IMMsgServRsp)
}
IMMsgServRsp::IMMsgServRsp(const IMMsgServRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  prior_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.prior_ip().size() > 0) {
    prior_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prior_ip_);
  }
  backip_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.backip_ip().size() > 0) {
    backip_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.backip_ip_);
  }
  ::memcpy(&result_code_, &from.result_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&result_code_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:IM.Login.IMMsgServRsp)
}

void IMMsgServRsp::SharedCtor() {
  prior_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  backip_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&result_code_)) + sizeof(port_));
  _cached_size_ = 0;
}

IMMsgServRsp::~IMMsgServRsp() {
  // @@protoc_insertion_point(destructor:IM.Login.IMMsgServRsp)
  SharedDtor();
}

void IMMsgServRsp::SharedDtor() {
  prior_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  backip_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IMMsgServRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMMsgServRsp::descriptor() {
  ::protobuf_IM_2eLogin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eLogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IMMsgServRsp& IMMsgServRsp::default_instance() {
  ::protobuf_IM_2eLogin_2eproto::InitDefaultsIMMsgServRsp();
  return *internal_default_instance();
}

IMMsgServRsp* IMMsgServRsp::New(::google::protobuf::Arena* arena) const {
  IMMsgServRsp* n = new IMMsgServRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMMsgServRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Login.IMMsgServRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prior_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  backip_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&result_code_)) + sizeof(port_));
  _internal_metadata_.Clear();
}

bool IMMsgServRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Login.IMMsgServRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .IM.BaseDefine.ResultType result_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result_code(static_cast< ::IM::BaseDefine::ResultType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string prior_ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prior_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->prior_ip().data(), static_cast<int>(this->prior_ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.Login.IMMsgServRsp.prior_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string backip_ip = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_backip_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->backip_ip().data(), static_cast<int>(this->backip_ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.Login.IMMsgServRsp.backip_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Login.IMMsgServRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Login.IMMsgServRsp)
  return false;
#undef DO_
}

void IMMsgServRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Login.IMMsgServRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IM.BaseDefine.ResultType result_code = 1;
  if (this->result_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result_code(), output);
  }

  // string prior_ip = 2;
  if (this->prior_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prior_ip().data(), static_cast<int>(this->prior_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Login.IMMsgServRsp.prior_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->prior_ip(), output);
  }

  // string backip_ip = 3;
  if (this->backip_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->backip_ip().data(), static_cast<int>(this->backip_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Login.IMMsgServRsp.backip_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->backip_ip(), output);
  }

  // uint32 port = 4;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->port(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:IM.Login.IMMsgServRsp)
}

::google::protobuf::uint8* IMMsgServRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:IM.Login.IMMsgServRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IM.BaseDefine.ResultType result_code = 1;
  if (this->result_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result_code(), target);
  }

  // string prior_ip = 2;
  if (this->prior_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->prior_ip().data(), static_cast<int>(this->prior_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Login.IMMsgServRsp.prior_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->prior_ip(), target);
  }

  // string backip_ip = 3;
  if (this->backip_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->backip_ip().data(), static_cast<int>(this->backip_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Login.IMMsgServRsp.backip_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->backip_ip(), target);
  }

  // uint32 port = 4;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->port(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Login.IMMsgServRsp)
  return target;
}

size_t IMMsgServRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Login.IMMsgServRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string prior_ip = 2;
  if (this->prior_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->prior_ip());
  }

  // string backip_ip = 3;
  if (this->backip_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->backip_ip());
  }

  // .IM.BaseDefine.ResultType result_code = 1;
  if (this->result_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result_code());
  }

  // uint32 port = 4;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMMsgServRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IM.Login.IMMsgServRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const IMMsgServRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IMMsgServRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IM.Login.IMMsgServRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IM.Login.IMMsgServRsp)
    MergeFrom(*source);
  }
}

void IMMsgServRsp::MergeFrom(const IMMsgServRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Login.IMMsgServRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.prior_ip().size() > 0) {

    prior_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prior_ip_);
  }
  if (from.backip_ip().size() > 0) {

    backip_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.backip_ip_);
  }
  if (from.result_code() != 0) {
    set_result_code(from.result_code());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void IMMsgServRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IM.Login.IMMsgServRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMMsgServRsp::CopyFrom(const IMMsgServRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Login.IMMsgServRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMMsgServRsp::IsInitialized() const {
  return true;
}

void IMMsgServRsp::Swap(IMMsgServRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMMsgServRsp::InternalSwap(IMMsgServRsp* other) {
  using std::swap;
  prior_ip_.Swap(&other->prior_ip_);
  backip_ip_.Swap(&other->backip_ip_);
  swap(result_code_, other->result_code_);
  swap(port_, other->port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IMMsgServRsp::GetMetadata() const {
  protobuf_IM_2eLogin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eLogin_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IMLoginReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMLoginReq::kUserNameFieldNumber;
const int IMLoginReq::kPasswordFieldNumber;
const int IMLoginReq::kOnlineStatusFieldNumber;
const int IMLoginReq::kClientTypeFieldNumber;
const int IMLoginReq::kClientVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMLoginReq::IMLoginReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IM_2eLogin_2eproto::InitDefaultsIMLoginReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Login.IMLoginReq)
}
IMLoginReq::IMLoginReq(const IMLoginReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_name().size() > 0) {
    user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.password().size() > 0) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  client_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client_version().size() > 0) {
    client_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_version_);
  }
  ::memcpy(&online_status_, &from.online_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_type_) -
    reinterpret_cast<char*>(&online_status_)) + sizeof(client_type_));
  // @@protoc_insertion_point(copy_constructor:IM.Login.IMLoginReq)
}

void IMLoginReq::SharedCtor() {
  user_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&online_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_type_) -
      reinterpret_cast<char*>(&online_status_)) + sizeof(client_type_));
  _cached_size_ = 0;
}

IMLoginReq::~IMLoginReq() {
  // @@protoc_insertion_point(destructor:IM.Login.IMLoginReq)
  SharedDtor();
}

void IMLoginReq::SharedDtor() {
  user_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IMLoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMLoginReq::descriptor() {
  ::protobuf_IM_2eLogin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eLogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IMLoginReq& IMLoginReq::default_instance() {
  ::protobuf_IM_2eLogin_2eproto::InitDefaultsIMLoginReq();
  return *internal_default_instance();
}

IMLoginReq* IMLoginReq::New(::google::protobuf::Arena* arena) const {
  IMLoginReq* n = new IMLoginReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMLoginReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Login.IMLoginReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&online_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_type_) -
      reinterpret_cast<char*>(&online_status_)) + sizeof(client_type_));
  _internal_metadata_.Clear();
}

bool IMLoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Login.IMLoginReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string user_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_name().data(), static_cast<int>(this->user_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.Login.IMLoginReq.user_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string password = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.Login.IMLoginReq.password"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IM.BaseDefine.UserStatType online_status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_online_status(static_cast< ::IM::BaseDefine::UserStatType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IM.BaseDefine.ClientType client_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_client_type(static_cast< ::IM::BaseDefine::ClientType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string client_version = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_version().data(), static_cast<int>(this->client_version().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.Login.IMLoginReq.client_version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Login.IMLoginReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Login.IMLoginReq)
  return false;
#undef DO_
}

void IMLoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Login.IMLoginReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_name = 1;
  if (this->user_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_name().data(), static_cast<int>(this->user_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Login.IMLoginReq.user_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_name(), output);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Login.IMLoginReq.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // .IM.BaseDefine.UserStatType online_status = 3;
  if (this->online_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->online_status(), output);
  }

  // .IM.BaseDefine.ClientType client_type = 4;
  if (this->client_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->client_type(), output);
  }

  // string client_version = 5;
  if (this->client_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_version().data(), static_cast<int>(this->client_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Login.IMLoginReq.client_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->client_version(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:IM.Login.IMLoginReq)
}

::google::protobuf::uint8* IMLoginReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:IM.Login.IMLoginReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_name = 1;
  if (this->user_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_name().data(), static_cast<int>(this->user_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Login.IMLoginReq.user_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_name(), target);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Login.IMLoginReq.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // .IM.BaseDefine.UserStatType online_status = 3;
  if (this->online_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->online_status(), target);
  }

  // .IM.BaseDefine.ClientType client_type = 4;
  if (this->client_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->client_type(), target);
  }

  // string client_version = 5;
  if (this->client_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_version().data(), static_cast<int>(this->client_version().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Login.IMLoginReq.client_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->client_version(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Login.IMLoginReq)
  return target;
}

size_t IMLoginReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Login.IMLoginReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string user_name = 1;
  if (this->user_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_name());
  }

  // string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  // string client_version = 5;
  if (this->client_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_version());
  }

  // .IM.BaseDefine.UserStatType online_status = 3;
  if (this->online_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->online_status());
  }

  // .IM.BaseDefine.ClientType client_type = 4;
  if (this->client_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->client_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMLoginReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IM.Login.IMLoginReq)
  GOOGLE_DCHECK_NE(&from, this);
  const IMLoginReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IMLoginReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IM.Login.IMLoginReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IM.Login.IMLoginReq)
    MergeFrom(*source);
  }
}

void IMLoginReq::MergeFrom(const IMLoginReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Login.IMLoginReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_name().size() > 0) {

    user_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_name_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.client_version().size() > 0) {

    client_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_version_);
  }
  if (from.online_status() != 0) {
    set_online_status(from.online_status());
  }
  if (from.client_type() != 0) {
    set_client_type(from.client_type());
  }
}

void IMLoginReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IM.Login.IMLoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMLoginReq::CopyFrom(const IMLoginReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Login.IMLoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMLoginReq::IsInitialized() const {
  return true;
}

void IMLoginReq::Swap(IMLoginReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMLoginReq::InternalSwap(IMLoginReq* other) {
  using std::swap;
  user_name_.Swap(&other->user_name_);
  password_.Swap(&other->password_);
  client_version_.Swap(&other->client_version_);
  swap(online_status_, other->online_status_);
  swap(client_type_, other->client_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IMLoginReq::GetMetadata() const {
  protobuf_IM_2eLogin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eLogin_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IMLoginRes::InitAsDefaultInstance() {
  ::IM::Login::_IMLoginRes_default_instance_._instance.get_mutable()->user_info_ = const_cast< ::IM::BaseDefine::UserInfo*>(
      ::IM::BaseDefine::UserInfo::internal_default_instance());
}
void IMLoginRes::clear_user_info() {
  if (GetArenaNoVirtual() == NULL && user_info_ != NULL) {
    delete user_info_;
  }
  user_info_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMLoginRes::kServerTimeFieldNumber;
const int IMLoginRes::kResultCodeFieldNumber;
const int IMLoginRes::kResultStringFieldNumber;
const int IMLoginRes::kOnlineStatusFieldNumber;
const int IMLoginRes::kUserInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMLoginRes::IMLoginRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IM_2eLogin_2eproto::InitDefaultsIMLoginRes();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Login.IMLoginRes)
}
IMLoginRes::IMLoginRes(const IMLoginRes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.result_string().size() > 0) {
    result_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.result_string_);
  }
  if (from.has_user_info()) {
    user_info_ = new ::IM::BaseDefine::UserInfo(*from.user_info_);
  } else {
    user_info_ = NULL;
  }
  ::memcpy(&server_time_, &from.server_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&online_status_) -
    reinterpret_cast<char*>(&server_time_)) + sizeof(online_status_));
  // @@protoc_insertion_point(copy_constructor:IM.Login.IMLoginRes)
}

void IMLoginRes::SharedCtor() {
  result_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&online_status_) -
      reinterpret_cast<char*>(&user_info_)) + sizeof(online_status_));
  _cached_size_ = 0;
}

IMLoginRes::~IMLoginRes() {
  // @@protoc_insertion_point(destructor:IM.Login.IMLoginRes)
  SharedDtor();
}

void IMLoginRes::SharedDtor() {
  result_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_info_;
}

void IMLoginRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMLoginRes::descriptor() {
  ::protobuf_IM_2eLogin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eLogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IMLoginRes& IMLoginRes::default_instance() {
  ::protobuf_IM_2eLogin_2eproto::InitDefaultsIMLoginRes();
  return *internal_default_instance();
}

IMLoginRes* IMLoginRes::New(::google::protobuf::Arena* arena) const {
  IMLoginRes* n = new IMLoginRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMLoginRes::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Login.IMLoginRes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && user_info_ != NULL) {
    delete user_info_;
  }
  user_info_ = NULL;
  ::memset(&server_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&online_status_) -
      reinterpret_cast<char*>(&server_time_)) + sizeof(online_status_));
  _internal_metadata_.Clear();
}

bool IMLoginRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Login.IMLoginRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 server_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IM.BaseDefine.ResultType result_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result_code(static_cast< ::IM::BaseDefine::ResultType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string result_string = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result_string()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->result_string().data(), static_cast<int>(this->result_string().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.Login.IMLoginRes.result_string"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IM.BaseDefine.UserStatType online_status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_online_status(static_cast< ::IM::BaseDefine::UserStatType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IM.BaseDefine.UserInfo user_info = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_user_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Login.IMLoginRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Login.IMLoginRes)
  return false;
#undef DO_
}

void IMLoginRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Login.IMLoginRes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 server_time = 1;
  if (this->server_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_time(), output);
  }

  // .IM.BaseDefine.ResultType result_code = 2;
  if (this->result_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result_code(), output);
  }

  // string result_string = 3;
  if (this->result_string().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->result_string().data(), static_cast<int>(this->result_string().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Login.IMLoginRes.result_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->result_string(), output);
  }

  // .IM.BaseDefine.UserStatType online_status = 4;
  if (this->online_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->online_status(), output);
  }

  // .IM.BaseDefine.UserInfo user_info = 5;
  if (this->has_user_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->user_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:IM.Login.IMLoginRes)
}

::google::protobuf::uint8* IMLoginRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:IM.Login.IMLoginRes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 server_time = 1;
  if (this->server_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_time(), target);
  }

  // .IM.BaseDefine.ResultType result_code = 2;
  if (this->result_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result_code(), target);
  }

  // string result_string = 3;
  if (this->result_string().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->result_string().data(), static_cast<int>(this->result_string().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Login.IMLoginRes.result_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->result_string(), target);
  }

  // .IM.BaseDefine.UserStatType online_status = 4;
  if (this->online_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->online_status(), target);
  }

  // .IM.BaseDefine.UserInfo user_info = 5;
  if (this->has_user_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->user_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Login.IMLoginRes)
  return target;
}

size_t IMLoginRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Login.IMLoginRes)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string result_string = 3;
  if (this->result_string().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->result_string());
  }

  // .IM.BaseDefine.UserInfo user_info = 5;
  if (this->has_user_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->user_info_);
  }

  // uint32 server_time = 1;
  if (this->server_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->server_time());
  }

  // .IM.BaseDefine.ResultType result_code = 2;
  if (this->result_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result_code());
  }

  // .IM.BaseDefine.UserStatType online_status = 4;
  if (this->online_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->online_status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMLoginRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IM.Login.IMLoginRes)
  GOOGLE_DCHECK_NE(&from, this);
  const IMLoginRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IMLoginRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IM.Login.IMLoginRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IM.Login.IMLoginRes)
    MergeFrom(*source);
  }
}

void IMLoginRes::MergeFrom(const IMLoginRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Login.IMLoginRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result_string().size() > 0) {

    result_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.result_string_);
  }
  if (from.has_user_info()) {
    mutable_user_info()->::IM::BaseDefine::UserInfo::MergeFrom(from.user_info());
  }
  if (from.server_time() != 0) {
    set_server_time(from.server_time());
  }
  if (from.result_code() != 0) {
    set_result_code(from.result_code());
  }
  if (from.online_status() != 0) {
    set_online_status(from.online_status());
  }
}

void IMLoginRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IM.Login.IMLoginRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMLoginRes::CopyFrom(const IMLoginRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Login.IMLoginRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMLoginRes::IsInitialized() const {
  return true;
}

void IMLoginRes::Swap(IMLoginRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMLoginRes::InternalSwap(IMLoginRes* other) {
  using std::swap;
  result_string_.Swap(&other->result_string_);
  swap(user_info_, other->user_info_);
  swap(server_time_, other->server_time_);
  swap(result_code_, other->result_code_);
  swap(online_status_, other->online_status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IMLoginRes::GetMetadata() const {
  protobuf_IM_2eLogin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eLogin_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IMLogoutReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMLogoutReq::IMLogoutReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IM_2eLogin_2eproto::InitDefaultsIMLogoutReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Login.IMLogoutReq)
}
IMLogoutReq::IMLogoutReq(const IMLogoutReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IM.Login.IMLogoutReq)
}

void IMLogoutReq::SharedCtor() {
  _cached_size_ = 0;
}

IMLogoutReq::~IMLogoutReq() {
  // @@protoc_insertion_point(destructor:IM.Login.IMLogoutReq)
  SharedDtor();
}

void IMLogoutReq::SharedDtor() {
}

void IMLogoutReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMLogoutReq::descriptor() {
  ::protobuf_IM_2eLogin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eLogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IMLogoutReq& IMLogoutReq::default_instance() {
  ::protobuf_IM_2eLogin_2eproto::InitDefaultsIMLogoutReq();
  return *internal_default_instance();
}

IMLogoutReq* IMLogoutReq::New(::google::protobuf::Arena* arena) const {
  IMLogoutReq* n = new IMLogoutReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMLogoutReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Login.IMLogoutReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool IMLogoutReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Login.IMLogoutReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Login.IMLogoutReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Login.IMLogoutReq)
  return false;
#undef DO_
}

void IMLogoutReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Login.IMLogoutReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:IM.Login.IMLogoutReq)
}

::google::protobuf::uint8* IMLogoutReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:IM.Login.IMLogoutReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Login.IMLogoutReq)
  return target;
}

size_t IMLogoutReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Login.IMLogoutReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMLogoutReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IM.Login.IMLogoutReq)
  GOOGLE_DCHECK_NE(&from, this);
  const IMLogoutReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IMLogoutReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IM.Login.IMLogoutReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IM.Login.IMLogoutReq)
    MergeFrom(*source);
  }
}

void IMLogoutReq::MergeFrom(const IMLogoutReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Login.IMLogoutReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void IMLogoutReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IM.Login.IMLogoutReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMLogoutReq::CopyFrom(const IMLogoutReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Login.IMLogoutReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMLogoutReq::IsInitialized() const {
  return true;
}

void IMLogoutReq::Swap(IMLogoutReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMLogoutReq::InternalSwap(IMLogoutReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IMLogoutReq::GetMetadata() const {
  protobuf_IM_2eLogin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eLogin_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IMLogoutRsp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMLogoutRsp::kResultCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMLogoutRsp::IMLogoutRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IM_2eLogin_2eproto::InitDefaultsIMLogoutRsp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Login.IMLogoutRsp)
}
IMLogoutRsp::IMLogoutRsp(const IMLogoutRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_code_ = from.result_code_;
  // @@protoc_insertion_point(copy_constructor:IM.Login.IMLogoutRsp)
}

void IMLogoutRsp::SharedCtor() {
  result_code_ = 0u;
  _cached_size_ = 0;
}

IMLogoutRsp::~IMLogoutRsp() {
  // @@protoc_insertion_point(destructor:IM.Login.IMLogoutRsp)
  SharedDtor();
}

void IMLogoutRsp::SharedDtor() {
}

void IMLogoutRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMLogoutRsp::descriptor() {
  ::protobuf_IM_2eLogin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eLogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IMLogoutRsp& IMLogoutRsp::default_instance() {
  ::protobuf_IM_2eLogin_2eproto::InitDefaultsIMLogoutRsp();
  return *internal_default_instance();
}

IMLogoutRsp* IMLogoutRsp::New(::google::protobuf::Arena* arena) const {
  IMLogoutRsp* n = new IMLogoutRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMLogoutRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Login.IMLogoutRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_code_ = 0u;
  _internal_metadata_.Clear();
}

bool IMLogoutRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Login.IMLogoutRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 result_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Login.IMLogoutRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Login.IMLogoutRsp)
  return false;
#undef DO_
}

void IMLogoutRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Login.IMLogoutRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result_code = 1;
  if (this->result_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result_code(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:IM.Login.IMLogoutRsp)
}

::google::protobuf::uint8* IMLogoutRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:IM.Login.IMLogoutRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 result_code = 1;
  if (this->result_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result_code(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Login.IMLogoutRsp)
  return target;
}

size_t IMLogoutRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Login.IMLogoutRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 result_code = 1;
  if (this->result_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMLogoutRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IM.Login.IMLogoutRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const IMLogoutRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IMLogoutRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IM.Login.IMLogoutRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IM.Login.IMLogoutRsp)
    MergeFrom(*source);
  }
}

void IMLogoutRsp::MergeFrom(const IMLogoutRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Login.IMLogoutRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result_code() != 0) {
    set_result_code(from.result_code());
  }
}

void IMLogoutRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IM.Login.IMLogoutRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMLogoutRsp::CopyFrom(const IMLogoutRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Login.IMLogoutRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMLogoutRsp::IsInitialized() const {
  return true;
}

void IMLogoutRsp::Swap(IMLogoutRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMLogoutRsp::InternalSwap(IMLogoutRsp* other) {
  using std::swap;
  swap(result_code_, other->result_code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IMLogoutRsp::GetMetadata() const {
  protobuf_IM_2eLogin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eLogin_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IMKickUser::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMKickUser::kUserIdFieldNumber;
const int IMKickUser::kKickReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMKickUser::IMKickUser()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IM_2eLogin_2eproto::InitDefaultsIMKickUser();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Login.IMKickUser)
}
IMKickUser::IMKickUser(const IMKickUser& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&kick_reason_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(kick_reason_));
  // @@protoc_insertion_point(copy_constructor:IM.Login.IMKickUser)
}

void IMKickUser::SharedCtor() {
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kick_reason_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(kick_reason_));
  _cached_size_ = 0;
}

IMKickUser::~IMKickUser() {
  // @@protoc_insertion_point(destructor:IM.Login.IMKickUser)
  SharedDtor();
}

void IMKickUser::SharedDtor() {
}

void IMKickUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMKickUser::descriptor() {
  ::protobuf_IM_2eLogin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eLogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IMKickUser& IMKickUser::default_instance() {
  ::protobuf_IM_2eLogin_2eproto::InitDefaultsIMKickUser();
  return *internal_default_instance();
}

IMKickUser* IMKickUser::New(::google::protobuf::Arena* arena) const {
  IMKickUser* n = new IMKickUser;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMKickUser::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Login.IMKickUser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kick_reason_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(kick_reason_));
  _internal_metadata_.Clear();
}

bool IMKickUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Login.IMKickUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IM.BaseDefine.KickReasonType kick_reason = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_kick_reason(static_cast< ::IM::BaseDefine::KickReasonType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Login.IMKickUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Login.IMKickUser)
  return false;
#undef DO_
}

void IMKickUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Login.IMKickUser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // .IM.BaseDefine.KickReasonType kick_reason = 2;
  if (this->kick_reason() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->kick_reason(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:IM.Login.IMKickUser)
}

::google::protobuf::uint8* IMKickUser::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:IM.Login.IMKickUser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // .IM.BaseDefine.KickReasonType kick_reason = 2;
  if (this->kick_reason() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->kick_reason(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Login.IMKickUser)
  return target;
}

size_t IMKickUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Login.IMKickUser)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  // .IM.BaseDefine.KickReasonType kick_reason = 2;
  if (this->kick_reason() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->kick_reason());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMKickUser::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IM.Login.IMKickUser)
  GOOGLE_DCHECK_NE(&from, this);
  const IMKickUser* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IMKickUser>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IM.Login.IMKickUser)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IM.Login.IMKickUser)
    MergeFrom(*source);
  }
}

void IMKickUser::MergeFrom(const IMKickUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Login.IMKickUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.kick_reason() != 0) {
    set_kick_reason(from.kick_reason());
  }
}

void IMKickUser::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IM.Login.IMKickUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMKickUser::CopyFrom(const IMKickUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Login.IMKickUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMKickUser::IsInitialized() const {
  return true;
}

void IMKickUser::Swap(IMKickUser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMKickUser::InternalSwap(IMKickUser* other) {
  using std::swap;
  swap(user_id_, other->user_id_);
  swap(kick_reason_, other->kick_reason_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IMKickUser::GetMetadata() const {
  protobuf_IM_2eLogin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eLogin_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IMDeviceTokenReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMDeviceTokenReq::kUserIdFieldNumber;
const int IMDeviceTokenReq::kDeviceTokenFieldNumber;
const int IMDeviceTokenReq::kClientTypeFieldNumber;
const int IMDeviceTokenReq::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMDeviceTokenReq::IMDeviceTokenReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IM_2eLogin_2eproto::InitDefaultsIMDeviceTokenReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Login.IMDeviceTokenReq)
}
IMDeviceTokenReq::IMDeviceTokenReq(const IMDeviceTokenReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.device_token().size() > 0) {
    device_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_token_);
  }
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.attach_data().size() > 0) {
    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_type_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(client_type_));
  // @@protoc_insertion_point(copy_constructor:IM.Login.IMDeviceTokenReq)
}

void IMDeviceTokenReq::SharedCtor() {
  device_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_type_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(client_type_));
  _cached_size_ = 0;
}

IMDeviceTokenReq::~IMDeviceTokenReq() {
  // @@protoc_insertion_point(destructor:IM.Login.IMDeviceTokenReq)
  SharedDtor();
}

void IMDeviceTokenReq::SharedDtor() {
  device_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IMDeviceTokenReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMDeviceTokenReq::descriptor() {
  ::protobuf_IM_2eLogin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eLogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IMDeviceTokenReq& IMDeviceTokenReq::default_instance() {
  ::protobuf_IM_2eLogin_2eproto::InitDefaultsIMDeviceTokenReq();
  return *internal_default_instance();
}

IMDeviceTokenReq* IMDeviceTokenReq::New(::google::protobuf::Arena* arena) const {
  IMDeviceTokenReq* n = new IMDeviceTokenReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMDeviceTokenReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Login.IMDeviceTokenReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_type_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(client_type_));
  _internal_metadata_.Clear();
}

bool IMDeviceTokenReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Login.IMDeviceTokenReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string device_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device_token().data(), static_cast<int>(this->device_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "IM.Login.IMDeviceTokenReq.device_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .IM.BaseDefine.ClientType client_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_client_type(static_cast< ::IM::BaseDefine::ClientType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes attach_data = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Login.IMDeviceTokenReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Login.IMDeviceTokenReq)
  return false;
#undef DO_
}

void IMDeviceTokenReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Login.IMDeviceTokenReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // string device_token = 2;
  if (this->device_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_token().data(), static_cast<int>(this->device_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Login.IMDeviceTokenReq.device_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->device_token(), output);
  }

  // .IM.BaseDefine.ClientType client_type = 3;
  if (this->client_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->client_type(), output);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:IM.Login.IMDeviceTokenReq)
}

::google::protobuf::uint8* IMDeviceTokenReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:IM.Login.IMDeviceTokenReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // string device_token = 2;
  if (this->device_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_token().data(), static_cast<int>(this->device_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "IM.Login.IMDeviceTokenReq.device_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->device_token(), target);
  }

  // .IM.BaseDefine.ClientType client_type = 3;
  if (this->client_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->client_type(), target);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->attach_data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Login.IMDeviceTokenReq)
  return target;
}

size_t IMDeviceTokenReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Login.IMDeviceTokenReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string device_token = 2;
  if (this->device_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device_token());
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  // .IM.BaseDefine.ClientType client_type = 3;
  if (this->client_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->client_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMDeviceTokenReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IM.Login.IMDeviceTokenReq)
  GOOGLE_DCHECK_NE(&from, this);
  const IMDeviceTokenReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IMDeviceTokenReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IM.Login.IMDeviceTokenReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IM.Login.IMDeviceTokenReq)
    MergeFrom(*source);
  }
}

void IMDeviceTokenReq::MergeFrom(const IMDeviceTokenReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Login.IMDeviceTokenReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.device_token().size() > 0) {

    device_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_token_);
  }
  if (from.attach_data().size() > 0) {

    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.client_type() != 0) {
    set_client_type(from.client_type());
  }
}

void IMDeviceTokenReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IM.Login.IMDeviceTokenReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMDeviceTokenReq::CopyFrom(const IMDeviceTokenReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Login.IMDeviceTokenReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMDeviceTokenReq::IsInitialized() const {
  return true;
}

void IMDeviceTokenReq::Swap(IMDeviceTokenReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMDeviceTokenReq::InternalSwap(IMDeviceTokenReq* other) {
  using std::swap;
  device_token_.Swap(&other->device_token_);
  attach_data_.Swap(&other->attach_data_);
  swap(user_id_, other->user_id_);
  swap(client_type_, other->client_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IMDeviceTokenReq::GetMetadata() const {
  protobuf_IM_2eLogin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eLogin_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IMDeviceTokenRsp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMDeviceTokenRsp::kUserIdFieldNumber;
const int IMDeviceTokenRsp::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMDeviceTokenRsp::IMDeviceTokenRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IM_2eLogin_2eproto::InitDefaultsIMDeviceTokenRsp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Login.IMDeviceTokenRsp)
}
IMDeviceTokenRsp::IMDeviceTokenRsp(const IMDeviceTokenRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.attach_data().size() > 0) {
    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:IM.Login.IMDeviceTokenRsp)
}

void IMDeviceTokenRsp::SharedCtor() {
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0u;
  _cached_size_ = 0;
}

IMDeviceTokenRsp::~IMDeviceTokenRsp() {
  // @@protoc_insertion_point(destructor:IM.Login.IMDeviceTokenRsp)
  SharedDtor();
}

void IMDeviceTokenRsp::SharedDtor() {
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IMDeviceTokenRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMDeviceTokenRsp::descriptor() {
  ::protobuf_IM_2eLogin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eLogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IMDeviceTokenRsp& IMDeviceTokenRsp::default_instance() {
  ::protobuf_IM_2eLogin_2eproto::InitDefaultsIMDeviceTokenRsp();
  return *internal_default_instance();
}

IMDeviceTokenRsp* IMDeviceTokenRsp::New(::google::protobuf::Arena* arena) const {
  IMDeviceTokenRsp* n = new IMDeviceTokenRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMDeviceTokenRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Login.IMDeviceTokenRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0u;
  _internal_metadata_.Clear();
}

bool IMDeviceTokenRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Login.IMDeviceTokenRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes attach_data = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Login.IMDeviceTokenRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Login.IMDeviceTokenRsp)
  return false;
#undef DO_
}

void IMDeviceTokenRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Login.IMDeviceTokenRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:IM.Login.IMDeviceTokenRsp)
}

::google::protobuf::uint8* IMDeviceTokenRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:IM.Login.IMDeviceTokenRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->attach_data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Login.IMDeviceTokenRsp)
  return target;
}

size_t IMDeviceTokenRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Login.IMDeviceTokenRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMDeviceTokenRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IM.Login.IMDeviceTokenRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const IMDeviceTokenRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IMDeviceTokenRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IM.Login.IMDeviceTokenRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IM.Login.IMDeviceTokenRsp)
    MergeFrom(*source);
  }
}

void IMDeviceTokenRsp::MergeFrom(const IMDeviceTokenRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Login.IMDeviceTokenRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.attach_data().size() > 0) {

    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
}

void IMDeviceTokenRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IM.Login.IMDeviceTokenRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMDeviceTokenRsp::CopyFrom(const IMDeviceTokenRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Login.IMDeviceTokenRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMDeviceTokenRsp::IsInitialized() const {
  return true;
}

void IMDeviceTokenRsp::Swap(IMDeviceTokenRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMDeviceTokenRsp::InternalSwap(IMDeviceTokenRsp* other) {
  using std::swap;
  attach_data_.Swap(&other->attach_data_);
  swap(user_id_, other->user_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IMDeviceTokenRsp::GetMetadata() const {
  protobuf_IM_2eLogin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eLogin_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IMKickPCClientReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMKickPCClientReq::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMKickPCClientReq::IMKickPCClientReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IM_2eLogin_2eproto::InitDefaultsIMKickPCClientReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Login.IMKickPCClientReq)
}
IMKickPCClientReq::IMKickPCClientReq(const IMKickPCClientReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:IM.Login.IMKickPCClientReq)
}

void IMKickPCClientReq::SharedCtor() {
  user_id_ = 0u;
  _cached_size_ = 0;
}

IMKickPCClientReq::~IMKickPCClientReq() {
  // @@protoc_insertion_point(destructor:IM.Login.IMKickPCClientReq)
  SharedDtor();
}

void IMKickPCClientReq::SharedDtor() {
}

void IMKickPCClientReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMKickPCClientReq::descriptor() {
  ::protobuf_IM_2eLogin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eLogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IMKickPCClientReq& IMKickPCClientReq::default_instance() {
  ::protobuf_IM_2eLogin_2eproto::InitDefaultsIMKickPCClientReq();
  return *internal_default_instance();
}

IMKickPCClientReq* IMKickPCClientReq::New(::google::protobuf::Arena* arena) const {
  IMKickPCClientReq* n = new IMKickPCClientReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMKickPCClientReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Login.IMKickPCClientReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_ = 0u;
  _internal_metadata_.Clear();
}

bool IMKickPCClientReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Login.IMKickPCClientReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Login.IMKickPCClientReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Login.IMKickPCClientReq)
  return false;
#undef DO_
}

void IMKickPCClientReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Login.IMKickPCClientReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:IM.Login.IMKickPCClientReq)
}

::google::protobuf::uint8* IMKickPCClientReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:IM.Login.IMKickPCClientReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Login.IMKickPCClientReq)
  return target;
}

size_t IMKickPCClientReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Login.IMKickPCClientReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMKickPCClientReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IM.Login.IMKickPCClientReq)
  GOOGLE_DCHECK_NE(&from, this);
  const IMKickPCClientReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IMKickPCClientReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IM.Login.IMKickPCClientReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IM.Login.IMKickPCClientReq)
    MergeFrom(*source);
  }
}

void IMKickPCClientReq::MergeFrom(const IMKickPCClientReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Login.IMKickPCClientReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
}

void IMKickPCClientReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IM.Login.IMKickPCClientReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMKickPCClientReq::CopyFrom(const IMKickPCClientReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Login.IMKickPCClientReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMKickPCClientReq::IsInitialized() const {
  return true;
}

void IMKickPCClientReq::Swap(IMKickPCClientReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMKickPCClientReq::InternalSwap(IMKickPCClientReq* other) {
  using std::swap;
  swap(user_id_, other->user_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IMKickPCClientReq::GetMetadata() const {
  protobuf_IM_2eLogin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eLogin_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IMKickPCClientRsp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMKickPCClientRsp::kUserIdFieldNumber;
const int IMKickPCClientRsp::kResultCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMKickPCClientRsp::IMKickPCClientRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IM_2eLogin_2eproto::InitDefaultsIMKickPCClientRsp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Login.IMKickPCClientRsp)
}
IMKickPCClientRsp::IMKickPCClientRsp(const IMKickPCClientRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_code_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(result_code_));
  // @@protoc_insertion_point(copy_constructor:IM.Login.IMKickPCClientRsp)
}

void IMKickPCClientRsp::SharedCtor() {
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_code_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(result_code_));
  _cached_size_ = 0;
}

IMKickPCClientRsp::~IMKickPCClientRsp() {
  // @@protoc_insertion_point(destructor:IM.Login.IMKickPCClientRsp)
  SharedDtor();
}

void IMKickPCClientRsp::SharedDtor() {
}

void IMKickPCClientRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMKickPCClientRsp::descriptor() {
  ::protobuf_IM_2eLogin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eLogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IMKickPCClientRsp& IMKickPCClientRsp::default_instance() {
  ::protobuf_IM_2eLogin_2eproto::InitDefaultsIMKickPCClientRsp();
  return *internal_default_instance();
}

IMKickPCClientRsp* IMKickPCClientRsp::New(::google::protobuf::Arena* arena) const {
  IMKickPCClientRsp* n = new IMKickPCClientRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMKickPCClientRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Login.IMKickPCClientRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_code_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(result_code_));
  _internal_metadata_.Clear();
}

bool IMKickPCClientRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Login.IMKickPCClientRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 result_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Login.IMKickPCClientRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Login.IMKickPCClientRsp)
  return false;
#undef DO_
}

void IMKickPCClientRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Login.IMKickPCClientRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // uint32 result_code = 2;
  if (this->result_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result_code(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:IM.Login.IMKickPCClientRsp)
}

::google::protobuf::uint8* IMKickPCClientRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:IM.Login.IMKickPCClientRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // uint32 result_code = 2;
  if (this->result_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->result_code(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Login.IMKickPCClientRsp)
  return target;
}

size_t IMKickPCClientRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Login.IMKickPCClientRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  // uint32 result_code = 2;
  if (this->result_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMKickPCClientRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IM.Login.IMKickPCClientRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const IMKickPCClientRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IMKickPCClientRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IM.Login.IMKickPCClientRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IM.Login.IMKickPCClientRsp)
    MergeFrom(*source);
  }
}

void IMKickPCClientRsp::MergeFrom(const IMKickPCClientRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Login.IMKickPCClientRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.result_code() != 0) {
    set_result_code(from.result_code());
  }
}

void IMKickPCClientRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IM.Login.IMKickPCClientRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMKickPCClientRsp::CopyFrom(const IMKickPCClientRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Login.IMKickPCClientRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMKickPCClientRsp::IsInitialized() const {
  return true;
}

void IMKickPCClientRsp::Swap(IMKickPCClientRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMKickPCClientRsp::InternalSwap(IMKickPCClientRsp* other) {
  using std::swap;
  swap(user_id_, other->user_id_);
  swap(result_code_, other->result_code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IMKickPCClientRsp::GetMetadata() const {
  protobuf_IM_2eLogin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eLogin_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IMPushShieldReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMPushShieldReq::kUserIdFieldNumber;
const int IMPushShieldReq::kShieldStatusFieldNumber;
const int IMPushShieldReq::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMPushShieldReq::IMPushShieldReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IM_2eLogin_2eproto::InitDefaultsIMPushShieldReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Login.IMPushShieldReq)
}
IMPushShieldReq::IMPushShieldReq(const IMPushShieldReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.attach_data().size() > 0) {
    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&shield_status_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(shield_status_));
  // @@protoc_insertion_point(copy_constructor:IM.Login.IMPushShieldReq)
}

void IMPushShieldReq::SharedCtor() {
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shield_status_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(shield_status_));
  _cached_size_ = 0;
}

IMPushShieldReq::~IMPushShieldReq() {
  // @@protoc_insertion_point(destructor:IM.Login.IMPushShieldReq)
  SharedDtor();
}

void IMPushShieldReq::SharedDtor() {
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IMPushShieldReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMPushShieldReq::descriptor() {
  ::protobuf_IM_2eLogin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eLogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IMPushShieldReq& IMPushShieldReq::default_instance() {
  ::protobuf_IM_2eLogin_2eproto::InitDefaultsIMPushShieldReq();
  return *internal_default_instance();
}

IMPushShieldReq* IMPushShieldReq::New(::google::protobuf::Arena* arena) const {
  IMPushShieldReq* n = new IMPushShieldReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMPushShieldReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Login.IMPushShieldReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shield_status_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(shield_status_));
  _internal_metadata_.Clear();
}

bool IMPushShieldReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Login.IMPushShieldReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 shield_status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shield_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes attach_data = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Login.IMPushShieldReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Login.IMPushShieldReq)
  return false;
#undef DO_
}

void IMPushShieldReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Login.IMPushShieldReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // uint32 shield_status = 2;
  if (this->shield_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->shield_status(), output);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:IM.Login.IMPushShieldReq)
}

::google::protobuf::uint8* IMPushShieldReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:IM.Login.IMPushShieldReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // uint32 shield_status = 2;
  if (this->shield_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->shield_status(), target);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->attach_data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Login.IMPushShieldReq)
  return target;
}

size_t IMPushShieldReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Login.IMPushShieldReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  // uint32 shield_status = 2;
  if (this->shield_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->shield_status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMPushShieldReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IM.Login.IMPushShieldReq)
  GOOGLE_DCHECK_NE(&from, this);
  const IMPushShieldReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IMPushShieldReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IM.Login.IMPushShieldReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IM.Login.IMPushShieldReq)
    MergeFrom(*source);
  }
}

void IMPushShieldReq::MergeFrom(const IMPushShieldReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Login.IMPushShieldReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.attach_data().size() > 0) {

    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.shield_status() != 0) {
    set_shield_status(from.shield_status());
  }
}

void IMPushShieldReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IM.Login.IMPushShieldReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMPushShieldReq::CopyFrom(const IMPushShieldReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Login.IMPushShieldReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMPushShieldReq::IsInitialized() const {
  return true;
}

void IMPushShieldReq::Swap(IMPushShieldReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMPushShieldReq::InternalSwap(IMPushShieldReq* other) {
  using std::swap;
  attach_data_.Swap(&other->attach_data_);
  swap(user_id_, other->user_id_);
  swap(shield_status_, other->shield_status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IMPushShieldReq::GetMetadata() const {
  protobuf_IM_2eLogin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eLogin_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IMPushShieldRsp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMPushShieldRsp::kUserIdFieldNumber;
const int IMPushShieldRsp::kResultCodeFieldNumber;
const int IMPushShieldRsp::kShieldStatusFieldNumber;
const int IMPushShieldRsp::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMPushShieldRsp::IMPushShieldRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IM_2eLogin_2eproto::InitDefaultsIMPushShieldRsp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Login.IMPushShieldRsp)
}
IMPushShieldRsp::IMPushShieldRsp(const IMPushShieldRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.attach_data().size() > 0) {
    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&shield_status_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(shield_status_));
  // @@protoc_insertion_point(copy_constructor:IM.Login.IMPushShieldRsp)
}

void IMPushShieldRsp::SharedCtor() {
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shield_status_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(shield_status_));
  _cached_size_ = 0;
}

IMPushShieldRsp::~IMPushShieldRsp() {
  // @@protoc_insertion_point(destructor:IM.Login.IMPushShieldRsp)
  SharedDtor();
}

void IMPushShieldRsp::SharedDtor() {
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IMPushShieldRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMPushShieldRsp::descriptor() {
  ::protobuf_IM_2eLogin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eLogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IMPushShieldRsp& IMPushShieldRsp::default_instance() {
  ::protobuf_IM_2eLogin_2eproto::InitDefaultsIMPushShieldRsp();
  return *internal_default_instance();
}

IMPushShieldRsp* IMPushShieldRsp::New(::google::protobuf::Arena* arena) const {
  IMPushShieldRsp* n = new IMPushShieldRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMPushShieldRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Login.IMPushShieldRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shield_status_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(shield_status_));
  _internal_metadata_.Clear();
}

bool IMPushShieldRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Login.IMPushShieldRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 result_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 shield_status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shield_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes attach_data = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Login.IMPushShieldRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Login.IMPushShieldRsp)
  return false;
#undef DO_
}

void IMPushShieldRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Login.IMPushShieldRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // uint32 result_code = 2;
  if (this->result_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result_code(), output);
  }

  // uint32 shield_status = 3;
  if (this->shield_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->shield_status(), output);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:IM.Login.IMPushShieldRsp)
}

::google::protobuf::uint8* IMPushShieldRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:IM.Login.IMPushShieldRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // uint32 result_code = 2;
  if (this->result_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->result_code(), target);
  }

  // uint32 shield_status = 3;
  if (this->shield_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->shield_status(), target);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->attach_data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Login.IMPushShieldRsp)
  return target;
}

size_t IMPushShieldRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Login.IMPushShieldRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  // uint32 result_code = 2;
  if (this->result_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result_code());
  }

  // uint32 shield_status = 3;
  if (this->shield_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->shield_status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMPushShieldRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IM.Login.IMPushShieldRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const IMPushShieldRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IMPushShieldRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IM.Login.IMPushShieldRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IM.Login.IMPushShieldRsp)
    MergeFrom(*source);
  }
}

void IMPushShieldRsp::MergeFrom(const IMPushShieldRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Login.IMPushShieldRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.attach_data().size() > 0) {

    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.result_code() != 0) {
    set_result_code(from.result_code());
  }
  if (from.shield_status() != 0) {
    set_shield_status(from.shield_status());
  }
}

void IMPushShieldRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IM.Login.IMPushShieldRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMPushShieldRsp::CopyFrom(const IMPushShieldRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Login.IMPushShieldRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMPushShieldRsp::IsInitialized() const {
  return true;
}

void IMPushShieldRsp::Swap(IMPushShieldRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMPushShieldRsp::InternalSwap(IMPushShieldRsp* other) {
  using std::swap;
  attach_data_.Swap(&other->attach_data_);
  swap(user_id_, other->user_id_);
  swap(result_code_, other->result_code_);
  swap(shield_status_, other->shield_status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IMPushShieldRsp::GetMetadata() const {
  protobuf_IM_2eLogin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eLogin_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IMQueryPushShieldReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMQueryPushShieldReq::kUserIdFieldNumber;
const int IMQueryPushShieldReq::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMQueryPushShieldReq::IMQueryPushShieldReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IM_2eLogin_2eproto::InitDefaultsIMQueryPushShieldReq();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Login.IMQueryPushShieldReq)
}
IMQueryPushShieldReq::IMQueryPushShieldReq(const IMQueryPushShieldReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.attach_data().size() > 0) {
    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:IM.Login.IMQueryPushShieldReq)
}

void IMQueryPushShieldReq::SharedCtor() {
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0u;
  _cached_size_ = 0;
}

IMQueryPushShieldReq::~IMQueryPushShieldReq() {
  // @@protoc_insertion_point(destructor:IM.Login.IMQueryPushShieldReq)
  SharedDtor();
}

void IMQueryPushShieldReq::SharedDtor() {
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IMQueryPushShieldReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMQueryPushShieldReq::descriptor() {
  ::protobuf_IM_2eLogin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eLogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IMQueryPushShieldReq& IMQueryPushShieldReq::default_instance() {
  ::protobuf_IM_2eLogin_2eproto::InitDefaultsIMQueryPushShieldReq();
  return *internal_default_instance();
}

IMQueryPushShieldReq* IMQueryPushShieldReq::New(::google::protobuf::Arena* arena) const {
  IMQueryPushShieldReq* n = new IMQueryPushShieldReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMQueryPushShieldReq::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Login.IMQueryPushShieldReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_ = 0u;
  _internal_metadata_.Clear();
}

bool IMQueryPushShieldReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Login.IMQueryPushShieldReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes attach_data = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Login.IMQueryPushShieldReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Login.IMQueryPushShieldReq)
  return false;
#undef DO_
}

void IMQueryPushShieldReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Login.IMQueryPushShieldReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:IM.Login.IMQueryPushShieldReq)
}

::google::protobuf::uint8* IMQueryPushShieldReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:IM.Login.IMQueryPushShieldReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->attach_data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Login.IMQueryPushShieldReq)
  return target;
}

size_t IMQueryPushShieldReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Login.IMQueryPushShieldReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMQueryPushShieldReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IM.Login.IMQueryPushShieldReq)
  GOOGLE_DCHECK_NE(&from, this);
  const IMQueryPushShieldReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IMQueryPushShieldReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IM.Login.IMQueryPushShieldReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IM.Login.IMQueryPushShieldReq)
    MergeFrom(*source);
  }
}

void IMQueryPushShieldReq::MergeFrom(const IMQueryPushShieldReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Login.IMQueryPushShieldReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.attach_data().size() > 0) {

    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
}

void IMQueryPushShieldReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IM.Login.IMQueryPushShieldReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMQueryPushShieldReq::CopyFrom(const IMQueryPushShieldReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Login.IMQueryPushShieldReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMQueryPushShieldReq::IsInitialized() const {
  return true;
}

void IMQueryPushShieldReq::Swap(IMQueryPushShieldReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMQueryPushShieldReq::InternalSwap(IMQueryPushShieldReq* other) {
  using std::swap;
  attach_data_.Swap(&other->attach_data_);
  swap(user_id_, other->user_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IMQueryPushShieldReq::GetMetadata() const {
  protobuf_IM_2eLogin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eLogin_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IMQueryPushShieldRsp::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMQueryPushShieldRsp::kUserIdFieldNumber;
const int IMQueryPushShieldRsp::kResultCodeFieldNumber;
const int IMQueryPushShieldRsp::kShieldStatusFieldNumber;
const int IMQueryPushShieldRsp::kAttachDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMQueryPushShieldRsp::IMQueryPushShieldRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_IM_2eLogin_2eproto::InitDefaultsIMQueryPushShieldRsp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IM.Login.IMQueryPushShieldRsp)
}
IMQueryPushShieldRsp::IMQueryPushShieldRsp(const IMQueryPushShieldRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.attach_data().size() > 0) {
    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&shield_status_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(shield_status_));
  // @@protoc_insertion_point(copy_constructor:IM.Login.IMQueryPushShieldRsp)
}

void IMQueryPushShieldRsp::SharedCtor() {
  attach_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shield_status_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(shield_status_));
  _cached_size_ = 0;
}

IMQueryPushShieldRsp::~IMQueryPushShieldRsp() {
  // @@protoc_insertion_point(destructor:IM.Login.IMQueryPushShieldRsp)
  SharedDtor();
}

void IMQueryPushShieldRsp::SharedDtor() {
  attach_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IMQueryPushShieldRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMQueryPushShieldRsp::descriptor() {
  ::protobuf_IM_2eLogin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eLogin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IMQueryPushShieldRsp& IMQueryPushShieldRsp::default_instance() {
  ::protobuf_IM_2eLogin_2eproto::InitDefaultsIMQueryPushShieldRsp();
  return *internal_default_instance();
}

IMQueryPushShieldRsp* IMQueryPushShieldRsp::New(::google::protobuf::Arena* arena) const {
  IMQueryPushShieldRsp* n = new IMQueryPushShieldRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMQueryPushShieldRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:IM.Login.IMQueryPushShieldRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attach_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shield_status_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(shield_status_));
  _internal_metadata_.Clear();
}

bool IMQueryPushShieldRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IM.Login.IMQueryPushShieldRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 result_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 shield_status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shield_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes attach_data = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_attach_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IM.Login.IMQueryPushShieldRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IM.Login.IMQueryPushShieldRsp)
  return false;
#undef DO_
}

void IMQueryPushShieldRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IM.Login.IMQueryPushShieldRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // uint32 result_code = 2;
  if (this->result_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result_code(), output);
  }

  // uint32 shield_status = 3;
  if (this->shield_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->shield_status(), output);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->attach_data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:IM.Login.IMQueryPushShieldRsp)
}

::google::protobuf::uint8* IMQueryPushShieldRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:IM.Login.IMQueryPushShieldRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // uint32 result_code = 2;
  if (this->result_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->result_code(), target);
  }

  // uint32 shield_status = 3;
  if (this->shield_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->shield_status(), target);
  }

  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->attach_data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IM.Login.IMQueryPushShieldRsp)
  return target;
}

size_t IMQueryPushShieldRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IM.Login.IMQueryPushShieldRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes attach_data = 20;
  if (this->attach_data().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->attach_data());
  }

  // uint32 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_id());
  }

  // uint32 result_code = 2;
  if (this->result_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result_code());
  }

  // uint32 shield_status = 3;
  if (this->shield_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->shield_status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMQueryPushShieldRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IM.Login.IMQueryPushShieldRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const IMQueryPushShieldRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IMQueryPushShieldRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IM.Login.IMQueryPushShieldRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IM.Login.IMQueryPushShieldRsp)
    MergeFrom(*source);
  }
}

void IMQueryPushShieldRsp::MergeFrom(const IMQueryPushShieldRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IM.Login.IMQueryPushShieldRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.attach_data().size() > 0) {

    attach_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attach_data_);
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.result_code() != 0) {
    set_result_code(from.result_code());
  }
  if (from.shield_status() != 0) {
    set_shield_status(from.shield_status());
  }
}

void IMQueryPushShieldRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IM.Login.IMQueryPushShieldRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMQueryPushShieldRsp::CopyFrom(const IMQueryPushShieldRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IM.Login.IMQueryPushShieldRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMQueryPushShieldRsp::IsInitialized() const {
  return true;
}

void IMQueryPushShieldRsp::Swap(IMQueryPushShieldRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMQueryPushShieldRsp::InternalSwap(IMQueryPushShieldRsp* other) {
  using std::swap;
  attach_data_.Swap(&other->attach_data_);
  swap(user_id_, other->user_id_);
  swap(result_code_, other->result_code_);
  swap(shield_status_, other->shield_status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IMQueryPushShieldRsp::GetMetadata() const {
  protobuf_IM_2eLogin_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_IM_2eLogin_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Login
}  // namespace IM

// @@protoc_insertion_point(global_scope)
