// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "ImInternal.pb.h"

@implementation ImInternalRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [ImInternalRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [ImbaseDefineRoot registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface IMSyncAuthInfoReq ()
@property int32_t latestTime;
@property (retain) NSData* attachData;
@end

@implementation IMSyncAuthInfoReq

- (BOOL) hasLatestTime {
  return !!hasLatestTime_;
}
- (void) setHasLatestTime:(BOOL) value {
  hasLatestTime_ = !!value;
}
@synthesize latestTime;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) value {
  hasAttachData_ = !!value;
}
@synthesize attachData;
- (void) dealloc {
  self.attachData = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.latestTime = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMSyncAuthInfoReq* defaultIMSyncAuthInfoReqInstance = nil;
+ (void) initialize {
  if (self == [IMSyncAuthInfoReq class]) {
    defaultIMSyncAuthInfoReqInstance = [[IMSyncAuthInfoReq alloc] init];
  }
}
+ (IMSyncAuthInfoReq*) defaultInstance {
  return defaultIMSyncAuthInfoReqInstance;
}
- (IMSyncAuthInfoReq*) defaultInstance {
  return defaultIMSyncAuthInfoReqInstance;
}
- (BOOL) isInitialized {
  if (!self.hasLatestTime) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasLatestTime) {
    [output writeUInt32:1 value:self.latestTime];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasLatestTime) {
    size += computeUInt32Size(1, self.latestTime);
  }
  if (self.hasAttachData) {
    size += computeDataSize(20, self.attachData);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (IMSyncAuthInfoReq*) parseFromData:(NSData*) data {
  return (IMSyncAuthInfoReq*)[[[IMSyncAuthInfoReq builder] mergeFromData:data] build];
}
+ (IMSyncAuthInfoReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMSyncAuthInfoReq*)[[[IMSyncAuthInfoReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMSyncAuthInfoReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMSyncAuthInfoReq*)[[[IMSyncAuthInfoReq builder] mergeFromInputStream:input] build];
}
+ (IMSyncAuthInfoReq*) parseDelimitedFromInputStream:(NSInputStream*) input {
  return (IMSyncAuthInfoReq*)[[[IMSyncAuthInfoReq builder] mergeDelimitedFromInputStream:input] build];
}
+ (IMSyncAuthInfoReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMSyncAuthInfoReq*)[[[IMSyncAuthInfoReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMSyncAuthInfoReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMSyncAuthInfoReq*)[[[IMSyncAuthInfoReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMSyncAuthInfoReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMSyncAuthInfoReq*)[[[IMSyncAuthInfoReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMSyncAuthInfoReqBuilder*) builder {
  return [[[IMSyncAuthInfoReqBuilder alloc] init] autorelease];
}
+ (IMSyncAuthInfoReqBuilder*) builderWithPrototype:(IMSyncAuthInfoReq*) prototype {
  return [[IMSyncAuthInfoReq builder] mergeFrom:prototype];
}
- (IMSyncAuthInfoReqBuilder*) builder {
  return [IMSyncAuthInfoReq builder];
}
@end

@interface IMSyncAuthInfoReqBuilder()
@property (retain) IMSyncAuthInfoReq* result;
@end

@implementation IMSyncAuthInfoReqBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[IMSyncAuthInfoReq alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (IMSyncAuthInfoReqBuilder*) clear {
  self.result = [[[IMSyncAuthInfoReq alloc] init] autorelease];
  return self;
}
- (IMSyncAuthInfoReqBuilder*) clone {
  return [IMSyncAuthInfoReq builderWithPrototype:result];
}
- (IMSyncAuthInfoReq*) defaultInstance {
  return [IMSyncAuthInfoReq defaultInstance];
}
- (IMSyncAuthInfoReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMSyncAuthInfoReq*) buildPartial {
  IMSyncAuthInfoReq* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (IMSyncAuthInfoReqBuilder*) mergeFrom:(IMSyncAuthInfoReq*) other {
  if (other == [IMSyncAuthInfoReq defaultInstance]) {
    return self;
  }
  if (other.hasLatestTime) {
    [self setLatestTime:other.latestTime];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMSyncAuthInfoReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMSyncAuthInfoReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setLatestTime:[input readUInt32]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasLatestTime {
  return result.hasLatestTime;
}
- (int32_t) latestTime {
  return result.latestTime;
}
- (IMSyncAuthInfoReqBuilder*) setLatestTime:(int32_t) value {
  result.hasLatestTime = YES;
  result.latestTime = value;
  return self;
}
- (IMSyncAuthInfoReqBuilder*) clearLatestTime {
  result.hasLatestTime = NO;
  result.latestTime = 0;
  return self;
}
- (BOOL) hasAttachData {
  return result.hasAttachData;
}
- (NSData*) attachData {
  return result.attachData;
}
- (IMSyncAuthInfoReqBuilder*) setAttachData:(NSData*) value {
  result.hasAttachData = YES;
  result.attachData = value;
  return self;
}
- (IMSyncAuthInfoReqBuilder*) clearAttachData {
  result.hasAttachData = NO;
  result.attachData = [NSData data];
  return self;
}
@end

@interface IMSyncAuthInfoRsp ()
@property int32_t latestTime;
@property (retain) NSMutableArray* mutableAuthListList;
@property (retain) NSData* attachData;
@end

@implementation IMSyncAuthInfoRsp

- (BOOL) hasLatestTime {
  return !!hasLatestTime_;
}
- (void) setHasLatestTime:(BOOL) value {
  hasLatestTime_ = !!value;
}
@synthesize latestTime;
@synthesize mutableAuthListList;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) value {
  hasAttachData_ = !!value;
}
@synthesize attachData;
- (void) dealloc {
  self.mutableAuthListList = nil;
  self.attachData = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.latestTime = 0;
    self.attachData = [NSData data];
  }
  return self;
}
static IMSyncAuthInfoRsp* defaultIMSyncAuthInfoRspInstance = nil;
+ (void) initialize {
  if (self == [IMSyncAuthInfoRsp class]) {
    defaultIMSyncAuthInfoRspInstance = [[IMSyncAuthInfoRsp alloc] init];
  }
}
+ (IMSyncAuthInfoRsp*) defaultInstance {
  return defaultIMSyncAuthInfoRspInstance;
}
- (IMSyncAuthInfoRsp*) defaultInstance {
  return defaultIMSyncAuthInfoRspInstance;
}
- (NSArray*) authListList {
  return mutableAuthListList;
}
- (AuthInfo*) authListAtIndex:(int32_t) index {
  id value = [mutableAuthListList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  if (!self.hasLatestTime) {
    return NO;
  }
  for (AuthInfo* element in self.authListList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasLatestTime) {
    [output writeUInt32:1 value:self.latestTime];
  }
  for (AuthInfo* element in self.authListList) {
    [output writeMessage:2 value:element];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasLatestTime) {
    size += computeUInt32Size(1, self.latestTime);
  }
  for (AuthInfo* element in self.authListList) {
    size += computeMessageSize(2, element);
  }
  if (self.hasAttachData) {
    size += computeDataSize(20, self.attachData);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (IMSyncAuthInfoRsp*) parseFromData:(NSData*) data {
  return (IMSyncAuthInfoRsp*)[[[IMSyncAuthInfoRsp builder] mergeFromData:data] build];
}
+ (IMSyncAuthInfoRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMSyncAuthInfoRsp*)[[[IMSyncAuthInfoRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMSyncAuthInfoRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMSyncAuthInfoRsp*)[[[IMSyncAuthInfoRsp builder] mergeFromInputStream:input] build];
}
+ (IMSyncAuthInfoRsp*) parseDelimitedFromInputStream:(NSInputStream*) input {
  return (IMSyncAuthInfoRsp*)[[[IMSyncAuthInfoRsp builder] mergeDelimitedFromInputStream:input] build];
}
+ (IMSyncAuthInfoRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMSyncAuthInfoRsp*)[[[IMSyncAuthInfoRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMSyncAuthInfoRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMSyncAuthInfoRsp*)[[[IMSyncAuthInfoRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMSyncAuthInfoRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMSyncAuthInfoRsp*)[[[IMSyncAuthInfoRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMSyncAuthInfoRspBuilder*) builder {
  return [[[IMSyncAuthInfoRspBuilder alloc] init] autorelease];
}
+ (IMSyncAuthInfoRspBuilder*) builderWithPrototype:(IMSyncAuthInfoRsp*) prototype {
  return [[IMSyncAuthInfoRsp builder] mergeFrom:prototype];
}
- (IMSyncAuthInfoRspBuilder*) builder {
  return [IMSyncAuthInfoRsp builder];
}
@end

@interface IMSyncAuthInfoRspBuilder()
@property (retain) IMSyncAuthInfoRsp* result;
@end

@implementation IMSyncAuthInfoRspBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[IMSyncAuthInfoRsp alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (IMSyncAuthInfoRspBuilder*) clear {
  self.result = [[[IMSyncAuthInfoRsp alloc] init] autorelease];
  return self;
}
- (IMSyncAuthInfoRspBuilder*) clone {
  return [IMSyncAuthInfoRsp builderWithPrototype:result];
}
- (IMSyncAuthInfoRsp*) defaultInstance {
  return [IMSyncAuthInfoRsp defaultInstance];
}
- (IMSyncAuthInfoRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMSyncAuthInfoRsp*) buildPartial {
  IMSyncAuthInfoRsp* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (IMSyncAuthInfoRspBuilder*) mergeFrom:(IMSyncAuthInfoRsp*) other {
  if (other == [IMSyncAuthInfoRsp defaultInstance]) {
    return self;
  }
  if (other.hasLatestTime) {
    [self setLatestTime:other.latestTime];
  }
  if (other.mutableAuthListList.count > 0) {
    if (result.mutableAuthListList == nil) {
      result.mutableAuthListList = [NSMutableArray array];
    }
    [result.mutableAuthListList addObjectsFromArray:other.mutableAuthListList];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMSyncAuthInfoRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMSyncAuthInfoRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setLatestTime:[input readUInt32]];
        break;
      }
      case 18: {
        AuthInfoBuilder* subBuilder = [AuthInfo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAuthList:[subBuilder buildPartial]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasLatestTime {
  return result.hasLatestTime;
}
- (int32_t) latestTime {
  return result.latestTime;
}
- (IMSyncAuthInfoRspBuilder*) setLatestTime:(int32_t) value {
  result.hasLatestTime = YES;
  result.latestTime = value;
  return self;
}
- (IMSyncAuthInfoRspBuilder*) clearLatestTime {
  result.hasLatestTime = NO;
  result.latestTime = 0;
  return self;
}
- (NSArray*) authListList {
  if (result.mutableAuthListList == nil) { return [NSArray array]; }
  return result.mutableAuthListList;
}
- (AuthInfo*) authListAtIndex:(int32_t) index {
  return [result authListAtIndex:index];
}
- (IMSyncAuthInfoRspBuilder*) replaceAuthListAtIndex:(int32_t) index with:(AuthInfo*) value {
  [result.mutableAuthListList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (IMSyncAuthInfoRspBuilder*) addAllAuthList:(NSArray*) values {
  if (result.mutableAuthListList == nil) {
    result.mutableAuthListList = [NSMutableArray array];
  }
  [result.mutableAuthListList addObjectsFromArray:values];
  return self;
}
- (IMSyncAuthInfoRspBuilder*) clearAuthListList {
  result.mutableAuthListList = nil;
  return self;
}
- (IMSyncAuthInfoRspBuilder*) addAuthList:(AuthInfo*) value {
  if (result.mutableAuthListList == nil) {
    result.mutableAuthListList = [NSMutableArray array];
  }
  [result.mutableAuthListList addObject:value];
  return self;
}
- (BOOL) hasAttachData {
  return result.hasAttachData;
}
- (NSData*) attachData {
  return result.attachData;
}
- (IMSyncAuthInfoRspBuilder*) setAttachData:(NSData*) value {
  result.hasAttachData = YES;
  result.attachData = value;
  return self;
}
- (IMSyncAuthInfoRspBuilder*) clearAttachData {
  result.hasAttachData = NO;
  result.attachData = [NSData data];
  return self;
}
@end

@interface IMGetUserIdListByNickNameReq ()
@property (retain) NSMutableArray* mutableNickNameListList;
@property (retain) NSData* attachData;
@end

@implementation IMGetUserIdListByNickNameReq

@synthesize mutableNickNameListList;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) value {
  hasAttachData_ = !!value;
}
@synthesize attachData;
- (void) dealloc {
  self.mutableNickNameListList = nil;
  self.attachData = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.attachData = [NSData data];
  }
  return self;
}
static IMGetUserIdListByNickNameReq* defaultIMGetUserIdListByNickNameReqInstance = nil;
+ (void) initialize {
  if (self == [IMGetUserIdListByNickNameReq class]) {
    defaultIMGetUserIdListByNickNameReqInstance = [[IMGetUserIdListByNickNameReq alloc] init];
  }
}
+ (IMGetUserIdListByNickNameReq*) defaultInstance {
  return defaultIMGetUserIdListByNickNameReqInstance;
}
- (IMGetUserIdListByNickNameReq*) defaultInstance {
  return defaultIMGetUserIdListByNickNameReqInstance;
}
- (NSArray*) nickNameListList {
  return mutableNickNameListList;
}
- (NSString*) nickNameListAtIndex:(int32_t) index {
  id value = [mutableNickNameListList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (NSString* element in self.mutableNickNameListList) {
    [output writeString:1 value:element];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  {
    int32_t dataSize = 0;
    for (NSString* element in self.mutableNickNameListList) {
      dataSize += computeStringSizeNoTag(element);
    }
    size += dataSize;
    size += 1 * self.mutableNickNameListList.count;
  }
  if (self.hasAttachData) {
    size += computeDataSize(20, self.attachData);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (IMGetUserIdListByNickNameReq*) parseFromData:(NSData*) data {
  return (IMGetUserIdListByNickNameReq*)[[[IMGetUserIdListByNickNameReq builder] mergeFromData:data] build];
}
+ (IMGetUserIdListByNickNameReq*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGetUserIdListByNickNameReq*)[[[IMGetUserIdListByNickNameReq builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMGetUserIdListByNickNameReq*) parseFromInputStream:(NSInputStream*) input {
  return (IMGetUserIdListByNickNameReq*)[[[IMGetUserIdListByNickNameReq builder] mergeFromInputStream:input] build];
}
+ (IMGetUserIdListByNickNameReq*) parseDelimitedFromInputStream:(NSInputStream*) input {
  return (IMGetUserIdListByNickNameReq*)[[[IMGetUserIdListByNickNameReq builder] mergeDelimitedFromInputStream:input] build];
}
+ (IMGetUserIdListByNickNameReq*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGetUserIdListByNickNameReq*)[[[IMGetUserIdListByNickNameReq builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMGetUserIdListByNickNameReq*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMGetUserIdListByNickNameReq*)[[[IMGetUserIdListByNickNameReq builder] mergeFromCodedInputStream:input] build];
}
+ (IMGetUserIdListByNickNameReq*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGetUserIdListByNickNameReq*)[[[IMGetUserIdListByNickNameReq builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMGetUserIdListByNickNameReqBuilder*) builder {
  return [[[IMGetUserIdListByNickNameReqBuilder alloc] init] autorelease];
}
+ (IMGetUserIdListByNickNameReqBuilder*) builderWithPrototype:(IMGetUserIdListByNickNameReq*) prototype {
  return [[IMGetUserIdListByNickNameReq builder] mergeFrom:prototype];
}
- (IMGetUserIdListByNickNameReqBuilder*) builder {
  return [IMGetUserIdListByNickNameReq builder];
}
@end

@interface IMGetUserIdListByNickNameReqBuilder()
@property (retain) IMGetUserIdListByNickNameReq* result;
@end

@implementation IMGetUserIdListByNickNameReqBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[IMGetUserIdListByNickNameReq alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (IMGetUserIdListByNickNameReqBuilder*) clear {
  self.result = [[[IMGetUserIdListByNickNameReq alloc] init] autorelease];
  return self;
}
- (IMGetUserIdListByNickNameReqBuilder*) clone {
  return [IMGetUserIdListByNickNameReq builderWithPrototype:result];
}
- (IMGetUserIdListByNickNameReq*) defaultInstance {
  return [IMGetUserIdListByNickNameReq defaultInstance];
}
- (IMGetUserIdListByNickNameReq*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMGetUserIdListByNickNameReq*) buildPartial {
  IMGetUserIdListByNickNameReq* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (IMGetUserIdListByNickNameReqBuilder*) mergeFrom:(IMGetUserIdListByNickNameReq*) other {
  if (other == [IMGetUserIdListByNickNameReq defaultInstance]) {
    return self;
  }
  if (other.mutableNickNameListList.count > 0) {
    if (result.mutableNickNameListList == nil) {
      result.mutableNickNameListList = [NSMutableArray array];
    }
    [result.mutableNickNameListList addObjectsFromArray:other.mutableNickNameListList];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMGetUserIdListByNickNameReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMGetUserIdListByNickNameReqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self addNickNameList:[input readString]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (NSArray*) nickNameListList {
  if (result.mutableNickNameListList == nil) {
    return [NSArray array];
  }
  return result.mutableNickNameListList;
}
- (NSString*) nickNameListAtIndex:(int32_t) index {
  return [result nickNameListAtIndex:index];
}
- (IMGetUserIdListByNickNameReqBuilder*) replaceNickNameListAtIndex:(int32_t) index with:(NSString*) value {
  [result.mutableNickNameListList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (IMGetUserIdListByNickNameReqBuilder*) addNickNameList:(NSString*) value {
  if (result.mutableNickNameListList == nil) {
    result.mutableNickNameListList = [NSMutableArray array];
  }
  [result.mutableNickNameListList addObject:value];
  return self;
}
- (IMGetUserIdListByNickNameReqBuilder*) addAllNickNameList:(NSArray*) values {
  if (result.mutableNickNameListList == nil) {
    result.mutableNickNameListList = [NSMutableArray array];
  }
  [result.mutableNickNameListList addObjectsFromArray:values];
  return self;
}
- (IMGetUserIdListByNickNameReqBuilder*) clearNickNameListList {
  result.mutableNickNameListList = nil;
  return self;
}
- (BOOL) hasAttachData {
  return result.hasAttachData;
}
- (NSData*) attachData {
  return result.attachData;
}
- (IMGetUserIdListByNickNameReqBuilder*) setAttachData:(NSData*) value {
  result.hasAttachData = YES;
  result.attachData = value;
  return self;
}
- (IMGetUserIdListByNickNameReqBuilder*) clearAttachData {
  result.hasAttachData = NO;
  result.attachData = [NSData data];
  return self;
}
@end

@interface IMGetUserIdListByNickNameRsp ()
@property (retain) NSMutableArray* mutableUserInfoListList;
@property (retain) NSData* attachData;
@end

@implementation IMGetUserIdListByNickNameRsp

@synthesize mutableUserInfoListList;
- (BOOL) hasAttachData {
  return !!hasAttachData_;
}
- (void) setHasAttachData:(BOOL) value {
  hasAttachData_ = !!value;
}
@synthesize attachData;
- (void) dealloc {
  self.mutableUserInfoListList = nil;
  self.attachData = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.attachData = [NSData data];
  }
  return self;
}
static IMGetUserIdListByNickNameRsp* defaultIMGetUserIdListByNickNameRspInstance = nil;
+ (void) initialize {
  if (self == [IMGetUserIdListByNickNameRsp class]) {
    defaultIMGetUserIdListByNickNameRspInstance = [[IMGetUserIdListByNickNameRsp alloc] init];
  }
}
+ (IMGetUserIdListByNickNameRsp*) defaultInstance {
  return defaultIMGetUserIdListByNickNameRspInstance;
}
- (IMGetUserIdListByNickNameRsp*) defaultInstance {
  return defaultIMGetUserIdListByNickNameRspInstance;
}
- (NSArray*) userInfoListList {
  return mutableUserInfoListList;
}
- (UserInfo*) userInfoListAtIndex:(int32_t) index {
  id value = [mutableUserInfoListList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  for (UserInfo* element in self.userInfoListList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (UserInfo* element in self.userInfoListList) {
    [output writeMessage:1 value:element];
  }
  if (self.hasAttachData) {
    [output writeData:20 value:self.attachData];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (UserInfo* element in self.userInfoListList) {
    size += computeMessageSize(1, element);
  }
  if (self.hasAttachData) {
    size += computeDataSize(20, self.attachData);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (IMGetUserIdListByNickNameRsp*) parseFromData:(NSData*) data {
  return (IMGetUserIdListByNickNameRsp*)[[[IMGetUserIdListByNickNameRsp builder] mergeFromData:data] build];
}
+ (IMGetUserIdListByNickNameRsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGetUserIdListByNickNameRsp*)[[[IMGetUserIdListByNickNameRsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMGetUserIdListByNickNameRsp*) parseFromInputStream:(NSInputStream*) input {
  return (IMGetUserIdListByNickNameRsp*)[[[IMGetUserIdListByNickNameRsp builder] mergeFromInputStream:input] build];
}
+ (IMGetUserIdListByNickNameRsp*) parseDelimitedFromInputStream:(NSInputStream*) input {
  return (IMGetUserIdListByNickNameRsp*)[[[IMGetUserIdListByNickNameRsp builder] mergeDelimitedFromInputStream:input] build];
}
+ (IMGetUserIdListByNickNameRsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGetUserIdListByNickNameRsp*)[[[IMGetUserIdListByNickNameRsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMGetUserIdListByNickNameRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMGetUserIdListByNickNameRsp*)[[[IMGetUserIdListByNickNameRsp builder] mergeFromCodedInputStream:input] build];
}
+ (IMGetUserIdListByNickNameRsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMGetUserIdListByNickNameRsp*)[[[IMGetUserIdListByNickNameRsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMGetUserIdListByNickNameRspBuilder*) builder {
  return [[[IMGetUserIdListByNickNameRspBuilder alloc] init] autorelease];
}
+ (IMGetUserIdListByNickNameRspBuilder*) builderWithPrototype:(IMGetUserIdListByNickNameRsp*) prototype {
  return [[IMGetUserIdListByNickNameRsp builder] mergeFrom:prototype];
}
- (IMGetUserIdListByNickNameRspBuilder*) builder {
  return [IMGetUserIdListByNickNameRsp builder];
}
@end

@interface IMGetUserIdListByNickNameRspBuilder()
@property (retain) IMGetUserIdListByNickNameRsp* result;
@end

@implementation IMGetUserIdListByNickNameRspBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[IMGetUserIdListByNickNameRsp alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (IMGetUserIdListByNickNameRspBuilder*) clear {
  self.result = [[[IMGetUserIdListByNickNameRsp alloc] init] autorelease];
  return self;
}
- (IMGetUserIdListByNickNameRspBuilder*) clone {
  return [IMGetUserIdListByNickNameRsp builderWithPrototype:result];
}
- (IMGetUserIdListByNickNameRsp*) defaultInstance {
  return [IMGetUserIdListByNickNameRsp defaultInstance];
}
- (IMGetUserIdListByNickNameRsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMGetUserIdListByNickNameRsp*) buildPartial {
  IMGetUserIdListByNickNameRsp* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (IMGetUserIdListByNickNameRspBuilder*) mergeFrom:(IMGetUserIdListByNickNameRsp*) other {
  if (other == [IMGetUserIdListByNickNameRsp defaultInstance]) {
    return self;
  }
  if (other.mutableUserInfoListList.count > 0) {
    if (result.mutableUserInfoListList == nil) {
      result.mutableUserInfoListList = [NSMutableArray array];
    }
    [result.mutableUserInfoListList addObjectsFromArray:other.mutableUserInfoListList];
  }
  if (other.hasAttachData) {
    [self setAttachData:other.attachData];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMGetUserIdListByNickNameRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMGetUserIdListByNickNameRspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        UserInfoBuilder* subBuilder = [UserInfo builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUserInfoList:[subBuilder buildPartial]];
        break;
      }
      case 162: {
        [self setAttachData:[input readData]];
        break;
      }
    }
  }
}
- (NSArray*) userInfoListList {
  if (result.mutableUserInfoListList == nil) { return [NSArray array]; }
  return result.mutableUserInfoListList;
}
- (UserInfo*) userInfoListAtIndex:(int32_t) index {
  return [result userInfoListAtIndex:index];
}
- (IMGetUserIdListByNickNameRspBuilder*) replaceUserInfoListAtIndex:(int32_t) index with:(UserInfo*) value {
  [result.mutableUserInfoListList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (IMGetUserIdListByNickNameRspBuilder*) addAllUserInfoList:(NSArray*) values {
  if (result.mutableUserInfoListList == nil) {
    result.mutableUserInfoListList = [NSMutableArray array];
  }
  [result.mutableUserInfoListList addObjectsFromArray:values];
  return self;
}
- (IMGetUserIdListByNickNameRspBuilder*) clearUserInfoListList {
  result.mutableUserInfoListList = nil;
  return self;
}
- (IMGetUserIdListByNickNameRspBuilder*) addUserInfoList:(UserInfo*) value {
  if (result.mutableUserInfoListList == nil) {
    result.mutableUserInfoListList = [NSMutableArray array];
  }
  [result.mutableUserInfoListList addObject:value];
  return self;
}
- (BOOL) hasAttachData {
  return result.hasAttachData;
}
- (NSData*) attachData {
  return result.attachData;
}
- (IMGetUserIdListByNickNameRspBuilder*) setAttachData:(NSData*) value {
  result.hasAttachData = YES;
  result.attachData = value;
  return self;
}
- (IMGetUserIdListByNickNameRspBuilder*) clearAttachData {
  result.hasAttachData = NO;
  result.attachData = [NSData data];
  return self;
}
@end

