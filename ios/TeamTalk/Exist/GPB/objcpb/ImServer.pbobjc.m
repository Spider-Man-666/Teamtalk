// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Server.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "ImServer.pbobjc.h"
 #import "ImBaseDefine.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ImServerRoot

@implementation ImServerRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - ImServerRoot_FileDescriptor

static GPBFileDescriptor *ImServerRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"IM.Server"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - IMStopReceivePacket

@implementation IMStopReceivePacket

@dynamic hasResult, result;

typedef struct IMStopReceivePacket__storage_ {
  uint32_t _has_storage_[1];
  uint32_t result;
} IMStopReceivePacket__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.className = NULL,
        .number = IMStopReceivePacket_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMStopReceivePacket__storage_, result),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMStopReceivePacket class]
                                     rootClass:[ImServerRoot class]
                                          file:ImServerRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMStopReceivePacket__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMValidateReq

@implementation IMValidateReq

@dynamic hasUserName, userName;
@dynamic hasPassword, password;
@dynamic hasAttachData, attachData;

typedef struct IMValidateReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *userName;
  NSString *password;
  NSData *attachData;
} IMValidateReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = IMValidateReq_FieldNumber_UserName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMValidateReq__storage_, userName),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "password",
        .dataTypeSpecific.className = NULL,
        .number = IMValidateReq_FieldNumber_Password,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IMValidateReq__storage_, password),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "attachData",
        .dataTypeSpecific.className = NULL,
        .number = IMValidateReq_FieldNumber_AttachData,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(IMValidateReq__storage_, attachData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMValidateReq class]
                                     rootClass:[ImServerRoot class]
                                          file:ImServerRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMValidateReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMValidateRsp

@implementation IMValidateRsp

@dynamic hasUserName, userName;
@dynamic hasResultCode, resultCode;
@dynamic hasResultString, resultString;
@dynamic hasUserInfo, userInfo;
@dynamic hasAttachData, attachData;

typedef struct IMValidateRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t resultCode;
  NSString *userName;
  NSString *resultString;
  UserInfo *userInfo;
  NSData *attachData;
} IMValidateRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userName",
        .dataTypeSpecific.className = NULL,
        .number = IMValidateRsp_FieldNumber_UserName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMValidateRsp__storage_, userName),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "resultCode",
        .dataTypeSpecific.className = NULL,
        .number = IMValidateRsp_FieldNumber_ResultCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IMValidateRsp__storage_, resultCode),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "resultString",
        .dataTypeSpecific.className = NULL,
        .number = IMValidateRsp_FieldNumber_ResultString,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(IMValidateRsp__storage_, resultString),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(UserInfo),
        .number = IMValidateRsp_FieldNumber_UserInfo,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(IMValidateRsp__storage_, userInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "attachData",
        .dataTypeSpecific.className = NULL,
        .number = IMValidateRsp_FieldNumber_AttachData,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(IMValidateRsp__storage_, attachData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMValidateRsp class]
                                     rootClass:[ImServerRoot class]
                                          file:ImServerRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMValidateRsp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMGetDeviceTokenReq

@implementation IMGetDeviceTokenReq

@dynamic userIdArray, userIdArray_Count;
@dynamic hasAttachData, attachData;

typedef struct IMGetDeviceTokenReq__storage_ {
  uint32_t _has_storage_[1];
  GPBUInt32Array *userIdArray;
  NSData *attachData;
} IMGetDeviceTokenReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userIdArray",
        .dataTypeSpecific.className = NULL,
        .number = IMGetDeviceTokenReq_FieldNumber_UserIdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(IMGetDeviceTokenReq__storage_, userIdArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "attachData",
        .dataTypeSpecific.className = NULL,
        .number = IMGetDeviceTokenReq_FieldNumber_AttachData,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMGetDeviceTokenReq__storage_, attachData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMGetDeviceTokenReq class]
                                     rootClass:[ImServerRoot class]
                                          file:ImServerRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMGetDeviceTokenReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMGetDeviceTokenRsp

@implementation IMGetDeviceTokenRsp

@dynamic userTokenInfoArray, userTokenInfoArray_Count;
@dynamic hasAttachData, attachData;

typedef struct IMGetDeviceTokenRsp__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *userTokenInfoArray;
  NSData *attachData;
} IMGetDeviceTokenRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userTokenInfoArray",
        .dataTypeSpecific.className = GPBStringifySymbol(UserTokenInfo),
        .number = IMGetDeviceTokenRsp_FieldNumber_UserTokenInfoArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(IMGetDeviceTokenRsp__storage_, userTokenInfoArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "attachData",
        .dataTypeSpecific.className = NULL,
        .number = IMGetDeviceTokenRsp_FieldNumber_AttachData,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMGetDeviceTokenRsp__storage_, attachData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMGetDeviceTokenRsp class]
                                     rootClass:[ImServerRoot class]
                                          file:ImServerRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMGetDeviceTokenRsp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMRoleSet

@implementation IMRoleSet

@dynamic hasMaster, master;

typedef struct IMRoleSet__storage_ {
  uint32_t _has_storage_[1];
  uint32_t master;
} IMRoleSet__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "master",
        .dataTypeSpecific.className = NULL,
        .number = IMRoleSet_FieldNumber_Master,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMRoleSet__storage_, master),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMRoleSet class]
                                     rootClass:[ImServerRoot class]
                                          file:ImServerRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMRoleSet__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMOnlineUserInfo

@implementation IMOnlineUserInfo

@dynamic userStatListArray, userStatListArray_Count;

typedef struct IMOnlineUserInfo__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *userStatListArray;
} IMOnlineUserInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userStatListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ServerUserStat),
        .number = IMOnlineUserInfo_FieldNumber_UserStatListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(IMOnlineUserInfo__storage_, userStatListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMOnlineUserInfo class]
                                     rootClass:[ImServerRoot class]
                                          file:ImServerRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMOnlineUserInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMMsgServInfo

@implementation IMMsgServInfo

@dynamic hasIp1, ip1;
@dynamic hasIp2, ip2;
@dynamic hasPort, port;
@dynamic hasMaxConnCnt, maxConnCnt;
@dynamic hasCurConnCnt, curConnCnt;
@dynamic hasHostName, hostName;

typedef struct IMMsgServInfo__storage_ {
  uint32_t _has_storage_[1];
  uint32_t port;
  uint32_t maxConnCnt;
  uint32_t curConnCnt;
  NSString *ip1;
  NSString *ip2;
  NSString *hostName;
} IMMsgServInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ip1",
        .dataTypeSpecific.className = NULL,
        .number = IMMsgServInfo_FieldNumber_Ip1,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMMsgServInfo__storage_, ip1),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ip2",
        .dataTypeSpecific.className = NULL,
        .number = IMMsgServInfo_FieldNumber_Ip2,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IMMsgServInfo__storage_, ip2),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "port",
        .dataTypeSpecific.className = NULL,
        .number = IMMsgServInfo_FieldNumber_Port,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(IMMsgServInfo__storage_, port),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "maxConnCnt",
        .dataTypeSpecific.className = NULL,
        .number = IMMsgServInfo_FieldNumber_MaxConnCnt,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(IMMsgServInfo__storage_, maxConnCnt),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "curConnCnt",
        .dataTypeSpecific.className = NULL,
        .number = IMMsgServInfo_FieldNumber_CurConnCnt,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(IMMsgServInfo__storage_, curConnCnt),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "hostName",
        .dataTypeSpecific.className = NULL,
        .number = IMMsgServInfo_FieldNumber_HostName,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(IMMsgServInfo__storage_, hostName),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMMsgServInfo class]
                                     rootClass:[ImServerRoot class]
                                          file:ImServerRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMMsgServInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMUserStatusUpdate

@implementation IMUserStatusUpdate

@dynamic hasUserStatus, userStatus;
@dynamic hasUserId, userId;
@dynamic hasClientType, clientType;

typedef struct IMUserStatusUpdate__storage_ {
  uint32_t _has_storage_[1];
  uint32_t userStatus;
  uint32_t userId;
  ClientType clientType;
} IMUserStatusUpdate__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescriptionWithDefault fields[] = {
      {
        .defaultValue.valueUInt32 = 0U,
        .core.name = "userStatus",
        .core.dataTypeSpecific.className = NULL,
        .core.number = IMUserStatusUpdate_FieldNumber_UserStatus,
        .core.hasIndex = 0,
        .core.offset = (uint32_t)offsetof(IMUserStatusUpdate__storage_, userStatus),
        .core.flags = GPBFieldRequired,
        .core.dataType = GPBDataTypeUInt32,
      },
      {
        .defaultValue.valueUInt32 = 0U,
        .core.name = "userId",
        .core.dataTypeSpecific.className = NULL,
        .core.number = IMUserStatusUpdate_FieldNumber_UserId,
        .core.hasIndex = 1,
        .core.offset = (uint32_t)offsetof(IMUserStatusUpdate__storage_, userId),
        .core.flags = GPBFieldRequired,
        .core.dataType = GPBDataTypeUInt32,
      },
      {
        .defaultValue.valueEnum = ClientType_ClientTypeWindows,
        .core.name = "clientType",
        .core.dataTypeSpecific.enumDescFunc = ClientType_EnumDescriptor,
        .core.number = IMUserStatusUpdate_FieldNumber_ClientType,
        .core.hasIndex = 2,
        .core.offset = (uint32_t)offsetof(IMUserStatusUpdate__storage_, clientType),
        .core.flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMUserStatusUpdate class]
                                     rootClass:[ImServerRoot class]
                                          file:ImServerRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescriptionWithDefault))
                                   storageSize:sizeof(IMUserStatusUpdate__storage_)
                                         flags:GPBDescriptorInitializationFlag_FieldsWithDefault];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMUserCntUpdate

@implementation IMUserCntUpdate

@dynamic hasUserAction, userAction;
@dynamic hasUserId, userId;

typedef struct IMUserCntUpdate__storage_ {
  uint32_t _has_storage_[1];
  uint32_t userAction;
  uint32_t userId;
} IMUserCntUpdate__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userAction",
        .dataTypeSpecific.className = NULL,
        .number = IMUserCntUpdate_FieldNumber_UserAction,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMUserCntUpdate__storage_, userAction),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = IMUserCntUpdate_FieldNumber_UserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IMUserCntUpdate__storage_, userId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMUserCntUpdate class]
                                     rootClass:[ImServerRoot class]
                                          file:ImServerRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMUserCntUpdate__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMServerKickUser

@implementation IMServerKickUser

@dynamic hasUserId, userId;
@dynamic hasClientType, clientType;
@dynamic hasReason, reason;

typedef struct IMServerKickUser__storage_ {
  uint32_t _has_storage_[1];
  uint32_t userId;
  ClientType clientType;
  uint32_t reason;
} IMServerKickUser__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescriptionWithDefault fields[] = {
      {
        .defaultValue.valueUInt32 = 0U,
        .core.name = "userId",
        .core.dataTypeSpecific.className = NULL,
        .core.number = IMServerKickUser_FieldNumber_UserId,
        .core.hasIndex = 0,
        .core.offset = (uint32_t)offsetof(IMServerKickUser__storage_, userId),
        .core.flags = GPBFieldRequired,
        .core.dataType = GPBDataTypeUInt32,
      },
      {
        .defaultValue.valueEnum = ClientType_ClientTypeWindows,
        .core.name = "clientType",
        .core.dataTypeSpecific.enumDescFunc = ClientType_EnumDescriptor,
        .core.number = IMServerKickUser_FieldNumber_ClientType,
        .core.hasIndex = 1,
        .core.offset = (uint32_t)offsetof(IMServerKickUser__storage_, clientType),
        .core.flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
      {
        .defaultValue.valueUInt32 = 0U,
        .core.name = "reason",
        .core.dataTypeSpecific.className = NULL,
        .core.number = IMServerKickUser_FieldNumber_Reason,
        .core.hasIndex = 2,
        .core.offset = (uint32_t)offsetof(IMServerKickUser__storage_, reason),
        .core.flags = GPBFieldRequired,
        .core.dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMServerKickUser class]
                                     rootClass:[ImServerRoot class]
                                          file:ImServerRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescriptionWithDefault))
                                   storageSize:sizeof(IMServerKickUser__storage_)
                                         flags:GPBDescriptorInitializationFlag_FieldsWithDefault];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMServerPCLoginStatusNotify

@implementation IMServerPCLoginStatusNotify

@dynamic hasUserId, userId;
@dynamic hasLoginStatus, loginStatus;

typedef struct IMServerPCLoginStatusNotify__storage_ {
  uint32_t _has_storage_[1];
  uint32_t userId;
  uint32_t loginStatus;
} IMServerPCLoginStatusNotify__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = IMServerPCLoginStatusNotify_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMServerPCLoginStatusNotify__storage_, userId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "loginStatus",
        .dataTypeSpecific.className = NULL,
        .number = IMServerPCLoginStatusNotify_FieldNumber_LoginStatus,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IMServerPCLoginStatusNotify__storage_, loginStatus),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMServerPCLoginStatusNotify class]
                                     rootClass:[ImServerRoot class]
                                          file:ImServerRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMServerPCLoginStatusNotify__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMPushToUserReq

@implementation IMPushToUserReq

@dynamic hasFlash, flash;
@dynamic hasData_p, data_p;
@dynamic userTokenListArray, userTokenListArray_Count;

typedef struct IMPushToUserReq__storage_ {
  uint32_t _has_storage_[1];
  NSString *flash;
  NSString *data_p;
  NSMutableArray *userTokenListArray;
} IMPushToUserReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "flash",
        .dataTypeSpecific.className = NULL,
        .number = IMPushToUserReq_FieldNumber_Flash,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMPushToUserReq__storage_, flash),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.className = NULL,
        .number = IMPushToUserReq_FieldNumber_Data_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IMPushToUserReq__storage_, data_p),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userTokenListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(UserTokenInfo),
        .number = IMPushToUserReq_FieldNumber_UserTokenListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(IMPushToUserReq__storage_, userTokenListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMPushToUserReq class]
                                     rootClass:[ImServerRoot class]
                                          file:ImServerRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMPushToUserReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMPushToUserRsp

@implementation IMPushToUserRsp

@dynamic pushResultListArray, pushResultListArray_Count;

typedef struct IMPushToUserRsp__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *pushResultListArray;
} IMPushToUserRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "pushResultListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(PushResult),
        .number = IMPushToUserRsp_FieldNumber_PushResultListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(IMPushToUserRsp__storage_, pushResultListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMPushToUserRsp class]
                                     rootClass:[ImServerRoot class]
                                          file:ImServerRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMPushToUserRsp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMGroupGetShieldReq

@implementation IMGroupGetShieldReq

@dynamic hasGroupId, groupId;
@dynamic userIdArray, userIdArray_Count;
@dynamic hasAttachData, attachData;

typedef struct IMGroupGetShieldReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t groupId;
  GPBUInt32Array *userIdArray;
  NSData *attachData;
} IMGroupGetShieldReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .dataTypeSpecific.className = NULL,
        .number = IMGroupGetShieldReq_FieldNumber_GroupId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMGroupGetShieldReq__storage_, groupId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "userIdArray",
        .dataTypeSpecific.className = NULL,
        .number = IMGroupGetShieldReq_FieldNumber_UserIdArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(IMGroupGetShieldReq__storage_, userIdArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "attachData",
        .dataTypeSpecific.className = NULL,
        .number = IMGroupGetShieldReq_FieldNumber_AttachData,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IMGroupGetShieldReq__storage_, attachData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMGroupGetShieldReq class]
                                     rootClass:[ImServerRoot class]
                                          file:ImServerRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMGroupGetShieldReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMGroupGetShieldRsp

@implementation IMGroupGetShieldRsp

@dynamic hasGroupId, groupId;
@dynamic shieldStatusListArray, shieldStatusListArray_Count;
@dynamic hasAttachData, attachData;

typedef struct IMGroupGetShieldRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t groupId;
  NSMutableArray *shieldStatusListArray;
  NSData *attachData;
} IMGroupGetShieldRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "groupId",
        .dataTypeSpecific.className = NULL,
        .number = IMGroupGetShieldRsp_FieldNumber_GroupId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMGroupGetShieldRsp__storage_, groupId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "shieldStatusListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ShieldStatus),
        .number = IMGroupGetShieldRsp_FieldNumber_ShieldStatusListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(IMGroupGetShieldRsp__storage_, shieldStatusListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "attachData",
        .dataTypeSpecific.className = NULL,
        .number = IMGroupGetShieldRsp_FieldNumber_AttachData,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IMGroupGetShieldRsp__storage_, attachData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMGroupGetShieldRsp class]
                                     rootClass:[ImServerRoot class]
                                          file:ImServerRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMGroupGetShieldRsp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMFileTransferReq

@implementation IMFileTransferReq

@dynamic hasFromUserId, fromUserId;
@dynamic hasToUserId, toUserId;
@dynamic hasFileName, fileName;
@dynamic hasFileSize, fileSize;
@dynamic hasTransMode, transMode;
@dynamic hasAttachData, attachData;

typedef struct IMFileTransferReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t fromUserId;
  uint32_t toUserId;
  uint32_t fileSize;
  TransferFileType transMode;
  NSString *fileName;
  NSData *attachData;
} IMFileTransferReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescriptionWithDefault fields[] = {
      {
        .defaultValue.valueUInt32 = 0U,
        .core.name = "fromUserId",
        .core.dataTypeSpecific.className = NULL,
        .core.number = IMFileTransferReq_FieldNumber_FromUserId,
        .core.hasIndex = 0,
        .core.offset = (uint32_t)offsetof(IMFileTransferReq__storage_, fromUserId),
        .core.flags = GPBFieldRequired,
        .core.dataType = GPBDataTypeUInt32,
      },
      {
        .defaultValue.valueUInt32 = 0U,
        .core.name = "toUserId",
        .core.dataTypeSpecific.className = NULL,
        .core.number = IMFileTransferReq_FieldNumber_ToUserId,
        .core.hasIndex = 1,
        .core.offset = (uint32_t)offsetof(IMFileTransferReq__storage_, toUserId),
        .core.flags = GPBFieldRequired,
        .core.dataType = GPBDataTypeUInt32,
      },
      {
        .defaultValue.valueString = nil,
        .core.name = "fileName",
        .core.dataTypeSpecific.className = NULL,
        .core.number = IMFileTransferReq_FieldNumber_FileName,
        .core.hasIndex = 2,
        .core.offset = (uint32_t)offsetof(IMFileTransferReq__storage_, fileName),
        .core.flags = GPBFieldRequired,
        .core.dataType = GPBDataTypeString,
      },
      {
        .defaultValue.valueUInt32 = 0U,
        .core.name = "fileSize",
        .core.dataTypeSpecific.className = NULL,
        .core.number = IMFileTransferReq_FieldNumber_FileSize,
        .core.hasIndex = 3,
        .core.offset = (uint32_t)offsetof(IMFileTransferReq__storage_, fileSize),
        .core.flags = GPBFieldRequired,
        .core.dataType = GPBDataTypeUInt32,
      },
      {
        .defaultValue.valueEnum = TransferFileType_FileTypeOnline,
        .core.name = "transMode",
        .core.dataTypeSpecific.enumDescFunc = TransferFileType_EnumDescriptor,
        .core.number = IMFileTransferReq_FieldNumber_TransMode,
        .core.hasIndex = 4,
        .core.offset = (uint32_t)offsetof(IMFileTransferReq__storage_, transMode),
        .core.flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
      {
        .defaultValue.valueData = nil,
        .core.name = "attachData",
        .core.dataTypeSpecific.className = NULL,
        .core.number = IMFileTransferReq_FieldNumber_AttachData,
        .core.hasIndex = 5,
        .core.offset = (uint32_t)offsetof(IMFileTransferReq__storage_, attachData),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMFileTransferReq class]
                                     rootClass:[ImServerRoot class]
                                          file:ImServerRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescriptionWithDefault))
                                   storageSize:sizeof(IMFileTransferReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_FieldsWithDefault];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMFileTransferRsp

@implementation IMFileTransferRsp

@dynamic hasResultCode, resultCode;
@dynamic hasFromUserId, fromUserId;
@dynamic hasToUserId, toUserId;
@dynamic hasFileName, fileName;
@dynamic hasFileSize, fileSize;
@dynamic hasTaskId, taskId;
@dynamic hasTransMode, transMode;
@dynamic hasAttachData, attachData;

typedef struct IMFileTransferRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t resultCode;
  uint32_t fromUserId;
  uint32_t toUserId;
  uint32_t fileSize;
  TransferFileType transMode;
  NSString *fileName;
  NSString *taskId;
  NSData *attachData;
} IMFileTransferRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescriptionWithDefault fields[] = {
      {
        .defaultValue.valueUInt32 = 0U,
        .core.name = "resultCode",
        .core.dataTypeSpecific.className = NULL,
        .core.number = IMFileTransferRsp_FieldNumber_ResultCode,
        .core.hasIndex = 0,
        .core.offset = (uint32_t)offsetof(IMFileTransferRsp__storage_, resultCode),
        .core.flags = GPBFieldRequired,
        .core.dataType = GPBDataTypeUInt32,
      },
      {
        .defaultValue.valueUInt32 = 0U,
        .core.name = "fromUserId",
        .core.dataTypeSpecific.className = NULL,
        .core.number = IMFileTransferRsp_FieldNumber_FromUserId,
        .core.hasIndex = 1,
        .core.offset = (uint32_t)offsetof(IMFileTransferRsp__storage_, fromUserId),
        .core.flags = GPBFieldRequired,
        .core.dataType = GPBDataTypeUInt32,
      },
      {
        .defaultValue.valueUInt32 = 0U,
        .core.name = "toUserId",
        .core.dataTypeSpecific.className = NULL,
        .core.number = IMFileTransferRsp_FieldNumber_ToUserId,
        .core.hasIndex = 2,
        .core.offset = (uint32_t)offsetof(IMFileTransferRsp__storage_, toUserId),
        .core.flags = GPBFieldRequired,
        .core.dataType = GPBDataTypeUInt32,
      },
      {
        .defaultValue.valueString = nil,
        .core.name = "fileName",
        .core.dataTypeSpecific.className = NULL,
        .core.number = IMFileTransferRsp_FieldNumber_FileName,
        .core.hasIndex = 3,
        .core.offset = (uint32_t)offsetof(IMFileTransferRsp__storage_, fileName),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeString,
      },
      {
        .defaultValue.valueUInt32 = 0U,
        .core.name = "fileSize",
        .core.dataTypeSpecific.className = NULL,
        .core.number = IMFileTransferRsp_FieldNumber_FileSize,
        .core.hasIndex = 4,
        .core.offset = (uint32_t)offsetof(IMFileTransferRsp__storage_, fileSize),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeUInt32,
      },
      {
        .defaultValue.valueString = nil,
        .core.name = "taskId",
        .core.dataTypeSpecific.className = NULL,
        .core.number = IMFileTransferRsp_FieldNumber_TaskId,
        .core.hasIndex = 5,
        .core.offset = (uint32_t)offsetof(IMFileTransferRsp__storage_, taskId),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeString,
      },
      {
        .defaultValue.valueEnum = TransferFileType_FileTypeOnline,
        .core.name = "transMode",
        .core.dataTypeSpecific.enumDescFunc = TransferFileType_EnumDescriptor,
        .core.number = IMFileTransferRsp_FieldNumber_TransMode,
        .core.hasIndex = 6,
        .core.offset = (uint32_t)offsetof(IMFileTransferRsp__storage_, transMode),
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
      {
        .defaultValue.valueData = nil,
        .core.name = "attachData",
        .core.dataTypeSpecific.className = NULL,
        .core.number = IMFileTransferRsp_FieldNumber_AttachData,
        .core.hasIndex = 7,
        .core.offset = (uint32_t)offsetof(IMFileTransferRsp__storage_, attachData),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMFileTransferRsp class]
                                     rootClass:[ImServerRoot class]
                                          file:ImServerRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescriptionWithDefault))
                                   storageSize:sizeof(IMFileTransferRsp__storage_)
                                         flags:GPBDescriptorInitializationFlag_FieldsWithDefault];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMFileServerIPReq

@implementation IMFileServerIPReq


typedef struct IMFileServerIPReq__storage_ {
  uint32_t _has_storage_[1];
} IMFileServerIPReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMFileServerIPReq class]
                                     rootClass:[ImServerRoot class]
                                          file:ImServerRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(IMFileServerIPReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMFileServerIPRsp

@implementation IMFileServerIPRsp

@dynamic ipAddrListArray, ipAddrListArray_Count;

typedef struct IMFileServerIPRsp__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *ipAddrListArray;
} IMFileServerIPRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ipAddrListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(IpAddr),
        .number = IMFileServerIPRsp_FieldNumber_IpAddrListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(IMFileServerIPRsp__storage_, ipAddrListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMFileServerIPRsp class]
                                     rootClass:[ImServerRoot class]
                                          file:ImServerRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMFileServerIPRsp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
