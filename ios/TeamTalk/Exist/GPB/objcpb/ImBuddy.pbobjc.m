// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Buddy.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "ImBuddy.pbobjc.h"
 #import "ImBaseDefine.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ImBuddyRoot

@implementation ImBuddyRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - ImBuddyRoot_FileDescriptor

static GPBFileDescriptor *ImBuddyRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"IM.Buddy"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - IMRecentContactSessionReq

@implementation IMRecentContactSessionReq

@dynamic userId;
@dynamic latestUpdateTime;
@dynamic attachData;

typedef struct IMRecentContactSessionReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t userId;
  uint32_t latestUpdateTime;
  NSData *attachData;
} IMRecentContactSessionReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = IMRecentContactSessionReq_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMRecentContactSessionReq__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "latestUpdateTime",
        .dataTypeSpecific.className = NULL,
        .number = IMRecentContactSessionReq_FieldNumber_LatestUpdateTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IMRecentContactSessionReq__storage_, latestUpdateTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "attachData",
        .dataTypeSpecific.className = NULL,
        .number = IMRecentContactSessionReq_FieldNumber_AttachData,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(IMRecentContactSessionReq__storage_, attachData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMRecentContactSessionReq class]
                                     rootClass:[ImBuddyRoot class]
                                          file:ImBuddyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMRecentContactSessionReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMRecentContactSessionRsp

@implementation IMRecentContactSessionRsp

@dynamic userId;
@dynamic contactSessionListArray, contactSessionListArray_Count;
@dynamic attachData;

typedef struct IMRecentContactSessionRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t userId;
  NSMutableArray *contactSessionListArray;
  NSData *attachData;
} IMRecentContactSessionRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = IMRecentContactSessionRsp_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMRecentContactSessionRsp__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "contactSessionListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ContactSessionInfo),
        .number = IMRecentContactSessionRsp_FieldNumber_ContactSessionListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(IMRecentContactSessionRsp__storage_, contactSessionListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "attachData",
        .dataTypeSpecific.className = NULL,
        .number = IMRecentContactSessionRsp_FieldNumber_AttachData,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IMRecentContactSessionRsp__storage_, attachData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMRecentContactSessionRsp class]
                                     rootClass:[ImBuddyRoot class]
                                          file:ImBuddyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMRecentContactSessionRsp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMUserStatNotify

@implementation IMUserStatNotify

@dynamic hasUserStat, userStat;

typedef struct IMUserStatNotify__storage_ {
  uint32_t _has_storage_[1];
  UserStat *userStat;
} IMUserStatNotify__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userStat",
        .dataTypeSpecific.className = GPBStringifySymbol(UserStat),
        .number = IMUserStatNotify_FieldNumber_UserStat,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMUserStatNotify__storage_, userStat),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMUserStatNotify class]
                                     rootClass:[ImBuddyRoot class]
                                          file:ImBuddyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMUserStatNotify__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMUsersInfoReq

@implementation IMUsersInfoReq

@dynamic userId;
@dynamic userIdListArray, userIdListArray_Count;
@dynamic attachData;

typedef struct IMUsersInfoReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t userId;
  GPBUInt32Array *userIdListArray;
  NSData *attachData;
} IMUsersInfoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = IMUsersInfoReq_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMUsersInfoReq__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "userIdListArray",
        .dataTypeSpecific.className = NULL,
        .number = IMUsersInfoReq_FieldNumber_UserIdListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(IMUsersInfoReq__storage_, userIdListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "attachData",
        .dataTypeSpecific.className = NULL,
        .number = IMUsersInfoReq_FieldNumber_AttachData,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IMUsersInfoReq__storage_, attachData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMUsersInfoReq class]
                                     rootClass:[ImBuddyRoot class]
                                          file:ImBuddyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMUsersInfoReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMUsersInfoRsp

@implementation IMUsersInfoRsp

@dynamic userId;
@dynamic userInfoListArray, userInfoListArray_Count;
@dynamic attachData;

typedef struct IMUsersInfoRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t userId;
  NSMutableArray *userInfoListArray;
  NSData *attachData;
} IMUsersInfoRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = IMUsersInfoRsp_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMUsersInfoRsp__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "userInfoListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(UserInfo),
        .number = IMUsersInfoRsp_FieldNumber_UserInfoListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(IMUsersInfoRsp__storage_, userInfoListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "attachData",
        .dataTypeSpecific.className = NULL,
        .number = IMUsersInfoRsp_FieldNumber_AttachData,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IMUsersInfoRsp__storage_, attachData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMUsersInfoRsp class]
                                     rootClass:[ImBuddyRoot class]
                                          file:ImBuddyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMUsersInfoRsp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMRemoveSessionReq

@implementation IMRemoveSessionReq

@dynamic userId;
@dynamic sessionType;
@dynamic sessionId;
@dynamic attachData;

typedef struct IMRemoveSessionReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t userId;
  SessionType sessionType;
  uint32_t sessionId;
  NSData *attachData;
} IMRemoveSessionReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = IMRemoveSessionReq_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMRemoveSessionReq__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "sessionType",
        .dataTypeSpecific.enumDescFunc = SessionType_EnumDescriptor,
        .number = IMRemoveSessionReq_FieldNumber_SessionType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IMRemoveSessionReq__storage_, sessionType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "sessionId",
        .dataTypeSpecific.className = NULL,
        .number = IMRemoveSessionReq_FieldNumber_SessionId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(IMRemoveSessionReq__storage_, sessionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "attachData",
        .dataTypeSpecific.className = NULL,
        .number = IMRemoveSessionReq_FieldNumber_AttachData,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(IMRemoveSessionReq__storage_, attachData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMRemoveSessionReq class]
                                     rootClass:[ImBuddyRoot class]
                                          file:ImBuddyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMRemoveSessionReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t IMRemoveSessionReq_SessionType_RawValue(IMRemoveSessionReq *message) {
  GPBDescriptor *descriptor = [IMRemoveSessionReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:IMRemoveSessionReq_FieldNumber_SessionType];
  return GPBGetMessageInt32Field(message, field);
}

void SetIMRemoveSessionReq_SessionType_RawValue(IMRemoveSessionReq *message, int32_t value) {
  GPBDescriptor *descriptor = [IMRemoveSessionReq descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:IMRemoveSessionReq_FieldNumber_SessionType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - IMRemoveSessionRsp

@implementation IMRemoveSessionRsp

@dynamic userId;
@dynamic resultCode;
@dynamic sessionType;
@dynamic sessionId;
@dynamic attachData;

typedef struct IMRemoveSessionRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t userId;
  uint32_t resultCode;
  SessionType sessionType;
  uint32_t sessionId;
  NSData *attachData;
} IMRemoveSessionRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = IMRemoveSessionRsp_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMRemoveSessionRsp__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "resultCode",
        .dataTypeSpecific.className = NULL,
        .number = IMRemoveSessionRsp_FieldNumber_ResultCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IMRemoveSessionRsp__storage_, resultCode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "sessionType",
        .dataTypeSpecific.enumDescFunc = SessionType_EnumDescriptor,
        .number = IMRemoveSessionRsp_FieldNumber_SessionType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(IMRemoveSessionRsp__storage_, sessionType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "sessionId",
        .dataTypeSpecific.className = NULL,
        .number = IMRemoveSessionRsp_FieldNumber_SessionId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(IMRemoveSessionRsp__storage_, sessionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "attachData",
        .dataTypeSpecific.className = NULL,
        .number = IMRemoveSessionRsp_FieldNumber_AttachData,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(IMRemoveSessionRsp__storage_, attachData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMRemoveSessionRsp class]
                                     rootClass:[ImBuddyRoot class]
                                          file:ImBuddyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMRemoveSessionRsp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t IMRemoveSessionRsp_SessionType_RawValue(IMRemoveSessionRsp *message) {
  GPBDescriptor *descriptor = [IMRemoveSessionRsp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:IMRemoveSessionRsp_FieldNumber_SessionType];
  return GPBGetMessageInt32Field(message, field);
}

void SetIMRemoveSessionRsp_SessionType_RawValue(IMRemoveSessionRsp *message, int32_t value) {
  GPBDescriptor *descriptor = [IMRemoveSessionRsp descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:IMRemoveSessionRsp_FieldNumber_SessionType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - IMAllUserReq

@implementation IMAllUserReq

@dynamic userId;
@dynamic latestUpdateTime;
@dynamic attachData;

typedef struct IMAllUserReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t userId;
  uint32_t latestUpdateTime;
  NSData *attachData;
} IMAllUserReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = IMAllUserReq_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMAllUserReq__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "latestUpdateTime",
        .dataTypeSpecific.className = NULL,
        .number = IMAllUserReq_FieldNumber_LatestUpdateTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IMAllUserReq__storage_, latestUpdateTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "attachData",
        .dataTypeSpecific.className = NULL,
        .number = IMAllUserReq_FieldNumber_AttachData,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(IMAllUserReq__storage_, attachData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMAllUserReq class]
                                     rootClass:[ImBuddyRoot class]
                                          file:ImBuddyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMAllUserReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMAllUserRsp

@implementation IMAllUserRsp

@dynamic userId;
@dynamic latestUpdateTime;
@dynamic userListArray, userListArray_Count;
@dynamic attachData;

typedef struct IMAllUserRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t userId;
  uint32_t latestUpdateTime;
  NSMutableArray *userListArray;
  NSData *attachData;
} IMAllUserRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = IMAllUserRsp_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMAllUserRsp__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "latestUpdateTime",
        .dataTypeSpecific.className = NULL,
        .number = IMAllUserRsp_FieldNumber_LatestUpdateTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IMAllUserRsp__storage_, latestUpdateTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "userListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(UserInfo),
        .number = IMAllUserRsp_FieldNumber_UserListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(IMAllUserRsp__storage_, userListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "attachData",
        .dataTypeSpecific.className = NULL,
        .number = IMAllUserRsp_FieldNumber_AttachData,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(IMAllUserRsp__storage_, attachData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMAllUserRsp class]
                                     rootClass:[ImBuddyRoot class]
                                          file:ImBuddyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMAllUserRsp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMUsersStatReq

@implementation IMUsersStatReq

@dynamic userId;
@dynamic userIdListArray, userIdListArray_Count;
@dynamic attachData;

typedef struct IMUsersStatReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t userId;
  GPBUInt32Array *userIdListArray;
  NSData *attachData;
} IMUsersStatReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = IMUsersStatReq_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMUsersStatReq__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "userIdListArray",
        .dataTypeSpecific.className = NULL,
        .number = IMUsersStatReq_FieldNumber_UserIdListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(IMUsersStatReq__storage_, userIdListArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "attachData",
        .dataTypeSpecific.className = NULL,
        .number = IMUsersStatReq_FieldNumber_AttachData,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IMUsersStatReq__storage_, attachData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMUsersStatReq class]
                                     rootClass:[ImBuddyRoot class]
                                          file:ImBuddyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMUsersStatReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMUsersStatRsp

@implementation IMUsersStatRsp

@dynamic userId;
@dynamic userStatListArray, userStatListArray_Count;
@dynamic attachData;

typedef struct IMUsersStatRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t userId;
  NSMutableArray *userStatListArray;
  NSData *attachData;
} IMUsersStatRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = IMUsersStatRsp_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMUsersStatRsp__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "userStatListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(UserStat),
        .number = IMUsersStatRsp_FieldNumber_UserStatListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(IMUsersStatRsp__storage_, userStatListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "attachData",
        .dataTypeSpecific.className = NULL,
        .number = IMUsersStatRsp_FieldNumber_AttachData,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IMUsersStatRsp__storage_, attachData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMUsersStatRsp class]
                                     rootClass:[ImBuddyRoot class]
                                          file:ImBuddyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMUsersStatRsp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMChangeAvatarReq

@implementation IMChangeAvatarReq

@dynamic userId;
@dynamic avatarURL;
@dynamic attachData;

typedef struct IMChangeAvatarReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t userId;
  NSString *avatarURL;
  NSData *attachData;
} IMChangeAvatarReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = IMChangeAvatarReq_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMChangeAvatarReq__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "avatarURL",
        .dataTypeSpecific.className = NULL,
        .number = IMChangeAvatarReq_FieldNumber_AvatarURL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IMChangeAvatarReq__storage_, avatarURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "attachData",
        .dataTypeSpecific.className = NULL,
        .number = IMChangeAvatarReq_FieldNumber_AttachData,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(IMChangeAvatarReq__storage_, attachData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMChangeAvatarReq class]
                                     rootClass:[ImBuddyRoot class]
                                          file:ImBuddyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMChangeAvatarReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\006\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMChangeAvatarRsp

@implementation IMChangeAvatarRsp

@dynamic userId;
@dynamic resultCode;
@dynamic attachData;

typedef struct IMChangeAvatarRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t userId;
  uint32_t resultCode;
  NSData *attachData;
} IMChangeAvatarRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = IMChangeAvatarRsp_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMChangeAvatarRsp__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "resultCode",
        .dataTypeSpecific.className = NULL,
        .number = IMChangeAvatarRsp_FieldNumber_ResultCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IMChangeAvatarRsp__storage_, resultCode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "attachData",
        .dataTypeSpecific.className = NULL,
        .number = IMChangeAvatarRsp_FieldNumber_AttachData,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(IMChangeAvatarRsp__storage_, attachData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMChangeAvatarRsp class]
                                     rootClass:[ImBuddyRoot class]
                                          file:ImBuddyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMChangeAvatarRsp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMPCLoginStatusNotify

@implementation IMPCLoginStatusNotify

@dynamic userId;
@dynamic loginStat;

typedef struct IMPCLoginStatusNotify__storage_ {
  uint32_t _has_storage_[1];
  uint32_t userId;
  UserStatType loginStat;
} IMPCLoginStatusNotify__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = IMPCLoginStatusNotify_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMPCLoginStatusNotify__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "loginStat",
        .dataTypeSpecific.enumDescFunc = UserStatType_EnumDescriptor,
        .number = IMPCLoginStatusNotify_FieldNumber_LoginStat,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IMPCLoginStatusNotify__storage_, loginStat),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMPCLoginStatusNotify class]
                                     rootClass:[ImBuddyRoot class]
                                          file:ImBuddyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMPCLoginStatusNotify__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t IMPCLoginStatusNotify_LoginStat_RawValue(IMPCLoginStatusNotify *message) {
  GPBDescriptor *descriptor = [IMPCLoginStatusNotify descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:IMPCLoginStatusNotify_FieldNumber_LoginStat];
  return GPBGetMessageInt32Field(message, field);
}

void SetIMPCLoginStatusNotify_LoginStat_RawValue(IMPCLoginStatusNotify *message, int32_t value) {
  GPBDescriptor *descriptor = [IMPCLoginStatusNotify descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:IMPCLoginStatusNotify_FieldNumber_LoginStat];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - IMRemoveSessionNotify

@implementation IMRemoveSessionNotify

@dynamic userId;
@dynamic sessionType;
@dynamic sessionId;

typedef struct IMRemoveSessionNotify__storage_ {
  uint32_t _has_storage_[1];
  uint32_t userId;
  SessionType sessionType;
  uint32_t sessionId;
} IMRemoveSessionNotify__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = IMRemoveSessionNotify_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMRemoveSessionNotify__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "sessionType",
        .dataTypeSpecific.enumDescFunc = SessionType_EnumDescriptor,
        .number = IMRemoveSessionNotify_FieldNumber_SessionType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IMRemoveSessionNotify__storage_, sessionType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "sessionId",
        .dataTypeSpecific.className = NULL,
        .number = IMRemoveSessionNotify_FieldNumber_SessionId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(IMRemoveSessionNotify__storage_, sessionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMRemoveSessionNotify class]
                                     rootClass:[ImBuddyRoot class]
                                          file:ImBuddyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMRemoveSessionNotify__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t IMRemoveSessionNotify_SessionType_RawValue(IMRemoveSessionNotify *message) {
  GPBDescriptor *descriptor = [IMRemoveSessionNotify descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:IMRemoveSessionNotify_FieldNumber_SessionType];
  return GPBGetMessageInt32Field(message, field);
}

void SetIMRemoveSessionNotify_SessionType_RawValue(IMRemoveSessionNotify *message, int32_t value) {
  GPBDescriptor *descriptor = [IMRemoveSessionNotify descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:IMRemoveSessionNotify_FieldNumber_SessionType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - IMDepartmentReq

@implementation IMDepartmentReq

@dynamic userId;
@dynamic latestUpdateTime;
@dynamic attachData;

typedef struct IMDepartmentReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t userId;
  uint32_t latestUpdateTime;
  NSData *attachData;
} IMDepartmentReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = IMDepartmentReq_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMDepartmentReq__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "latestUpdateTime",
        .dataTypeSpecific.className = NULL,
        .number = IMDepartmentReq_FieldNumber_LatestUpdateTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IMDepartmentReq__storage_, latestUpdateTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "attachData",
        .dataTypeSpecific.className = NULL,
        .number = IMDepartmentReq_FieldNumber_AttachData,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(IMDepartmentReq__storage_, attachData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMDepartmentReq class]
                                     rootClass:[ImBuddyRoot class]
                                          file:ImBuddyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMDepartmentReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMDepartmentRsp

@implementation IMDepartmentRsp

@dynamic userId;
@dynamic latestUpdateTime;
@dynamic deptListArray, deptListArray_Count;
@dynamic attachData;

typedef struct IMDepartmentRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t userId;
  uint32_t latestUpdateTime;
  NSMutableArray *deptListArray;
  NSData *attachData;
} IMDepartmentRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = IMDepartmentRsp_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMDepartmentRsp__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "latestUpdateTime",
        .dataTypeSpecific.className = NULL,
        .number = IMDepartmentRsp_FieldNumber_LatestUpdateTime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IMDepartmentRsp__storage_, latestUpdateTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "deptListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(DepartInfo),
        .number = IMDepartmentRsp_FieldNumber_DeptListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(IMDepartmentRsp__storage_, deptListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "attachData",
        .dataTypeSpecific.className = NULL,
        .number = IMDepartmentRsp_FieldNumber_AttachData,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(IMDepartmentRsp__storage_, attachData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMDepartmentRsp class]
                                     rootClass:[ImBuddyRoot class]
                                          file:ImBuddyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMDepartmentRsp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMAvatarChangedNotify

@implementation IMAvatarChangedNotify

@dynamic changedUserId;
@dynamic avatarURL;

typedef struct IMAvatarChangedNotify__storage_ {
  uint32_t _has_storage_[1];
  uint32_t changedUserId;
  NSString *avatarURL;
} IMAvatarChangedNotify__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "changedUserId",
        .dataTypeSpecific.className = NULL,
        .number = IMAvatarChangedNotify_FieldNumber_ChangedUserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMAvatarChangedNotify__storage_, changedUserId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "avatarURL",
        .dataTypeSpecific.className = NULL,
        .number = IMAvatarChangedNotify_FieldNumber_AvatarURL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IMAvatarChangedNotify__storage_, avatarURL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMAvatarChangedNotify class]
                                     rootClass:[ImBuddyRoot class]
                                          file:ImBuddyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMAvatarChangedNotify__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\006\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMChangeSignInfoReq

@implementation IMChangeSignInfoReq

@dynamic userId;
@dynamic signInfo;
@dynamic attachData;

typedef struct IMChangeSignInfoReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t userId;
  NSString *signInfo;
  NSData *attachData;
} IMChangeSignInfoReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = IMChangeSignInfoReq_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMChangeSignInfoReq__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "signInfo",
        .dataTypeSpecific.className = NULL,
        .number = IMChangeSignInfoReq_FieldNumber_SignInfo,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IMChangeSignInfoReq__storage_, signInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "attachData",
        .dataTypeSpecific.className = NULL,
        .number = IMChangeSignInfoReq_FieldNumber_AttachData,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(IMChangeSignInfoReq__storage_, attachData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMChangeSignInfoReq class]
                                     rootClass:[ImBuddyRoot class]
                                          file:ImBuddyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMChangeSignInfoReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMChangeSignInfoRsp

@implementation IMChangeSignInfoRsp

@dynamic userId;
@dynamic resultCode;
@dynamic signInfo;
@dynamic attachData;

typedef struct IMChangeSignInfoRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t userId;
  uint32_t resultCode;
  NSString *signInfo;
  NSData *attachData;
} IMChangeSignInfoRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = IMChangeSignInfoRsp_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMChangeSignInfoRsp__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "resultCode",
        .dataTypeSpecific.className = NULL,
        .number = IMChangeSignInfoRsp_FieldNumber_ResultCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IMChangeSignInfoRsp__storage_, resultCode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "signInfo",
        .dataTypeSpecific.className = NULL,
        .number = IMChangeSignInfoRsp_FieldNumber_SignInfo,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(IMChangeSignInfoRsp__storage_, signInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "attachData",
        .dataTypeSpecific.className = NULL,
        .number = IMChangeSignInfoRsp_FieldNumber_AttachData,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(IMChangeSignInfoRsp__storage_, attachData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMChangeSignInfoRsp class]
                                     rootClass:[ImBuddyRoot class]
                                          file:ImBuddyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMChangeSignInfoRsp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMSignInfoChangedNotify

@implementation IMSignInfoChangedNotify

@dynamic changedUserId;
@dynamic signInfo;

typedef struct IMSignInfoChangedNotify__storage_ {
  uint32_t _has_storage_[1];
  uint32_t changedUserId;
  NSString *signInfo;
} IMSignInfoChangedNotify__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "changedUserId",
        .dataTypeSpecific.className = NULL,
        .number = IMSignInfoChangedNotify_FieldNumber_ChangedUserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMSignInfoChangedNotify__storage_, changedUserId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "signInfo",
        .dataTypeSpecific.className = NULL,
        .number = IMSignInfoChangedNotify_FieldNumber_SignInfo,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IMSignInfoChangedNotify__storage_, signInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMSignInfoChangedNotify class]
                                     rootClass:[ImBuddyRoot class]
                                          file:ImBuddyRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMSignInfoChangedNotify__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
