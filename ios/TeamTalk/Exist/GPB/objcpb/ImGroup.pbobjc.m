// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Group.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "ImGroup.pbobjc.h"
 #import "ImBaseDefine.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ImGroupRoot

@implementation ImGroupRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - ImGroupRoot_FileDescriptor

static GPBFileDescriptor *ImGroupRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"IM.Group"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - IMNormalGroupListReq

@implementation IMNormalGroupListReq

@dynamic hasUserId, userId;
@dynamic hasAttachData, attachData;

typedef struct IMNormalGroupListReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t userId;
  NSData *attachData;
} IMNormalGroupListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = IMNormalGroupListReq_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMNormalGroupListReq__storage_, userId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "attachData",
        .dataTypeSpecific.className = NULL,
        .number = IMNormalGroupListReq_FieldNumber_AttachData,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IMNormalGroupListReq__storage_, attachData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMNormalGroupListReq class]
                                     rootClass:[ImGroupRoot class]
                                          file:ImGroupRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMNormalGroupListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMNormalGroupListRsp

@implementation IMNormalGroupListRsp

@dynamic hasUserId, userId;
@dynamic groupVersionListArray, groupVersionListArray_Count;
@dynamic hasAttachData, attachData;

typedef struct IMNormalGroupListRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t userId;
  NSMutableArray *groupVersionListArray;
  NSData *attachData;
} IMNormalGroupListRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = IMNormalGroupListRsp_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMNormalGroupListRsp__storage_, userId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "groupVersionListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(GroupVersionInfo),
        .number = IMNormalGroupListRsp_FieldNumber_GroupVersionListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(IMNormalGroupListRsp__storage_, groupVersionListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "attachData",
        .dataTypeSpecific.className = NULL,
        .number = IMNormalGroupListRsp_FieldNumber_AttachData,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IMNormalGroupListRsp__storage_, attachData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMNormalGroupListRsp class]
                                     rootClass:[ImGroupRoot class]
                                          file:ImGroupRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMNormalGroupListRsp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMGroupInfoListReq

@implementation IMGroupInfoListReq

@dynamic hasUserId, userId;
@dynamic groupVersionListArray, groupVersionListArray_Count;
@dynamic hasAttachData, attachData;

typedef struct IMGroupInfoListReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t userId;
  NSMutableArray *groupVersionListArray;
  NSData *attachData;
} IMGroupInfoListReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = IMGroupInfoListReq_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMGroupInfoListReq__storage_, userId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "groupVersionListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(GroupVersionInfo),
        .number = IMGroupInfoListReq_FieldNumber_GroupVersionListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(IMGroupInfoListReq__storage_, groupVersionListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "attachData",
        .dataTypeSpecific.className = NULL,
        .number = IMGroupInfoListReq_FieldNumber_AttachData,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IMGroupInfoListReq__storage_, attachData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMGroupInfoListReq class]
                                     rootClass:[ImGroupRoot class]
                                          file:ImGroupRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMGroupInfoListReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMGroupInfoListRsp

@implementation IMGroupInfoListRsp

@dynamic hasUserId, userId;
@dynamic groupInfoListArray, groupInfoListArray_Count;
@dynamic hasAttachData, attachData;

typedef struct IMGroupInfoListRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t userId;
  NSMutableArray *groupInfoListArray;
  NSData *attachData;
} IMGroupInfoListRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = IMGroupInfoListRsp_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMGroupInfoListRsp__storage_, userId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "groupInfoListArray",
        .dataTypeSpecific.className = GPBStringifySymbol(GroupInfo),
        .number = IMGroupInfoListRsp_FieldNumber_GroupInfoListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(IMGroupInfoListRsp__storage_, groupInfoListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "attachData",
        .dataTypeSpecific.className = NULL,
        .number = IMGroupInfoListRsp_FieldNumber_AttachData,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IMGroupInfoListRsp__storage_, attachData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMGroupInfoListRsp class]
                                     rootClass:[ImGroupRoot class]
                                          file:ImGroupRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMGroupInfoListRsp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMGroupCreateReq

@implementation IMGroupCreateReq

@dynamic hasUserId, userId;
@dynamic hasGroupType, groupType;
@dynamic hasGroupName, groupName;
@dynamic hasGroupAvatar, groupAvatar;
@dynamic memberIdListArray, memberIdListArray_Count;
@dynamic hasAttachData, attachData;

typedef struct IMGroupCreateReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t userId;
  GroupType groupType;
  NSString *groupName;
  NSString *groupAvatar;
  GPBUInt32Array *memberIdListArray;
  NSData *attachData;
} IMGroupCreateReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescriptionWithDefault fields[] = {
      {
        .defaultValue.valueUInt32 = 0U,
        .core.name = "userId",
        .core.dataTypeSpecific.className = NULL,
        .core.number = IMGroupCreateReq_FieldNumber_UserId,
        .core.hasIndex = 0,
        .core.offset = (uint32_t)offsetof(IMGroupCreateReq__storage_, userId),
        .core.flags = GPBFieldRequired,
        .core.dataType = GPBDataTypeUInt32,
      },
      {
        .defaultValue.valueEnum = GroupType_GroupTypeTmp,
        .core.name = "groupType",
        .core.dataTypeSpecific.enumDescFunc = GroupType_EnumDescriptor,
        .core.number = IMGroupCreateReq_FieldNumber_GroupType,
        .core.hasIndex = 1,
        .core.offset = (uint32_t)offsetof(IMGroupCreateReq__storage_, groupType),
        .core.flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasDefaultValue | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
      {
        .defaultValue.valueString = nil,
        .core.name = "groupName",
        .core.dataTypeSpecific.className = NULL,
        .core.number = IMGroupCreateReq_FieldNumber_GroupName,
        .core.hasIndex = 2,
        .core.offset = (uint32_t)offsetof(IMGroupCreateReq__storage_, groupName),
        .core.flags = GPBFieldRequired,
        .core.dataType = GPBDataTypeString,
      },
      {
        .defaultValue.valueString = nil,
        .core.name = "groupAvatar",
        .core.dataTypeSpecific.className = NULL,
        .core.number = IMGroupCreateReq_FieldNumber_GroupAvatar,
        .core.hasIndex = 3,
        .core.offset = (uint32_t)offsetof(IMGroupCreateReq__storage_, groupAvatar),
        .core.flags = GPBFieldRequired,
        .core.dataType = GPBDataTypeString,
      },
      {
        .defaultValue.valueMessage = nil,
        .core.name = "memberIdListArray",
        .core.dataTypeSpecific.className = NULL,
        .core.number = IMGroupCreateReq_FieldNumber_MemberIdListArray,
        .core.hasIndex = GPBNoHasBit,
        .core.offset = (uint32_t)offsetof(IMGroupCreateReq__storage_, memberIdListArray),
        .core.flags = GPBFieldRepeated,
        .core.dataType = GPBDataTypeUInt32,
      },
      {
        .defaultValue.valueData = nil,
        .core.name = "attachData",
        .core.dataTypeSpecific.className = NULL,
        .core.number = IMGroupCreateReq_FieldNumber_AttachData,
        .core.hasIndex = 4,
        .core.offset = (uint32_t)offsetof(IMGroupCreateReq__storage_, attachData),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMGroupCreateReq class]
                                     rootClass:[ImGroupRoot class]
                                          file:ImGroupRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescriptionWithDefault))
                                   storageSize:sizeof(IMGroupCreateReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_FieldsWithDefault];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMGroupCreateRsp

@implementation IMGroupCreateRsp

@dynamic hasUserId, userId;
@dynamic hasResultCode, resultCode;
@dynamic hasGroupId, groupId;
@dynamic hasGroupName, groupName;
@dynamic userIdListArray, userIdListArray_Count;
@dynamic hasAttachData, attachData;

typedef struct IMGroupCreateRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t userId;
  uint32_t resultCode;
  uint32_t groupId;
  NSString *groupName;
  GPBUInt32Array *userIdListArray;
  NSData *attachData;
} IMGroupCreateRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = IMGroupCreateRsp_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMGroupCreateRsp__storage_, userId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "resultCode",
        .dataTypeSpecific.className = NULL,
        .number = IMGroupCreateRsp_FieldNumber_ResultCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IMGroupCreateRsp__storage_, resultCode),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "groupId",
        .dataTypeSpecific.className = NULL,
        .number = IMGroupCreateRsp_FieldNumber_GroupId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(IMGroupCreateRsp__storage_, groupId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "groupName",
        .dataTypeSpecific.className = NULL,
        .number = IMGroupCreateRsp_FieldNumber_GroupName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(IMGroupCreateRsp__storage_, groupName),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userIdListArray",
        .dataTypeSpecific.className = NULL,
        .number = IMGroupCreateRsp_FieldNumber_UserIdListArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(IMGroupCreateRsp__storage_, userIdListArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "attachData",
        .dataTypeSpecific.className = NULL,
        .number = IMGroupCreateRsp_FieldNumber_AttachData,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(IMGroupCreateRsp__storage_, attachData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMGroupCreateRsp class]
                                     rootClass:[ImGroupRoot class]
                                          file:ImGroupRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMGroupCreateRsp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMGroupChangeMemberReq

@implementation IMGroupChangeMemberReq

@dynamic hasUserId, userId;
@dynamic hasChangeType, changeType;
@dynamic hasGroupId, groupId;
@dynamic memberIdListArray, memberIdListArray_Count;
@dynamic hasAttachData, attachData;

typedef struct IMGroupChangeMemberReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t userId;
  GroupModifyType changeType;
  uint32_t groupId;
  GPBUInt32Array *memberIdListArray;
  NSData *attachData;
} IMGroupChangeMemberReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescriptionWithDefault fields[] = {
      {
        .defaultValue.valueUInt32 = 0U,
        .core.name = "userId",
        .core.dataTypeSpecific.className = NULL,
        .core.number = IMGroupChangeMemberReq_FieldNumber_UserId,
        .core.hasIndex = 0,
        .core.offset = (uint32_t)offsetof(IMGroupChangeMemberReq__storage_, userId),
        .core.flags = GPBFieldRequired,
        .core.dataType = GPBDataTypeUInt32,
      },
      {
        .defaultValue.valueEnum = GroupModifyType_GroupModifyTypeAdd,
        .core.name = "changeType",
        .core.dataTypeSpecific.enumDescFunc = GroupModifyType_EnumDescriptor,
        .core.number = IMGroupChangeMemberReq_FieldNumber_ChangeType,
        .core.hasIndex = 1,
        .core.offset = (uint32_t)offsetof(IMGroupChangeMemberReq__storage_, changeType),
        .core.flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
      {
        .defaultValue.valueUInt32 = 0U,
        .core.name = "groupId",
        .core.dataTypeSpecific.className = NULL,
        .core.number = IMGroupChangeMemberReq_FieldNumber_GroupId,
        .core.hasIndex = 2,
        .core.offset = (uint32_t)offsetof(IMGroupChangeMemberReq__storage_, groupId),
        .core.flags = GPBFieldRequired,
        .core.dataType = GPBDataTypeUInt32,
      },
      {
        .defaultValue.valueMessage = nil,
        .core.name = "memberIdListArray",
        .core.dataTypeSpecific.className = NULL,
        .core.number = IMGroupChangeMemberReq_FieldNumber_MemberIdListArray,
        .core.hasIndex = GPBNoHasBit,
        .core.offset = (uint32_t)offsetof(IMGroupChangeMemberReq__storage_, memberIdListArray),
        .core.flags = GPBFieldRepeated,
        .core.dataType = GPBDataTypeUInt32,
      },
      {
        .defaultValue.valueData = nil,
        .core.name = "attachData",
        .core.dataTypeSpecific.className = NULL,
        .core.number = IMGroupChangeMemberReq_FieldNumber_AttachData,
        .core.hasIndex = 3,
        .core.offset = (uint32_t)offsetof(IMGroupChangeMemberReq__storage_, attachData),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMGroupChangeMemberReq class]
                                     rootClass:[ImGroupRoot class]
                                          file:ImGroupRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescriptionWithDefault))
                                   storageSize:sizeof(IMGroupChangeMemberReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_FieldsWithDefault];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMGroupChangeMemberRsp

@implementation IMGroupChangeMemberRsp

@dynamic hasUserId, userId;
@dynamic hasChangeType, changeType;
@dynamic hasResultCode, resultCode;
@dynamic hasGroupId, groupId;
@dynamic curUserIdListArray, curUserIdListArray_Count;
@dynamic chgUserIdListArray, chgUserIdListArray_Count;
@dynamic hasAttachData, attachData;

typedef struct IMGroupChangeMemberRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t userId;
  GroupModifyType changeType;
  uint32_t resultCode;
  uint32_t groupId;
  GPBUInt32Array *curUserIdListArray;
  GPBUInt32Array *chgUserIdListArray;
  NSData *attachData;
} IMGroupChangeMemberRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescriptionWithDefault fields[] = {
      {
        .defaultValue.valueUInt32 = 0U,
        .core.name = "userId",
        .core.dataTypeSpecific.className = NULL,
        .core.number = IMGroupChangeMemberRsp_FieldNumber_UserId,
        .core.hasIndex = 0,
        .core.offset = (uint32_t)offsetof(IMGroupChangeMemberRsp__storage_, userId),
        .core.flags = GPBFieldRequired,
        .core.dataType = GPBDataTypeUInt32,
      },
      {
        .defaultValue.valueEnum = GroupModifyType_GroupModifyTypeAdd,
        .core.name = "changeType",
        .core.dataTypeSpecific.enumDescFunc = GroupModifyType_EnumDescriptor,
        .core.number = IMGroupChangeMemberRsp_FieldNumber_ChangeType,
        .core.hasIndex = 1,
        .core.offset = (uint32_t)offsetof(IMGroupChangeMemberRsp__storage_, changeType),
        .core.flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
      {
        .defaultValue.valueUInt32 = 0U,
        .core.name = "resultCode",
        .core.dataTypeSpecific.className = NULL,
        .core.number = IMGroupChangeMemberRsp_FieldNumber_ResultCode,
        .core.hasIndex = 2,
        .core.offset = (uint32_t)offsetof(IMGroupChangeMemberRsp__storage_, resultCode),
        .core.flags = GPBFieldRequired,
        .core.dataType = GPBDataTypeUInt32,
      },
      {
        .defaultValue.valueUInt32 = 0U,
        .core.name = "groupId",
        .core.dataTypeSpecific.className = NULL,
        .core.number = IMGroupChangeMemberRsp_FieldNumber_GroupId,
        .core.hasIndex = 3,
        .core.offset = (uint32_t)offsetof(IMGroupChangeMemberRsp__storage_, groupId),
        .core.flags = GPBFieldRequired,
        .core.dataType = GPBDataTypeUInt32,
      },
      {
        .defaultValue.valueMessage = nil,
        .core.name = "curUserIdListArray",
        .core.dataTypeSpecific.className = NULL,
        .core.number = IMGroupChangeMemberRsp_FieldNumber_CurUserIdListArray,
        .core.hasIndex = GPBNoHasBit,
        .core.offset = (uint32_t)offsetof(IMGroupChangeMemberRsp__storage_, curUserIdListArray),
        .core.flags = GPBFieldRepeated,
        .core.dataType = GPBDataTypeUInt32,
      },
      {
        .defaultValue.valueMessage = nil,
        .core.name = "chgUserIdListArray",
        .core.dataTypeSpecific.className = NULL,
        .core.number = IMGroupChangeMemberRsp_FieldNumber_ChgUserIdListArray,
        .core.hasIndex = GPBNoHasBit,
        .core.offset = (uint32_t)offsetof(IMGroupChangeMemberRsp__storage_, chgUserIdListArray),
        .core.flags = GPBFieldRepeated,
        .core.dataType = GPBDataTypeUInt32,
      },
      {
        .defaultValue.valueData = nil,
        .core.name = "attachData",
        .core.dataTypeSpecific.className = NULL,
        .core.number = IMGroupChangeMemberRsp_FieldNumber_AttachData,
        .core.hasIndex = 4,
        .core.offset = (uint32_t)offsetof(IMGroupChangeMemberRsp__storage_, attachData),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMGroupChangeMemberRsp class]
                                     rootClass:[ImGroupRoot class]
                                          file:ImGroupRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescriptionWithDefault))
                                   storageSize:sizeof(IMGroupChangeMemberRsp__storage_)
                                         flags:GPBDescriptorInitializationFlag_FieldsWithDefault];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMGroupShieldReq

@implementation IMGroupShieldReq

@dynamic hasUserId, userId;
@dynamic hasGroupId, groupId;
@dynamic hasShieldStatus, shieldStatus;
@dynamic hasAttachData, attachData;

typedef struct IMGroupShieldReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t userId;
  uint32_t groupId;
  uint32_t shieldStatus;
  NSData *attachData;
} IMGroupShieldReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = IMGroupShieldReq_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMGroupShieldReq__storage_, userId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "groupId",
        .dataTypeSpecific.className = NULL,
        .number = IMGroupShieldReq_FieldNumber_GroupId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IMGroupShieldReq__storage_, groupId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "shieldStatus",
        .dataTypeSpecific.className = NULL,
        .number = IMGroupShieldReq_FieldNumber_ShieldStatus,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(IMGroupShieldReq__storage_, shieldStatus),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "attachData",
        .dataTypeSpecific.className = NULL,
        .number = IMGroupShieldReq_FieldNumber_AttachData,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(IMGroupShieldReq__storage_, attachData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMGroupShieldReq class]
                                     rootClass:[ImGroupRoot class]
                                          file:ImGroupRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMGroupShieldReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMGroupShieldRsp

@implementation IMGroupShieldRsp

@dynamic hasUserId, userId;
@dynamic hasGroupId, groupId;
@dynamic hasResultCode, resultCode;
@dynamic hasAttachData, attachData;

typedef struct IMGroupShieldRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t userId;
  uint32_t groupId;
  uint32_t resultCode;
  NSData *attachData;
} IMGroupShieldRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = IMGroupShieldRsp_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMGroupShieldRsp__storage_, userId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "groupId",
        .dataTypeSpecific.className = NULL,
        .number = IMGroupShieldRsp_FieldNumber_GroupId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IMGroupShieldRsp__storage_, groupId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "resultCode",
        .dataTypeSpecific.className = NULL,
        .number = IMGroupShieldRsp_FieldNumber_ResultCode,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(IMGroupShieldRsp__storage_, resultCode),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "attachData",
        .dataTypeSpecific.className = NULL,
        .number = IMGroupShieldRsp_FieldNumber_AttachData,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(IMGroupShieldRsp__storage_, attachData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMGroupShieldRsp class]
                                     rootClass:[ImGroupRoot class]
                                          file:ImGroupRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMGroupShieldRsp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMGroupChangeMemberNotify

@implementation IMGroupChangeMemberNotify

@dynamic hasUserId, userId;
@dynamic hasChangeType, changeType;
@dynamic hasGroupId, groupId;
@dynamic curUserIdListArray, curUserIdListArray_Count;
@dynamic chgUserIdListArray, chgUserIdListArray_Count;

typedef struct IMGroupChangeMemberNotify__storage_ {
  uint32_t _has_storage_[1];
  uint32_t userId;
  GroupModifyType changeType;
  uint32_t groupId;
  GPBUInt32Array *curUserIdListArray;
  GPBUInt32Array *chgUserIdListArray;
} IMGroupChangeMemberNotify__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescriptionWithDefault fields[] = {
      {
        .defaultValue.valueUInt32 = 0U,
        .core.name = "userId",
        .core.dataTypeSpecific.className = NULL,
        .core.number = IMGroupChangeMemberNotify_FieldNumber_UserId,
        .core.hasIndex = 0,
        .core.offset = (uint32_t)offsetof(IMGroupChangeMemberNotify__storage_, userId),
        .core.flags = GPBFieldRequired,
        .core.dataType = GPBDataTypeUInt32,
      },
      {
        .defaultValue.valueEnum = GroupModifyType_GroupModifyTypeAdd,
        .core.name = "changeType",
        .core.dataTypeSpecific.enumDescFunc = GroupModifyType_EnumDescriptor,
        .core.number = IMGroupChangeMemberNotify_FieldNumber_ChangeType,
        .core.hasIndex = 1,
        .core.offset = (uint32_t)offsetof(IMGroupChangeMemberNotify__storage_, changeType),
        .core.flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
      {
        .defaultValue.valueUInt32 = 0U,
        .core.name = "groupId",
        .core.dataTypeSpecific.className = NULL,
        .core.number = IMGroupChangeMemberNotify_FieldNumber_GroupId,
        .core.hasIndex = 2,
        .core.offset = (uint32_t)offsetof(IMGroupChangeMemberNotify__storage_, groupId),
        .core.flags = GPBFieldRequired,
        .core.dataType = GPBDataTypeUInt32,
      },
      {
        .defaultValue.valueMessage = nil,
        .core.name = "curUserIdListArray",
        .core.dataTypeSpecific.className = NULL,
        .core.number = IMGroupChangeMemberNotify_FieldNumber_CurUserIdListArray,
        .core.hasIndex = GPBNoHasBit,
        .core.offset = (uint32_t)offsetof(IMGroupChangeMemberNotify__storage_, curUserIdListArray),
        .core.flags = GPBFieldRepeated,
        .core.dataType = GPBDataTypeUInt32,
      },
      {
        .defaultValue.valueMessage = nil,
        .core.name = "chgUserIdListArray",
        .core.dataTypeSpecific.className = NULL,
        .core.number = IMGroupChangeMemberNotify_FieldNumber_ChgUserIdListArray,
        .core.hasIndex = GPBNoHasBit,
        .core.offset = (uint32_t)offsetof(IMGroupChangeMemberNotify__storage_, chgUserIdListArray),
        .core.flags = GPBFieldRepeated,
        .core.dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMGroupChangeMemberNotify class]
                                     rootClass:[ImGroupRoot class]
                                          file:ImGroupRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescriptionWithDefault))
                                   storageSize:sizeof(IMGroupChangeMemberNotify__storage_)
                                         flags:GPBDescriptorInitializationFlag_FieldsWithDefault];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
