// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.Login.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "ImLogin.pbobjc.h"
 #import "ImBaseDefine.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ImLoginRoot

@implementation ImLoginRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - ImLoginRoot_FileDescriptor

static GPBFileDescriptor *ImLoginRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"IM.Login"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - IMMsgServReq

@implementation IMMsgServReq


typedef struct IMMsgServReq__storage_ {
  uint32_t _has_storage_[1];
} IMMsgServReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMMsgServReq class]
                                     rootClass:[ImLoginRoot class]
                                          file:ImLoginRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(IMMsgServReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMMsgServRsp

@implementation IMMsgServRsp

@dynamic hasResultCode, resultCode;
@dynamic hasPriorIp, priorIp;
@dynamic hasBackipIp, backipIp;
@dynamic hasPort, port;

typedef struct IMMsgServRsp__storage_ {
  uint32_t _has_storage_[1];
  ResultType resultCode;
  uint32_t port;
  NSString *priorIp;
  NSString *backipIp;
} IMMsgServRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "resultCode",
        .dataTypeSpecific.enumDescFunc = ResultType_EnumDescriptor,
        .number = IMMsgServRsp_FieldNumber_ResultCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMMsgServRsp__storage_, resultCode),
        .flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "priorIp",
        .dataTypeSpecific.className = NULL,
        .number = IMMsgServRsp_FieldNumber_PriorIp,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IMMsgServRsp__storage_, priorIp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "backipIp",
        .dataTypeSpecific.className = NULL,
        .number = IMMsgServRsp_FieldNumber_BackipIp,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(IMMsgServRsp__storage_, backipIp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "port",
        .dataTypeSpecific.className = NULL,
        .number = IMMsgServRsp_FieldNumber_Port,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(IMMsgServRsp__storage_, port),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMMsgServRsp class]
                                     rootClass:[ImLoginRoot class]
                                          file:ImLoginRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMMsgServRsp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMLoginReq

@implementation IMLoginReq

@dynamic hasUserName, userName;
@dynamic hasPassword, password;
@dynamic hasOnlineStatus, onlineStatus;
@dynamic hasClientType, clientType;
@dynamic hasClientVersion, clientVersion;

typedef struct IMLoginReq__storage_ {
  uint32_t _has_storage_[1];
  UserStatType onlineStatus;
  ClientType clientType;
  NSString *userName;
  NSString *password;
  NSString *clientVersion;
} IMLoginReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescriptionWithDefault fields[] = {
      {
        .defaultValue.valueString = nil,
        .core.name = "userName",
        .core.dataTypeSpecific.className = NULL,
        .core.number = IMLoginReq_FieldNumber_UserName,
        .core.hasIndex = 0,
        .core.offset = (uint32_t)offsetof(IMLoginReq__storage_, userName),
        .core.flags = GPBFieldRequired,
        .core.dataType = GPBDataTypeString,
      },
      {
        .defaultValue.valueString = nil,
        .core.name = "password",
        .core.dataTypeSpecific.className = NULL,
        .core.number = IMLoginReq_FieldNumber_Password,
        .core.hasIndex = 1,
        .core.offset = (uint32_t)offsetof(IMLoginReq__storage_, password),
        .core.flags = GPBFieldRequired,
        .core.dataType = GPBDataTypeString,
      },
      {
        .defaultValue.valueEnum = UserStatType_UserStatusOnline,
        .core.name = "onlineStatus",
        .core.dataTypeSpecific.enumDescFunc = UserStatType_EnumDescriptor,
        .core.number = IMLoginReq_FieldNumber_OnlineStatus,
        .core.hasIndex = 2,
        .core.offset = (uint32_t)offsetof(IMLoginReq__storage_, onlineStatus),
        .core.flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
      {
        .defaultValue.valueEnum = ClientType_ClientTypeWindows,
        .core.name = "clientType",
        .core.dataTypeSpecific.enumDescFunc = ClientType_EnumDescriptor,
        .core.number = IMLoginReq_FieldNumber_ClientType,
        .core.hasIndex = 3,
        .core.offset = (uint32_t)offsetof(IMLoginReq__storage_, clientType),
        .core.flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
      {
        .defaultValue.valueString = nil,
        .core.name = "clientVersion",
        .core.dataTypeSpecific.className = NULL,
        .core.number = IMLoginReq_FieldNumber_ClientVersion,
        .core.hasIndex = 4,
        .core.offset = (uint32_t)offsetof(IMLoginReq__storage_, clientVersion),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMLoginReq class]
                                     rootClass:[ImLoginRoot class]
                                          file:ImLoginRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescriptionWithDefault))
                                   storageSize:sizeof(IMLoginReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_FieldsWithDefault];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMLoginRes

@implementation IMLoginRes

@dynamic hasServerTime, serverTime;
@dynamic hasResultCode, resultCode;
@dynamic hasResultString, resultString;
@dynamic hasOnlineStatus, onlineStatus;
@dynamic hasUserInfo, userInfo;

typedef struct IMLoginRes__storage_ {
  uint32_t _has_storage_[1];
  uint32_t serverTime;
  ResultType resultCode;
  UserStatType onlineStatus;
  NSString *resultString;
  UserInfo *userInfo;
} IMLoginRes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescriptionWithDefault fields[] = {
      {
        .defaultValue.valueUInt32 = 0U,
        .core.name = "serverTime",
        .core.dataTypeSpecific.className = NULL,
        .core.number = IMLoginRes_FieldNumber_ServerTime,
        .core.hasIndex = 0,
        .core.offset = (uint32_t)offsetof(IMLoginRes__storage_, serverTime),
        .core.flags = GPBFieldRequired,
        .core.dataType = GPBDataTypeUInt32,
      },
      {
        .defaultValue.valueEnum = ResultType_RefuseReasonNone,
        .core.name = "resultCode",
        .core.dataTypeSpecific.enumDescFunc = ResultType_EnumDescriptor,
        .core.number = IMLoginRes_FieldNumber_ResultCode,
        .core.hasIndex = 1,
        .core.offset = (uint32_t)offsetof(IMLoginRes__storage_, resultCode),
        .core.flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
      {
        .defaultValue.valueString = nil,
        .core.name = "resultString",
        .core.dataTypeSpecific.className = NULL,
        .core.number = IMLoginRes_FieldNumber_ResultString,
        .core.hasIndex = 2,
        .core.offset = (uint32_t)offsetof(IMLoginRes__storage_, resultString),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeString,
      },
      {
        .defaultValue.valueEnum = UserStatType_UserStatusOnline,
        .core.name = "onlineStatus",
        .core.dataTypeSpecific.enumDescFunc = UserStatType_EnumDescriptor,
        .core.number = IMLoginRes_FieldNumber_OnlineStatus,
        .core.hasIndex = 3,
        .core.offset = (uint32_t)offsetof(IMLoginRes__storage_, onlineStatus),
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
      {
        .defaultValue.valueMessage = nil,
        .core.name = "userInfo",
        .core.dataTypeSpecific.className = GPBStringifySymbol(UserInfo),
        .core.number = IMLoginRes_FieldNumber_UserInfo,
        .core.hasIndex = 4,
        .core.offset = (uint32_t)offsetof(IMLoginRes__storage_, userInfo),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMLoginRes class]
                                     rootClass:[ImLoginRoot class]
                                          file:ImLoginRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescriptionWithDefault))
                                   storageSize:sizeof(IMLoginRes__storage_)
                                         flags:GPBDescriptorInitializationFlag_FieldsWithDefault];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMLogoutReq

@implementation IMLogoutReq


typedef struct IMLogoutReq__storage_ {
  uint32_t _has_storage_[1];
} IMLogoutReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMLogoutReq class]
                                     rootClass:[ImLoginRoot class]
                                          file:ImLoginRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(IMLogoutReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMLogoutRsp

@implementation IMLogoutRsp

@dynamic hasResultCode, resultCode;

typedef struct IMLogoutRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t resultCode;
} IMLogoutRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "resultCode",
        .dataTypeSpecific.className = NULL,
        .number = IMLogoutRsp_FieldNumber_ResultCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMLogoutRsp__storage_, resultCode),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMLogoutRsp class]
                                     rootClass:[ImLoginRoot class]
                                          file:ImLoginRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMLogoutRsp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMKickUser

@implementation IMKickUser

@dynamic hasUserId, userId;
@dynamic hasKickReason, kickReason;

typedef struct IMKickUser__storage_ {
  uint32_t _has_storage_[1];
  uint32_t userId;
  KickReasonType kickReason;
} IMKickUser__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescriptionWithDefault fields[] = {
      {
        .defaultValue.valueUInt32 = 0U,
        .core.name = "userId",
        .core.dataTypeSpecific.className = NULL,
        .core.number = IMKickUser_FieldNumber_UserId,
        .core.hasIndex = 0,
        .core.offset = (uint32_t)offsetof(IMKickUser__storage_, userId),
        .core.flags = GPBFieldRequired,
        .core.dataType = GPBDataTypeUInt32,
      },
      {
        .defaultValue.valueEnum = KickReasonType_KickReasonDuplicateUser,
        .core.name = "kickReason",
        .core.dataTypeSpecific.enumDescFunc = KickReasonType_EnumDescriptor,
        .core.number = IMKickUser_FieldNumber_KickReason,
        .core.hasIndex = 1,
        .core.offset = (uint32_t)offsetof(IMKickUser__storage_, kickReason),
        .core.flags = (GPBFieldFlags)(GPBFieldRequired | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMKickUser class]
                                     rootClass:[ImLoginRoot class]
                                          file:ImLoginRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescriptionWithDefault))
                                   storageSize:sizeof(IMKickUser__storage_)
                                         flags:GPBDescriptorInitializationFlag_FieldsWithDefault];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMDeviceTokenReq

@implementation IMDeviceTokenReq

@dynamic hasUserId, userId;
@dynamic hasDeviceToken, deviceToken;
@dynamic hasClientType, clientType;
@dynamic hasAttachData, attachData;

typedef struct IMDeviceTokenReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t userId;
  ClientType clientType;
  NSString *deviceToken;
  NSData *attachData;
} IMDeviceTokenReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescriptionWithDefault fields[] = {
      {
        .defaultValue.valueUInt32 = 0U,
        .core.name = "userId",
        .core.dataTypeSpecific.className = NULL,
        .core.number = IMDeviceTokenReq_FieldNumber_UserId,
        .core.hasIndex = 0,
        .core.offset = (uint32_t)offsetof(IMDeviceTokenReq__storage_, userId),
        .core.flags = GPBFieldRequired,
        .core.dataType = GPBDataTypeUInt32,
      },
      {
        .defaultValue.valueString = nil,
        .core.name = "deviceToken",
        .core.dataTypeSpecific.className = NULL,
        .core.number = IMDeviceTokenReq_FieldNumber_DeviceToken,
        .core.hasIndex = 1,
        .core.offset = (uint32_t)offsetof(IMDeviceTokenReq__storage_, deviceToken),
        .core.flags = GPBFieldRequired,
        .core.dataType = GPBDataTypeString,
      },
      {
        .defaultValue.valueEnum = ClientType_ClientTypeWindows,
        .core.name = "clientType",
        .core.dataTypeSpecific.enumDescFunc = ClientType_EnumDescriptor,
        .core.number = IMDeviceTokenReq_FieldNumber_ClientType,
        .core.hasIndex = 2,
        .core.offset = (uint32_t)offsetof(IMDeviceTokenReq__storage_, clientType),
        .core.flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .core.dataType = GPBDataTypeEnum,
      },
      {
        .defaultValue.valueData = nil,
        .core.name = "attachData",
        .core.dataTypeSpecific.className = NULL,
        .core.number = IMDeviceTokenReq_FieldNumber_AttachData,
        .core.hasIndex = 3,
        .core.offset = (uint32_t)offsetof(IMDeviceTokenReq__storage_, attachData),
        .core.flags = GPBFieldOptional,
        .core.dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMDeviceTokenReq class]
                                     rootClass:[ImLoginRoot class]
                                          file:ImLoginRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescriptionWithDefault))
                                   storageSize:sizeof(IMDeviceTokenReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_FieldsWithDefault];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMDeviceTokenRsp

@implementation IMDeviceTokenRsp

@dynamic hasUserId, userId;
@dynamic hasAttachData, attachData;

typedef struct IMDeviceTokenRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t userId;
  NSData *attachData;
} IMDeviceTokenRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = IMDeviceTokenRsp_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMDeviceTokenRsp__storage_, userId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "attachData",
        .dataTypeSpecific.className = NULL,
        .number = IMDeviceTokenRsp_FieldNumber_AttachData,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IMDeviceTokenRsp__storage_, attachData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMDeviceTokenRsp class]
                                     rootClass:[ImLoginRoot class]
                                          file:ImLoginRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMDeviceTokenRsp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMKickPCClientReq

@implementation IMKickPCClientReq

@dynamic hasUserId, userId;

typedef struct IMKickPCClientReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t userId;
} IMKickPCClientReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = IMKickPCClientReq_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMKickPCClientReq__storage_, userId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMKickPCClientReq class]
                                     rootClass:[ImLoginRoot class]
                                          file:ImLoginRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMKickPCClientReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMKickPCClientRsp

@implementation IMKickPCClientRsp

@dynamic hasUserId, userId;
@dynamic hasResultCode, resultCode;

typedef struct IMKickPCClientRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t userId;
  uint32_t resultCode;
} IMKickPCClientRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = IMKickPCClientRsp_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMKickPCClientRsp__storage_, userId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "resultCode",
        .dataTypeSpecific.className = NULL,
        .number = IMKickPCClientRsp_FieldNumber_ResultCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IMKickPCClientRsp__storage_, resultCode),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMKickPCClientRsp class]
                                     rootClass:[ImLoginRoot class]
                                          file:ImLoginRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMKickPCClientRsp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMPushShieldReq

@implementation IMPushShieldReq

@dynamic hasUserId, userId;
@dynamic hasShieldStatus, shieldStatus;
@dynamic hasAttachData, attachData;

typedef struct IMPushShieldReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t userId;
  uint32_t shieldStatus;
  NSData *attachData;
} IMPushShieldReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = IMPushShieldReq_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMPushShieldReq__storage_, userId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "shieldStatus",
        .dataTypeSpecific.className = NULL,
        .number = IMPushShieldReq_FieldNumber_ShieldStatus,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IMPushShieldReq__storage_, shieldStatus),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "attachData",
        .dataTypeSpecific.className = NULL,
        .number = IMPushShieldReq_FieldNumber_AttachData,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(IMPushShieldReq__storage_, attachData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMPushShieldReq class]
                                     rootClass:[ImLoginRoot class]
                                          file:ImLoginRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMPushShieldReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMPushShieldRsp

@implementation IMPushShieldRsp

@dynamic hasUserId, userId;
@dynamic hasResultCode, resultCode;
@dynamic hasShieldStatus, shieldStatus;
@dynamic hasAttachData, attachData;

typedef struct IMPushShieldRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t userId;
  uint32_t resultCode;
  uint32_t shieldStatus;
  NSData *attachData;
} IMPushShieldRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = IMPushShieldRsp_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMPushShieldRsp__storage_, userId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "resultCode",
        .dataTypeSpecific.className = NULL,
        .number = IMPushShieldRsp_FieldNumber_ResultCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IMPushShieldRsp__storage_, resultCode),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "shieldStatus",
        .dataTypeSpecific.className = NULL,
        .number = IMPushShieldRsp_FieldNumber_ShieldStatus,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(IMPushShieldRsp__storage_, shieldStatus),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "attachData",
        .dataTypeSpecific.className = NULL,
        .number = IMPushShieldRsp_FieldNumber_AttachData,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(IMPushShieldRsp__storage_, attachData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMPushShieldRsp class]
                                     rootClass:[ImLoginRoot class]
                                          file:ImLoginRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMPushShieldRsp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMQueryPushShieldReq

@implementation IMQueryPushShieldReq

@dynamic hasUserId, userId;
@dynamic hasAttachData, attachData;

typedef struct IMQueryPushShieldReq__storage_ {
  uint32_t _has_storage_[1];
  uint32_t userId;
  NSData *attachData;
} IMQueryPushShieldReq__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = IMQueryPushShieldReq_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMQueryPushShieldReq__storage_, userId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "attachData",
        .dataTypeSpecific.className = NULL,
        .number = IMQueryPushShieldReq_FieldNumber_AttachData,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IMQueryPushShieldReq__storage_, attachData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMQueryPushShieldReq class]
                                     rootClass:[ImLoginRoot class]
                                          file:ImLoginRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMQueryPushShieldReq__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - IMQueryPushShieldRsp

@implementation IMQueryPushShieldRsp

@dynamic hasUserId, userId;
@dynamic hasResultCode, resultCode;
@dynamic hasShieldStatus, shieldStatus;
@dynamic hasAttachData, attachData;

typedef struct IMQueryPushShieldRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t userId;
  uint32_t resultCode;
  uint32_t shieldStatus;
  NSData *attachData;
} IMQueryPushShieldRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = IMQueryPushShieldRsp_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(IMQueryPushShieldRsp__storage_, userId),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "resultCode",
        .dataTypeSpecific.className = NULL,
        .number = IMQueryPushShieldRsp_FieldNumber_ResultCode,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(IMQueryPushShieldRsp__storage_, resultCode),
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "shieldStatus",
        .dataTypeSpecific.className = NULL,
        .number = IMQueryPushShieldRsp_FieldNumber_ShieldStatus,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(IMQueryPushShieldRsp__storage_, shieldStatus),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "attachData",
        .dataTypeSpecific.className = NULL,
        .number = IMQueryPushShieldRsp_FieldNumber_AttachData,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(IMQueryPushShieldRsp__storage_, attachData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[IMQueryPushShieldRsp class]
                                     rootClass:[ImLoginRoot class]
                                          file:ImLoginRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(IMQueryPushShieldRsp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
